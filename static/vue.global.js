<!DOCTYPE html><html lang="en"><head><script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-140352188-1"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-140352188-1');</script><meta charSet="utf-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/><meta name="description" content="The CDN for vue"/><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"/><meta name="timestamp" content="2022-11-23T02:00:38.332Z"/><link rel="shortcut icon" href="/favicon.ico"/><title>UNPKG - vue</title><script>window.Promise || document.write('\x3Cscript src="/es6-promise@4.2.5/dist/es6-promise.min.js">\x3C/script>\x3Cscript>ES6Promise.polyfill()\x3C/script>')</script><script>window.fetch || document.write('\x3Cscript src="/whatwg-fetch@3.0.0/dist/fetch.umd.js">\x3C/script>')</script><script>window.__DATA__ = {"packageName":"vue","packageVersion":"3.2.45","availableVersions":["0.0.0","0.6.0","0.7.0","0.7.1","0.7.3","0.7.4","0.7.5","0.7.6","0.8.0","0.8.1","0.8.2","0.8.3","0.8.4","0.8.6","0.8.7","0.8.8","0.9.0","0.9.1","0.9.2","0.9.3","0.10.0","0.10.1","0.10.2","0.10.3","0.10.4","0.10.5","0.10.6","0.11.0-rc","0.11.0-rc2","0.11.0-rc3","0.11.0","0.11.1","0.11.2","0.11.3","0.11.4","0.11.5","0.11.6","0.11.7","0.11.8","0.11.9","0.11.10","0.12.0-beta1","0.12.0-beta2","0.12.0-beta3","0.12.0-beta4","0.12.0-beta5","0.12.0-csp","0.12.0-rc","0.12.0-rc2","0.12.0","0.12.1-csp","0.12.1-csp.1","0.12.1-csp.2","0.12.1","0.12.2","0.12.3","0.12.4","0.12.5-csp","0.12.5","0.12.6-csp","0.12.6","0.12.7-csp","0.12.7","0.12.8-csp","0.12.8","0.12.9-csp","0.12.9","0.12.10-csp","0.12.10","0.12.11-csp","0.12.11","0.12.12-csp","0.12.12","0.12.13-csp","0.12.13","0.12.14-csp","0.12.14","0.12.15-csp","0.12.15","0.12.16-csp","0.12.16","1.0.0-alpha.1","1.0.0-alpha.2","1.0.0-alpha.3","1.0.0-alpha.4","1.0.0-alpha.5","1.0.0-alpha.6","1.0.0-alpha.7","1.0.0-alpha.8","1.0.0-beta.1","1.0.0-beta.2","1.0.0-beta.3","1.0.0-beta.4","1.0.0-csp","1.0.0-migration","1.0.0-rc.1","1.0.0-rc.2","1.0.0-rc.2-migration","1.0.0","1.0.1","1.0.2","1.0.3","1.0.4","1.0.5","1.0.6","1.0.7","1.0.8","1.0.9","1.0.10-csp","1.0.10","1.0.11-csp","1.0.11","1.0.12-csp","1.0.12-csp-1","1.0.12","1.0.13-csp","1.0.13","1.0.14-csp","1.0.14","1.0.15-csp","1.0.15","1.0.16-csp","1.0.16","1.0.17-csp","1.0.17","1.0.18-csp","1.0.18","1.0.19-csp","1.0.19","1.0.20-csp","1.0.20","1.0.21-csp","1.0.21","1.0.22-csp","1.0.22","1.0.23-csp","1.0.23","1.0.24-csp","1.0.24","1.0.25-csp","1.0.25","1.0.26-csp","1.0.26","1.0.27-csp","1.0.27","1.0.28-csp","1.0.28","2.0.0-alpha.1","2.0.0-alpha.2","2.0.0-alpha.3","2.0.0-alpha.4","2.0.0-alpha.5","2.0.0-alpha.6","2.0.0-alpha.7","2.0.0-alpha.8","2.0.0-beta.1","2.0.0-beta.2","2.0.0-beta.3","2.0.0-beta.4","2.0.0-beta.5","2.0.0-beta.6","2.0.0-beta.7","2.0.0-beta.8","2.0.0-rc.1","2.0.0-rc.2","2.0.0-rc.3","2.0.0-rc.4","2.0.0-rc.5","2.0.0-rc.6","2.0.0-rc.7","2.0.0-rc.8","2.0.0","2.0.1","2.0.2","2.0.3","2.0.4","2.0.5","2.0.6","2.0.7","2.0.8","2.1.0","2.1.1","2.1.2","2.1.3","2.1.4","2.1.5","2.1.6","2.1.7","2.1.8","2.1.9","2.1.10","2.2.0-beta.1","2.2.0-beta.2","2.2.0","2.2.1","2.2.2","2.2.3","2.2.4","2.2.5","2.2.6","2.3.0-beta.1","2.3.0","2.3.1","2.3.2","2.3.3","2.3.4","2.4.0","2.4.1","2.4.2","2.4.3","2.4.4","2.5.0","2.5.1","2.5.2","2.5.3","2.5.4","2.5.5","2.5.6","2.5.7","2.5.8","2.5.9","2.5.10","2.5.11","2.5.12","2.5.13","2.5.14","2.5.15","2.5.16","2.5.17-beta.0","2.5.17","2.5.18-beta.0","2.5.18","2.5.19","2.5.20","2.5.21","2.5.22","2.6.0-beta.1","2.6.0-beta.2","2.6.0-beta.3","2.6.0","2.6.1","2.6.2","2.6.3","2.6.4","2.6.5","2.6.6","2.6.7","2.6.8","2.6.9","2.6.10","2.6.11","2.6.12","2.6.13","2.6.14","2.7.0-alpha.1","2.7.0-alpha.2","2.7.0-alpha.3","2.7.0-alpha.4","2.7.0-alpha.5","2.7.0-alpha.6","2.7.0-alpha.7","2.7.0-alpha.8","2.7.0-alpha.9","2.7.0-alpha.10","2.7.0-alpha.11","2.7.0-alpha.12","2.7.0-beta.1","2.7.0-beta.2","2.7.0-beta.3","2.7.0-beta.4","2.7.0-beta.5","2.7.0-beta.6","2.7.0-beta.7","2.7.0-beta.8","2.7.0","2.7.1","2.7.2","2.7.3","2.7.4","2.7.5","2.7.6","2.7.7","2.7.8","2.7.9","2.7.10","2.7.11","2.7.12","2.7.13","2.7.14","3.0.0-alpha.0","3.0.0-alpha.1","3.0.0-alpha.2","3.0.0-alpha.3","3.0.0-alpha.4","3.0.0-alpha.5","3.0.0-alpha.6","3.0.0-alpha.7","3.0.0-alpha.8","3.0.0-alpha.9","3.0.0-alpha.10","3.0.0-alpha.11","3.0.0-alpha.12","3.0.0-alpha.13","3.0.0-beta.1","3.0.0-beta.2","3.0.0-beta.3","3.0.0-beta.4","3.0.0-beta.5","3.0.0-beta.6","3.0.0-beta.7","3.0.0-beta.8","3.0.0-beta.9","3.0.0-beta.10","3.0.0-beta.11","3.0.0-beta.12","3.0.0-beta.13","3.0.0-beta.14","3.0.0-beta.15","3.0.0-beta.16","3.0.0-beta.17","3.0.0-beta.18","3.0.0-beta.19","3.0.0-beta.20","3.0.0-beta.21","3.0.0-beta.22","3.0.0-beta.23","3.0.0-beta.24","3.0.0-rc.1","3.0.0-rc.2","3.0.0-rc.3","3.0.0-rc.4","3.0.0-rc.5","3.0.0-rc.6","3.0.0-rc.7","3.0.0-rc.8","3.0.0-rc.9","3.0.0-rc.10","3.0.0-rc.11","3.0.0-rc.12","3.0.0-rc.13","3.0.0","3.0.1","3.0.2","3.0.3","3.0.4","3.0.5","3.0.6","3.0.7","3.0.8","3.0.9","3.0.10","3.0.11","3.1.0-beta.1","3.1.0-beta.2","3.1.0-beta.3","3.1.0-beta.4","3.1.0-beta.5","3.1.0-beta.6","3.1.0-beta.7","3.1.0","3.1.1","3.1.2","3.1.3","3.1.4","3.1.5","3.2.0-beta.1","3.2.0-beta.2","3.2.0-beta.3","3.2.0-beta.4","3.2.0-beta.5","3.2.0-beta.6","3.2.0-beta.7","3.2.0-beta.8","3.2.0","3.2.1","3.2.2","3.2.3","3.2.4","3.2.5","3.2.6","3.2.7","3.2.8","3.2.9","3.2.10","3.2.11","3.2.12","3.2.13","3.2.14","3.2.15","3.2.16","3.2.17","3.2.18","3.2.19","3.2.20","3.2.21","3.2.22","3.2.23","3.2.24","3.2.25","3.2.26","3.2.27","3.2.28","3.2.29","3.2.30","3.2.31","3.2.32","3.2.33","3.2.34-beta.1","3.2.34","3.2.35","3.2.36","3.2.37","3.2.38","3.2.39","3.2.40","3.2.41","3.2.42","3.2.43","3.2.44","3.2.45"],"filename":"/dist/vue.global.js","target":{"path":"/dist/vue.global.js","type":"file","details":{"contentType":"application/javascript","integrity":"sha384-/Yv7JJr5xq1ZjrW3t2shmoSS2rG5HQjNbVmjoTs3/FpXP48eHG7WrwLJt//y5g+e","language":"JavaScript","size":640387,"uri":null,"highlights":["<span class=\"code-keyword\">var</span> Vue = (<span class=\"code-function\"><span class=\"code-keyword\">function</span> (<span class=\"code-params\">exports</span>) </span>{\n","<span class=\"code-meta\">  'use strict'</span>;\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Make a map and return a function for checking if a key\n</span>","<span class=\"code-comment\">   * is in that map.\n</span>","<span class=\"code-comment\">   * IMPORTANT: all calls of this function must be prefixed with\n</span>","<span class=\"code-comment\">   * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\n</span>","<span class=\"code-comment\">   * So that rollup can tree-shake them if necessary.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">makeMap</span>(<span class=\"code-params\">str, expectsLowerCase</span>) </span>{\n","      <span class=\"code-keyword\">const</span> map = <span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>);\n","      <span class=\"code-keyword\">const</span> list = str.split(<span class=\"code-string\">','</span>);\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; list.length; i++) {\n","          map[list[i]] = <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-keyword\">return</span> expectsLowerCase ? <span class=\"code-function\"><span class=\"code-params\">val</span> =&gt;</span> !!map[val.toLowerCase()] : <span class=\"code-function\"><span class=\"code-params\">val</span> =&gt;</span> !!map[val];\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only flag -&gt; name mapping\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> PatchFlagNames = {\n","      [<span class=\"code-number\">1</span> <span class=\"code-comment\">/* PatchFlags.TEXT */</span>]: <span class=\"code-string\">`TEXT`</span>,\n","      [<span class=\"code-number\">2</span> <span class=\"code-comment\">/* PatchFlags.CLASS */</span>]: <span class=\"code-string\">`CLASS`</span>,\n","      [<span class=\"code-number\">4</span> <span class=\"code-comment\">/* PatchFlags.STYLE */</span>]: <span class=\"code-string\">`STYLE`</span>,\n","      [<span class=\"code-number\">8</span> <span class=\"code-comment\">/* PatchFlags.PROPS */</span>]: <span class=\"code-string\">`PROPS`</span>,\n","      [<span class=\"code-number\">16</span> <span class=\"code-comment\">/* PatchFlags.FULL_PROPS */</span>]: <span class=\"code-string\">`FULL_PROPS`</span>,\n","      [<span class=\"code-number\">32</span> <span class=\"code-comment\">/* PatchFlags.HYDRATE_EVENTS */</span>]: <span class=\"code-string\">`HYDRATE_EVENTS`</span>,\n","      [<span class=\"code-number\">64</span> <span class=\"code-comment\">/* PatchFlags.STABLE_FRAGMENT */</span>]: <span class=\"code-string\">`STABLE_FRAGMENT`</span>,\n","      [<span class=\"code-number\">128</span> <span class=\"code-comment\">/* PatchFlags.KEYED_FRAGMENT */</span>]: <span class=\"code-string\">`KEYED_FRAGMENT`</span>,\n","      [<span class=\"code-number\">256</span> <span class=\"code-comment\">/* PatchFlags.UNKEYED_FRAGMENT */</span>]: <span class=\"code-string\">`UNKEYED_FRAGMENT`</span>,\n","      [<span class=\"code-number\">512</span> <span class=\"code-comment\">/* PatchFlags.NEED_PATCH */</span>]: <span class=\"code-string\">`NEED_PATCH`</span>,\n","      [<span class=\"code-number\">1024</span> <span class=\"code-comment\">/* PatchFlags.DYNAMIC_SLOTS */</span>]: <span class=\"code-string\">`DYNAMIC_SLOTS`</span>,\n","      [<span class=\"code-number\">2048</span> <span class=\"code-comment\">/* PatchFlags.DEV_ROOT_FRAGMENT */</span>]: <span class=\"code-string\">`DEV_ROOT_FRAGMENT`</span>,\n","      [<span class=\"code-number\">-1</span> <span class=\"code-comment\">/* PatchFlags.HOISTED */</span>]: <span class=\"code-string\">`HOISTED`</span>,\n","      [<span class=\"code-number\">-2</span> <span class=\"code-comment\">/* PatchFlags.BAIL */</span>]: <span class=\"code-string\">`BAIL`</span>\n","  };\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> slotFlagsText = {\n","      [<span class=\"code-number\">1</span> <span class=\"code-comment\">/* SlotFlags.STABLE */</span>]: <span class=\"code-string\">'STABLE'</span>,\n","      [<span class=\"code-number\">2</span> <span class=\"code-comment\">/* SlotFlags.DYNAMIC */</span>]: <span class=\"code-string\">'DYNAMIC'</span>,\n","      [<span class=\"code-number\">3</span> <span class=\"code-comment\">/* SlotFlags.FORWARDED */</span>]: <span class=\"code-string\">'FORWARDED'</span>\n","  };\n","\n","  <span class=\"code-keyword\">const</span> GLOBALS_WHITE_LISTED = <span class=\"code-string\">'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,'</span> +\n","      <span class=\"code-string\">'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,'</span> +\n","      <span class=\"code-string\">'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt'</span>;\n","  <span class=\"code-keyword\">const</span> isGloballyWhitelisted = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(GLOBALS_WHITE_LISTED);\n","\n","  <span class=\"code-keyword\">const</span> range = <span class=\"code-number\">2</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">generateCodeFrame</span>(<span class=\"code-params\">source, start = <span class=\"code-number\">0</span>, end = source.length</span>) </span>{\n","      <span class=\"code-comment\">// Split the content into individual lines but capture the newline sequence</span>\n","      <span class=\"code-comment\">// that separated each line. This is important because the actual sequence is</span>\n","      <span class=\"code-comment\">// needed to properly take into account the full line length for offset</span>\n","      <span class=\"code-comment\">// comparison</span>\n","      <span class=\"code-keyword\">let</span> lines = source.split(<span class=\"code-regexp\">/(\\r?\\n)/</span>);\n","      <span class=\"code-comment\">// Separate the lines and newline sequences into separate arrays for easier referencing</span>\n","      <span class=\"code-keyword\">const</span> newlineSequences = lines.filter(<span class=\"code-function\">(<span class=\"code-params\">_, idx</span>) =&gt;</span> idx % <span class=\"code-number\">2</span> === <span class=\"code-number\">1</span>);\n","      lines = lines.filter(<span class=\"code-function\">(<span class=\"code-params\">_, idx</span>) =&gt;</span> idx % <span class=\"code-number\">2</span> === <span class=\"code-number\">0</span>);\n","      <span class=\"code-keyword\">let</span> count = <span class=\"code-number\">0</span>;\n","      <span class=\"code-keyword\">const</span> res = [];\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; lines.length; i++) {\n","          count +=\n","              lines[i].length +\n","                  ((newlineSequences[i] &amp;&amp; newlineSequences[i].length) || <span class=\"code-number\">0</span>);\n","          <span class=\"code-keyword\">if</span> (count &gt;= start) {\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> j = i - range; j &lt;= i + range || end &gt; count; j++) {\n","                  <span class=\"code-keyword\">if</span> (j &lt; <span class=\"code-number\">0</span> || j &gt;= lines.length)\n","                      <span class=\"code-keyword\">continue</span>;\n","                  <span class=\"code-keyword\">const</span> line = j + <span class=\"code-number\">1</span>;\n","                  res.push(<span class=\"code-string\">`<span class=\"code-subst\">${line}</span><span class=\"code-subst\">${<span class=\"code-string\">' '</span>.repeat(<span class=\"code-built_in\">Math</span>.max(<span class=\"code-number\">3</span> - <span class=\"code-built_in\">String</span>(line).length, <span class=\"code-number\">0</span>))}</span>|  <span class=\"code-subst\">${lines[j]}</span>`</span>);\n","                  <span class=\"code-keyword\">const</span> lineLength = lines[j].length;\n","                  <span class=\"code-keyword\">const</span> newLineSeqLength = (newlineSequences[j] &amp;&amp; newlineSequences[j].length) || <span class=\"code-number\">0</span>;\n","                  <span class=\"code-keyword\">if</span> (j === i) {\n","                      <span class=\"code-comment\">// push underline</span>\n","                      <span class=\"code-keyword\">const</span> pad = start - (count - (lineLength + newLineSeqLength));\n","                      <span class=\"code-keyword\">const</span> length = <span class=\"code-built_in\">Math</span>.max(<span class=\"code-number\">1</span>, end &gt; count ? lineLength - pad : end - start);\n","                      res.push(<span class=\"code-string\">`   |  `</span> + <span class=\"code-string\">' '</span>.repeat(pad) + <span class=\"code-string\">'^'</span>.repeat(length));\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (j &gt; i) {\n","                      <span class=\"code-keyword\">if</span> (end &gt; count) {\n","                          <span class=\"code-keyword\">const</span> length = <span class=\"code-built_in\">Math</span>.max(<span class=\"code-built_in\">Math</span>.min(end - count, lineLength), <span class=\"code-number\">1</span>);\n","                          res.push(<span class=\"code-string\">`   |  `</span> + <span class=\"code-string\">'^'</span>.repeat(length));\n","                      }\n","                      count += lineLength + newLineSeqLength;\n","                  }\n","              }\n","              <span class=\"code-keyword\">break</span>;\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> res.join(<span class=\"code-string\">'\\n'</span>);\n","  }\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeStyle</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isArray(value)) {\n","          <span class=\"code-keyword\">const</span> res = {};\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; value.length; i++) {\n","              <span class=\"code-keyword\">const</span> item = value[i];\n","              <span class=\"code-keyword\">const</span> normalized = isString(item)\n","                  ? parseStringStyle(item)\n","                  : normalizeStyle(item);\n","              <span class=\"code-keyword\">if</span> (normalized) {\n","                  <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> normalized) {\n","                      res[key] = normalized[key];\n","                  }\n","              }\n","          }\n","          <span class=\"code-keyword\">return</span> res;\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isString(value)) {\n","          <span class=\"code-keyword\">return</span> value;\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isObject(value)) {\n","          <span class=\"code-keyword\">return</span> value;\n","      }\n","  }\n","  <span class=\"code-keyword\">const</span> listDelimiterRE = <span class=\"code-regexp\">/;(?![^(]*\\))/g</span>;\n","  <span class=\"code-keyword\">const</span> propertyDelimiterRE = <span class=\"code-regexp\">/:([^]+)/</span>;\n","  <span class=\"code-keyword\">const</span> styleCommentRE = <span class=\"code-regexp\">/\\/\\*.*?\\*\\//g</span>s;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">parseStringStyle</span>(<span class=\"code-params\">cssText</span>) </span>{\n","      <span class=\"code-keyword\">const</span> ret = {};\n","      cssText\n","          .replace(styleCommentRE, <span class=\"code-string\">''</span>)\n","          .split(listDelimiterRE)\n","          .forEach(<span class=\"code-function\"><span class=\"code-params\">item</span> =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (item) {\n","              <span class=\"code-keyword\">const</span> tmp = item.split(propertyDelimiterRE);\n","              tmp.length &gt; <span class=\"code-number\">1</span> &amp;&amp; (ret[tmp[<span class=\"code-number\">0</span>].trim()] = tmp[<span class=\"code-number\">1</span>].trim());\n","          }\n","      });\n","      <span class=\"code-keyword\">return</span> ret;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeClass</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">let</span> res = <span class=\"code-string\">''</span>;\n","      <span class=\"code-keyword\">if</span> (isString(value)) {\n","          res = value;\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isArray(value)) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; value.length; i++) {\n","              <span class=\"code-keyword\">const</span> normalized = normalizeClass(value[i]);\n","              <span class=\"code-keyword\">if</span> (normalized) {\n","                  res += normalized + <span class=\"code-string\">' '</span>;\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isObject(value)) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> name <span class=\"code-keyword\">in</span> value) {\n","              <span class=\"code-keyword\">if</span> (value[name]) {\n","                  res += name + <span class=\"code-string\">' '</span>;\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> res.trim();\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeProps</span>(<span class=\"code-params\">props</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!props)\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">null</span>;\n","      <span class=\"code-keyword\">let</span> { <span class=\"code-attr\">class</span>: klass, style } = props;\n","      <span class=\"code-keyword\">if</span> (klass &amp;&amp; !isString(klass)) {\n","          props.class = normalizeClass(klass);\n","      }\n","      <span class=\"code-keyword\">if</span> (style) {\n","          props.style = normalizeStyle(style);\n","      }\n","      <span class=\"code-keyword\">return</span> props;\n","  }\n","\n","  <span class=\"code-comment\">// These tag configs are shared between compiler-dom and runtime-dom, so they</span>\n","  <span class=\"code-comment\">// https://developer.mozilla.org/en-US/docs/Web/HTML/Element</span>\n","  <span class=\"code-keyword\">const</span> HTML_TAGS = <span class=\"code-string\">'html,body,base,head,link,meta,style,title,address,article,aside,footer,'</span> +\n","      <span class=\"code-string\">'header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,'</span> +\n","      <span class=\"code-string\">'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,'</span> +\n","      <span class=\"code-string\">'data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,'</span> +\n","      <span class=\"code-string\">'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,'</span> +\n","      <span class=\"code-string\">'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,'</span> +\n","      <span class=\"code-string\">'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,'</span> +\n","      <span class=\"code-string\">'option,output,progress,select,textarea,details,dialog,menu,'</span> +\n","      <span class=\"code-string\">'summary,template,blockquote,iframe,tfoot'</span>;\n","  <span class=\"code-comment\">// https://developer.mozilla.org/en-US/docs/Web/SVG/Element</span>\n","  <span class=\"code-keyword\">const</span> SVG_TAGS = <span class=\"code-string\">'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,'</span> +\n","      <span class=\"code-string\">'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,'</span> +\n","      <span class=\"code-string\">'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,'</span> +\n","      <span class=\"code-string\">'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,'</span> +\n","      <span class=\"code-string\">'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,'</span> +\n","      <span class=\"code-string\">'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,'</span> +\n","      <span class=\"code-string\">'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,'</span> +\n","      <span class=\"code-string\">'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,'</span> +\n","      <span class=\"code-string\">'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,'</span> +\n","      <span class=\"code-string\">'text,textPath,title,tspan,unknown,use,view'</span>;\n","  <span class=\"code-keyword\">const</span> VOID_TAGS = <span class=\"code-string\">'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr'</span>;\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Compiler only.\n</span>","<span class=\"code-comment\">   * Do NOT use in runtime code paths unless behind `true` flag.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> isHTMLTag = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(HTML_TAGS);\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Compiler only.\n</span>","<span class=\"code-comment\">   * Do NOT use in runtime code paths unless behind `true` flag.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> isSVGTag = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(SVG_TAGS);\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Compiler only.\n</span>","<span class=\"code-comment\">   * Do NOT use in runtime code paths unless behind `true` flag.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> isVoidTag = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(VOID_TAGS);\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * On the client we only need to offer special cases for boolean attributes that\n</span>","<span class=\"code-comment\">   * have different names from their corresponding dom properties:\n</span>","<span class=\"code-comment\">   * - itemscope -&gt; N/A\n</span>","<span class=\"code-comment\">   * - allowfullscreen -&gt; allowFullscreen\n</span>","<span class=\"code-comment\">   * - formnovalidate -&gt; formNoValidate\n</span>","<span class=\"code-comment\">   * - ismap -&gt; isMap\n</span>","<span class=\"code-comment\">   * - nomodule -&gt; noModule\n</span>","<span class=\"code-comment\">   * - novalidate -&gt; noValidate\n</span>","<span class=\"code-comment\">   * - readonly -&gt; readOnly\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> specialBooleanAttrs = <span class=\"code-string\">`itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`</span>;\n","  <span class=\"code-keyword\">const</span> isSpecialBooleanAttr = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(specialBooleanAttrs);\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Boolean attributes should be included if the value is truthy or ''.\n</span>","<span class=\"code-comment\">   * e.g. `&lt;select multiple&gt;` compiles to `{ multiple: '' }`\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">includeBooleanAttr</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">return</span> !!value || value === <span class=\"code-string\">''</span>;\n","  }\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">looseCompareArrays</span>(<span class=\"code-params\">a, b</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (a.length !== b.length)\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">let</span> equal = <span class=\"code-literal\">true</span>;\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; equal &amp;&amp; i &lt; a.length; i++) {\n","          equal = looseEqual(a[i], b[i]);\n","      }\n","      <span class=\"code-keyword\">return</span> equal;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">looseEqual</span>(<span class=\"code-params\">a, b</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (a === b)\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      <span class=\"code-keyword\">let</span> aValidType = isDate(a);\n","      <span class=\"code-keyword\">let</span> bValidType = isDate(b);\n","      <span class=\"code-keyword\">if</span> (aValidType || bValidType) {\n","          <span class=\"code-keyword\">return</span> aValidType &amp;&amp; bValidType ? a.getTime() === b.getTime() : <span class=\"code-literal\">false</span>;\n","      }\n","      aValidType = isSymbol(a);\n","      bValidType = isSymbol(b);\n","      <span class=\"code-keyword\">if</span> (aValidType || bValidType) {\n","          <span class=\"code-keyword\">return</span> a === b;\n","      }\n","      aValidType = isArray(a);\n","      bValidType = isArray(b);\n","      <span class=\"code-keyword\">if</span> (aValidType || bValidType) {\n","          <span class=\"code-keyword\">return</span> aValidType &amp;&amp; bValidType ? looseCompareArrays(a, b) : <span class=\"code-literal\">false</span>;\n","      }\n","      aValidType = isObject(a);\n","      bValidType = isObject(b);\n","      <span class=\"code-keyword\">if</span> (aValidType || bValidType) {\n","          <span class=\"code-comment\">/* istanbul ignore if: this if will probably never be called */</span>\n","          <span class=\"code-keyword\">if</span> (!aValidType || !bValidType) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          }\n","          <span class=\"code-keyword\">const</span> aKeysCount = <span class=\"code-built_in\">Object</span>.keys(a).length;\n","          <span class=\"code-keyword\">const</span> bKeysCount = <span class=\"code-built_in\">Object</span>.keys(b).length;\n","          <span class=\"code-keyword\">if</span> (aKeysCount !== bKeysCount) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          }\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> a) {\n","              <span class=\"code-keyword\">const</span> aHasKey = a.hasOwnProperty(key);\n","              <span class=\"code-keyword\">const</span> bHasKey = b.hasOwnProperty(key);\n","              <span class=\"code-keyword\">if</span> ((aHasKey &amp;&amp; !bHasKey) ||\n","                  (!aHasKey &amp;&amp; bHasKey) ||\n","                  !looseEqual(a[key], b[key])) {\n","                  <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">String</span>(a) === <span class=\"code-built_in\">String</span>(b);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">looseIndexOf</span>(<span class=\"code-params\">arr, val</span>) </span>{\n","      <span class=\"code-keyword\">return</span> arr.findIndex(<span class=\"code-function\"><span class=\"code-params\">item</span> =&gt;</span> looseEqual(item, val));\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * For converting {{ interpolation }} values to displayed strings.\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> toDisplayString = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">return</span> isString(val)\n","          ? val\n","          : val == <span class=\"code-literal\">null</span>\n","              ? <span class=\"code-string\">''</span>\n","              : isArray(val) ||\n","                  (isObject(val) &amp;&amp;\n","                      (val.toString === objectToString || !isFunction(val.toString)))\n","                  ? <span class=\"code-built_in\">JSON</span>.stringify(val, replacer, <span class=\"code-number\">2</span>)\n","                  : <span class=\"code-built_in\">String</span>(val);\n","  };\n","  <span class=\"code-keyword\">const</span> replacer = <span class=\"code-function\">(<span class=\"code-params\">_key, val</span>) =&gt;</span> {\n","      <span class=\"code-comment\">// can't use isRef here since @vue/shared has no deps</span>\n","      <span class=\"code-keyword\">if</span> (val &amp;&amp; val.__v_isRef) {\n","          <span class=\"code-keyword\">return</span> replacer(_key, val.value);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isMap(val)) {\n","          <span class=\"code-keyword\">return</span> {\n","              [<span class=\"code-string\">`Map(<span class=\"code-subst\">${val.size}</span>)`</span>]: [...val.entries()].reduce(<span class=\"code-function\">(<span class=\"code-params\">entries, [key, val]</span>) =&gt;</span> {\n","                  entries[<span class=\"code-string\">`<span class=\"code-subst\">${key}</span> =&gt;`</span>] = val;\n","                  <span class=\"code-keyword\">return</span> entries;\n","              }, {})\n","          };\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isSet(val)) {\n","          <span class=\"code-keyword\">return</span> {\n","              [<span class=\"code-string\">`Set(<span class=\"code-subst\">${val.size}</span>)`</span>]: [...val.values()]\n","          };\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isObject(val) &amp;&amp; !isArray(val) &amp;&amp; !isPlainObject(val)) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">String</span>(val);\n","      }\n","      <span class=\"code-keyword\">return</span> val;\n","  };\n","\n","  <span class=\"code-keyword\">const</span> EMPTY_OBJ = <span class=\"code-built_in\">Object</span>.freeze({})\n","      ;\n","  <span class=\"code-keyword\">const</span> EMPTY_ARR = <span class=\"code-built_in\">Object</span>.freeze([]) ;\n","  <span class=\"code-keyword\">const</span> NOOP = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> { };\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Always return false.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> NO = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> <span class=\"code-literal\">false</span>;\n","  <span class=\"code-keyword\">const</span> onRE = <span class=\"code-regexp\">/^on[^a-z]/</span>;\n","  <span class=\"code-keyword\">const</span> isOn = <span class=\"code-function\">(<span class=\"code-params\">key</span>) =&gt;</span> onRE.test(key);\n","  <span class=\"code-keyword\">const</span> isModelListener = <span class=\"code-function\">(<span class=\"code-params\">key</span>) =&gt;</span> key.startsWith(<span class=\"code-string\">'onUpdate:'</span>);\n","  <span class=\"code-keyword\">const</span> extend = <span class=\"code-built_in\">Object</span>.assign;\n","  <span class=\"code-keyword\">const</span> remove = <span class=\"code-function\">(<span class=\"code-params\">arr, el</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> i = arr.indexOf(el);\n","      <span class=\"code-keyword\">if</span> (i &gt; <span class=\"code-number\">-1</span>) {\n","          arr.splice(i, <span class=\"code-number\">1</span>);\n","      }\n","  };\n","  <span class=\"code-keyword\">const</span> hasOwnProperty = <span class=\"code-built_in\">Object</span>.prototype.hasOwnProperty;\n","  <span class=\"code-keyword\">const</span> hasOwn = <span class=\"code-function\">(<span class=\"code-params\">val, key</span>) =&gt;</span> hasOwnProperty.call(val, key);\n","  <span class=\"code-keyword\">const</span> isArray = <span class=\"code-built_in\">Array</span>.isArray;\n","  <span class=\"code-keyword\">const</span> isMap = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> toTypeString(val) === <span class=\"code-string\">'[object Map]'</span>;\n","  <span class=\"code-keyword\">const</span> isSet = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> toTypeString(val) === <span class=\"code-string\">'[object Set]'</span>;\n","  <span class=\"code-keyword\">const</span> isDate = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> toTypeString(val) === <span class=\"code-string\">'[object Date]'</span>;\n","  <span class=\"code-keyword\">const</span> isFunction = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> <span class=\"code-keyword\">typeof</span> val === <span class=\"code-string\">'function'</span>;\n","  <span class=\"code-keyword\">const</span> isString = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> <span class=\"code-keyword\">typeof</span> val === <span class=\"code-string\">'string'</span>;\n","  <span class=\"code-keyword\">const</span> isSymbol = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> <span class=\"code-keyword\">typeof</span> val === <span class=\"code-string\">'symbol'</span>;\n","  <span class=\"code-keyword\">const</span> isObject = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> val !== <span class=\"code-literal\">null</span> &amp;&amp; <span class=\"code-keyword\">typeof</span> val === <span class=\"code-string\">'object'</span>;\n","  <span class=\"code-keyword\">const</span> isPromise = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">return</span> isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch);\n","  };\n","  <span class=\"code-keyword\">const</span> objectToString = <span class=\"code-built_in\">Object</span>.prototype.toString;\n","  <span class=\"code-keyword\">const</span> toTypeString = <span class=\"code-function\">(<span class=\"code-params\">value</span>) =&gt;</span> objectToString.call(value);\n","  <span class=\"code-keyword\">const</span> toRawType = <span class=\"code-function\">(<span class=\"code-params\">value</span>) =&gt;</span> {\n","      <span class=\"code-comment\">// extract \"RawType\" from strings like \"[object RawType]\"</span>\n","      <span class=\"code-keyword\">return</span> toTypeString(value).slice(<span class=\"code-number\">8</span>, <span class=\"code-number\">-1</span>);\n","  };\n","  <span class=\"code-keyword\">const</span> isPlainObject = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> toTypeString(val) === <span class=\"code-string\">'[object Object]'</span>;\n","  <span class=\"code-keyword\">const</span> isIntegerKey = <span class=\"code-function\">(<span class=\"code-params\">key</span>) =&gt;</span> isString(key) &amp;&amp;\n","      key !== <span class=\"code-string\">'NaN'</span> &amp;&amp;\n","      key[<span class=\"code-number\">0</span>] !== <span class=\"code-string\">'-'</span> &amp;&amp;\n","      <span class=\"code-string\">''</span> + <span class=\"code-built_in\">parseInt</span>(key, <span class=\"code-number\">10</span>) === key;\n","  <span class=\"code-keyword\">const</span> isReservedProp = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(\n","  <span class=\"code-comment\">// the leading comma is intentional so empty string \"\" is also included</span>\n","  <span class=\"code-string\">',key,ref,ref_for,ref_key,'</span> +\n","      <span class=\"code-string\">'onVnodeBeforeMount,onVnodeMounted,'</span> +\n","      <span class=\"code-string\">'onVnodeBeforeUpdate,onVnodeUpdated,'</span> +\n","      <span class=\"code-string\">'onVnodeBeforeUnmount,onVnodeUnmounted'</span>);\n","  <span class=\"code-keyword\">const</span> isBuiltInDirective = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(<span class=\"code-string\">'bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo'</span>);\n","  <span class=\"code-keyword\">const</span> cacheStringFunction = <span class=\"code-function\">(<span class=\"code-params\">fn</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> cache = <span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>);\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\">(<span class=\"code-params\">(str</span>) =&gt;</span> {\n","          <span class=\"code-keyword\">const</span> hit = cache[str];\n","          <span class=\"code-keyword\">return</span> hit || (cache[str] = fn(str));\n","      });\n","  };\n","  <span class=\"code-keyword\">const</span> camelizeRE = <span class=\"code-regexp\">/-(\\w)/g</span>;\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> camelize = cacheStringFunction(<span class=\"code-function\">(<span class=\"code-params\">str</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">return</span> str.replace(camelizeRE, (_, c) =&gt; (c ? c.toUpperCase() : <span class=\"code-string\">''</span>));\n","  });\n","  <span class=\"code-keyword\">const</span> hyphenateRE = <span class=\"code-regexp\">/\\B([A-Z])/g</span>;\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> hyphenate = cacheStringFunction(<span class=\"code-function\">(<span class=\"code-params\">str</span>) =&gt;</span> str.replace(hyphenateRE, <span class=\"code-string\">'-$1'</span>).toLowerCase());\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> capitalize = cacheStringFunction(<span class=\"code-function\">(<span class=\"code-params\">str</span>) =&gt;</span> str.charAt(<span class=\"code-number\">0</span>).toUpperCase() + str.slice(<span class=\"code-number\">1</span>));\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> toHandlerKey = cacheStringFunction(<span class=\"code-function\">(<span class=\"code-params\">str</span>) =&gt;</span> str ? <span class=\"code-string\">`on<span class=\"code-subst\">${capitalize(str)}</span>`</span> : <span class=\"code-string\">``</span>);\n","  <span class=\"code-comment\">// compare whether a value has changed, accounting for NaN.</span>\n","  <span class=\"code-keyword\">const</span> hasChanged = <span class=\"code-function\">(<span class=\"code-params\">value, oldValue</span>) =&gt;</span> !<span class=\"code-built_in\">Object</span>.is(value, oldValue);\n","  <span class=\"code-keyword\">const</span> invokeArrayFns = <span class=\"code-function\">(<span class=\"code-params\">fns, arg</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; fns.length; i++) {\n","          fns[i](arg);\n","      }\n","  };\n","  <span class=\"code-keyword\">const</span> def = <span class=\"code-function\">(<span class=\"code-params\">obj, key, value</span>) =&gt;</span> {\n","      <span class=\"code-built_in\">Object</span>.defineProperty(obj, key, {\n","          configurable: <span class=\"code-literal\">true</span>,\n","          enumerable: <span class=\"code-literal\">false</span>,\n","          value\n","      });\n","  };\n","  <span class=\"code-keyword\">const</span> toNumber = <span class=\"code-function\">(<span class=\"code-params\">val</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> n = <span class=\"code-built_in\">parseFloat</span>(val);\n","      <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">isNaN</span>(n) ? val : n;\n","  };\n","  <span class=\"code-keyword\">let</span> _globalThis;\n","  <span class=\"code-keyword\">const</span> getGlobalThis = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","      <span class=\"code-keyword\">return</span> (_globalThis ||\n","          (_globalThis =\n","              <span class=\"code-keyword\">typeof</span> globalThis !== <span class=\"code-string\">'undefined'</span>\n","                  ? globalThis\n","                  : <span class=\"code-keyword\">typeof</span> self !== <span class=\"code-string\">'undefined'</span>\n","                      ? self\n","                      : <span class=\"code-keyword\">typeof</span> <span class=\"code-built_in\">window</span> !== <span class=\"code-string\">'undefined'</span>\n","                          ? <span class=\"code-built_in\">window</span>\n","                          : <span class=\"code-keyword\">typeof</span> global !== <span class=\"code-string\">'undefined'</span>\n","                              ? global\n","                              : {}));\n","  };\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">warn</span>(<span class=\"code-params\">msg, ...args</span>) </span>{\n","      <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">`[Vue warn] <span class=\"code-subst\">${msg}</span>`</span>, ...args);\n","  }\n","\n","  <span class=\"code-keyword\">let</span> activeEffectScope;\n","  <span class=\"code-class\"><span class=\"code-keyword\">class</span> <span class=\"code-title\">EffectScope</span> </span>{\n","      <span class=\"code-keyword\">constructor</span>(detached = false) {\n","          <span class=\"code-keyword\">this</span>.detached = detached;\n","          <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">           * @internal\n</span>","<span class=\"code-comment\">           */</span>\n","          <span class=\"code-keyword\">this</span>.active = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">           * @internal\n</span>","<span class=\"code-comment\">           */</span>\n","          <span class=\"code-keyword\">this</span>.effects = [];\n","          <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">           * @internal\n</span>","<span class=\"code-comment\">           */</span>\n","          <span class=\"code-keyword\">this</span>.cleanups = [];\n","          <span class=\"code-keyword\">this</span>.parent = activeEffectScope;\n","          <span class=\"code-keyword\">if</span> (!detached &amp;&amp; activeEffectScope) {\n","              <span class=\"code-keyword\">this</span>.index =\n","                  (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(<span class=\"code-keyword\">this</span>) - <span class=\"code-number\">1</span>;\n","          }\n","      }\n","      run(fn) {\n","          <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">this</span>.active) {\n","              <span class=\"code-keyword\">const</span> currentEffectScope = activeEffectScope;\n","              <span class=\"code-keyword\">try</span> {\n","                  activeEffectScope = <span class=\"code-keyword\">this</span>;\n","                  <span class=\"code-keyword\">return</span> fn();\n","              }\n","              <span class=\"code-keyword\">finally</span> {\n","                  activeEffectScope = currentEffectScope;\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              warn(<span class=\"code-string\">`cannot run an inactive effect scope.`</span>);\n","          }\n","      }\n","      <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">       * This should only be called on non-detached scopes\n</span>","<span class=\"code-comment\">       * @internal\n</span>","<span class=\"code-comment\">       */</span>\n","      on() {\n","          activeEffectScope = <span class=\"code-keyword\">this</span>;\n","      }\n","      <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">       * This should only be called on non-detached scopes\n</span>","<span class=\"code-comment\">       * @internal\n</span>","<span class=\"code-comment\">       */</span>\n","      off() {\n","          activeEffectScope = <span class=\"code-keyword\">this</span>.parent;\n","      }\n","      stop(fromParent) {\n","          <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">this</span>.active) {\n","              <span class=\"code-keyword\">let</span> i, l;\n","              <span class=\"code-keyword\">for</span> (i = <span class=\"code-number\">0</span>, l = <span class=\"code-keyword\">this</span>.effects.length; i &lt; l; i++) {\n","                  <span class=\"code-keyword\">this</span>.effects[i].stop();\n","              }\n","              <span class=\"code-keyword\">for</span> (i = <span class=\"code-number\">0</span>, l = <span class=\"code-keyword\">this</span>.cleanups.length; i &lt; l; i++) {\n","                  <span class=\"code-keyword\">this</span>.cleanups[i]();\n","              }\n","              <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">this</span>.scopes) {\n","                  <span class=\"code-keyword\">for</span> (i = <span class=\"code-number\">0</span>, l = <span class=\"code-keyword\">this</span>.scopes.length; i &lt; l; i++) {\n","                      <span class=\"code-keyword\">this</span>.scopes[i].stop(<span class=\"code-literal\">true</span>);\n","                  }\n","              }\n","              <span class=\"code-comment\">// nested scope, dereference from parent to avoid memory leaks</span>\n","              <span class=\"code-keyword\">if</span> (!<span class=\"code-keyword\">this</span>.detached &amp;&amp; <span class=\"code-keyword\">this</span>.parent &amp;&amp; !fromParent) {\n","                  <span class=\"code-comment\">// optimized O(1) removal</span>\n","                  <span class=\"code-keyword\">const</span> last = <span class=\"code-keyword\">this</span>.parent.scopes.pop();\n","                  <span class=\"code-keyword\">if</span> (last &amp;&amp; last !== <span class=\"code-keyword\">this</span>) {\n","                      <span class=\"code-keyword\">this</span>.parent.scopes[<span class=\"code-keyword\">this</span>.index] = last;\n","                      last.index = <span class=\"code-keyword\">this</span>.index;\n","                  }\n","              }\n","              <span class=\"code-keyword\">this</span>.parent = <span class=\"code-literal\">undefined</span>;\n","              <span class=\"code-keyword\">this</span>.active = <span class=\"code-literal\">false</span>;\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">effectScope</span>(<span class=\"code-params\">detached</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">new</span> EffectScope(detached);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">recordEffectScope</span>(<span class=\"code-params\">effect, scope = activeEffectScope</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (scope &amp;&amp; scope.active) {\n","          scope.effects.push(effect);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getCurrentScope</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">return</span> activeEffectScope;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">onScopeDispose</span>(<span class=\"code-params\">fn</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (activeEffectScope) {\n","          activeEffectScope.cleanups.push(fn);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          warn(<span class=\"code-string\">`onScopeDispose() is called when there is no active effect scope`</span> +\n","              <span class=\"code-string\">` to be associated with.`</span>);\n","      }\n","  }\n","\n","  <span class=\"code-keyword\">const</span> createDep = <span class=\"code-function\">(<span class=\"code-params\">effects</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> dep = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>(effects);\n","      dep.w = <span class=\"code-number\">0</span>;\n","      dep.n = <span class=\"code-number\">0</span>;\n","      <span class=\"code-keyword\">return</span> dep;\n","  };\n","  <span class=\"code-keyword\">const</span> wasTracked = <span class=\"code-function\">(<span class=\"code-params\">dep</span>) =&gt;</span> (dep.w &amp; trackOpBit) &gt; <span class=\"code-number\">0</span>;\n","  <span class=\"code-keyword\">const</span> newTracked = <span class=\"code-function\">(<span class=\"code-params\">dep</span>) =&gt;</span> (dep.n &amp; trackOpBit) &gt; <span class=\"code-number\">0</span>;\n","  <span class=\"code-keyword\">const</span> initDepMarkers = <span class=\"code-function\">(<span class=\"code-params\">{ deps }</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">if</span> (deps.length) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; deps.length; i++) {\n","              deps[i].w |= trackOpBit; <span class=\"code-comment\">// set was tracked</span>\n","          }\n","      }\n","  };\n","  <span class=\"code-keyword\">const</span> finalizeDepMarkers = <span class=\"code-function\">(<span class=\"code-params\">effect</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> { deps } = effect;\n","      <span class=\"code-keyword\">if</span> (deps.length) {\n","          <span class=\"code-keyword\">let</span> ptr = <span class=\"code-number\">0</span>;\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; deps.length; i++) {\n","              <span class=\"code-keyword\">const</span> dep = deps[i];\n","              <span class=\"code-keyword\">if</span> (wasTracked(dep) &amp;&amp; !newTracked(dep)) {\n","                  dep.delete(effect);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  deps[ptr++] = dep;\n","              }\n","              <span class=\"code-comment\">// clear bits</span>\n","              dep.w &amp;= ~trackOpBit;\n","              dep.n &amp;= ~trackOpBit;\n","          }\n","          deps.length = ptr;\n","      }\n","  };\n","\n","  <span class=\"code-keyword\">const</span> targetMap = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>();\n","  <span class=\"code-comment\">// The number of effects currently being tracked recursively.</span>\n","  <span class=\"code-keyword\">let</span> effectTrackDepth = <span class=\"code-number\">0</span>;\n","  <span class=\"code-keyword\">let</span> trackOpBit = <span class=\"code-number\">1</span>;\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * The bitwise track markers support at most 30 levels of recursion.\n</span>","<span class=\"code-comment\">   * This value is chosen to enable modern JS engines to use a SMI on all platforms.\n</span>","<span class=\"code-comment\">   * When recursion depth is greater, fall back to using a full cleanup.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> maxMarkerBits = <span class=\"code-number\">30</span>;\n","  <span class=\"code-keyword\">let</span> activeEffect;\n","  <span class=\"code-keyword\">const</span> ITERATE_KEY = <span class=\"code-built_in\">Symbol</span>(<span class=\"code-string\">'iterate'</span> );\n","  <span class=\"code-keyword\">const</span> MAP_KEY_ITERATE_KEY = <span class=\"code-built_in\">Symbol</span>(<span class=\"code-string\">'Map key iterate'</span> );\n","  <span class=\"code-class\"><span class=\"code-keyword\">class</span> <span class=\"code-title\">ReactiveEffect</span> </span>{\n","      <span class=\"code-keyword\">constructor</span>(fn, scheduler = null, scope) {\n","          <span class=\"code-keyword\">this</span>.fn = fn;\n","          <span class=\"code-keyword\">this</span>.scheduler = scheduler;\n","          <span class=\"code-keyword\">this</span>.active = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-keyword\">this</span>.deps = [];\n","          <span class=\"code-keyword\">this</span>.parent = <span class=\"code-literal\">undefined</span>;\n","          recordEffectScope(<span class=\"code-keyword\">this</span>, scope);\n","      }\n","      run() {\n","          <span class=\"code-keyword\">if</span> (!<span class=\"code-keyword\">this</span>.active) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>.fn();\n","          }\n","          <span class=\"code-keyword\">let</span> parent = activeEffect;\n","          <span class=\"code-keyword\">let</span> lastShouldTrack = shouldTrack;\n","          <span class=\"code-keyword\">while</span> (parent) {\n","              <span class=\"code-keyword\">if</span> (parent === <span class=\"code-keyword\">this</span>) {\n","                  <span class=\"code-keyword\">return</span>;\n","              }\n","              parent = parent.parent;\n","          }\n","          <span class=\"code-keyword\">try</span> {\n","              <span class=\"code-keyword\">this</span>.parent = activeEffect;\n","              activeEffect = <span class=\"code-keyword\">this</span>;\n","              shouldTrack = <span class=\"code-literal\">true</span>;\n","              trackOpBit = <span class=\"code-number\">1</span> &lt;&lt; ++effectTrackDepth;\n","              <span class=\"code-keyword\">if</span> (effectTrackDepth &lt;= maxMarkerBits) {\n","                  initDepMarkers(<span class=\"code-keyword\">this</span>);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  cleanupEffect(<span class=\"code-keyword\">this</span>);\n","              }\n","              <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>.fn();\n","          }\n","          <span class=\"code-keyword\">finally</span> {\n","              <span class=\"code-keyword\">if</span> (effectTrackDepth &lt;= maxMarkerBits) {\n","                  finalizeDepMarkers(<span class=\"code-keyword\">this</span>);\n","              }\n","              trackOpBit = <span class=\"code-number\">1</span> &lt;&lt; --effectTrackDepth;\n","              activeEffect = <span class=\"code-keyword\">this</span>.parent;\n","              shouldTrack = lastShouldTrack;\n","              <span class=\"code-keyword\">this</span>.parent = <span class=\"code-literal\">undefined</span>;\n","              <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">this</span>.deferStop) {\n","                  <span class=\"code-keyword\">this</span>.stop();\n","              }\n","          }\n","      }\n","      stop() {\n","          <span class=\"code-comment\">// stopped while running itself - defer the cleanup</span>\n","          <span class=\"code-keyword\">if</span> (activeEffect === <span class=\"code-keyword\">this</span>) {\n","              <span class=\"code-keyword\">this</span>.deferStop = <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">this</span>.active) {\n","              cleanupEffect(<span class=\"code-keyword\">this</span>);\n","              <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">this</span>.onStop) {\n","                  <span class=\"code-keyword\">this</span>.onStop();\n","              }\n","              <span class=\"code-keyword\">this</span>.active = <span class=\"code-literal\">false</span>;\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">cleanupEffect</span>(<span class=\"code-params\">effect</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { deps } = effect;\n","      <span class=\"code-keyword\">if</span> (deps.length) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; deps.length; i++) {\n","              deps[i].delete(effect);\n","          }\n","          deps.length = <span class=\"code-number\">0</span>;\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">effect</span>(<span class=\"code-params\">fn, options</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (fn.effect) {\n","          fn = fn.effect.fn;\n","      }\n","      <span class=\"code-keyword\">const</span> _effect = <span class=\"code-keyword\">new</span> ReactiveEffect(fn);\n","      <span class=\"code-keyword\">if</span> (options) {\n","          extend(_effect, options);\n","          <span class=\"code-keyword\">if</span> (options.scope)\n","              recordEffectScope(_effect, options.scope);\n","      }\n","      <span class=\"code-keyword\">if</span> (!options || !options.lazy) {\n","          _effect.run();\n","      }\n","      <span class=\"code-keyword\">const</span> runner = _effect.run.bind(_effect);\n","      runner.effect = _effect;\n","      <span class=\"code-keyword\">return</span> runner;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">stop</span>(<span class=\"code-params\">runner</span>) </span>{\n","      runner.effect.stop();\n","  }\n","  <span class=\"code-keyword\">let</span> shouldTrack = <span class=\"code-literal\">true</span>;\n","  <span class=\"code-keyword\">const</span> trackStack = [];\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">pauseTracking</span>(<span class=\"code-params\"></span>) </span>{\n","      trackStack.push(shouldTrack);\n","      shouldTrack = <span class=\"code-literal\">false</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resetTracking</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">const</span> last = trackStack.pop();\n","      shouldTrack = last === <span class=\"code-literal\">undefined</span> ? <span class=\"code-literal\">true</span> : last;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">track</span>(<span class=\"code-params\">target, type, key</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (shouldTrack &amp;&amp; activeEffect) {\n","          <span class=\"code-keyword\">let</span> depsMap = targetMap.get(target);\n","          <span class=\"code-keyword\">if</span> (!depsMap) {\n","              targetMap.set(target, (depsMap = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>()));\n","          }\n","          <span class=\"code-keyword\">let</span> dep = depsMap.get(key);\n","          <span class=\"code-keyword\">if</span> (!dep) {\n","              depsMap.set(key, (dep = createDep()));\n","          }\n","          <span class=\"code-keyword\">const</span> eventInfo = { <span class=\"code-attr\">effect</span>: activeEffect, target, type, key }\n","              ;\n","          trackEffects(dep, eventInfo);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">trackEffects</span>(<span class=\"code-params\">dep, debuggerEventExtraInfo</span>) </span>{\n","      <span class=\"code-keyword\">let</span> shouldTrack = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">if</span> (effectTrackDepth &lt;= maxMarkerBits) {\n","          <span class=\"code-keyword\">if</span> (!newTracked(dep)) {\n","              dep.n |= trackOpBit; <span class=\"code-comment\">// set newly tracked</span>\n","              shouldTrack = !wasTracked(dep);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// Full cleanup mode.</span>\n","          shouldTrack = !dep.has(activeEffect);\n","      }\n","      <span class=\"code-keyword\">if</span> (shouldTrack) {\n","          dep.add(activeEffect);\n","          activeEffect.deps.push(dep);\n","          <span class=\"code-keyword\">if</span> (activeEffect.onTrack) {\n","              activeEffect.onTrack(<span class=\"code-built_in\">Object</span>.assign({ <span class=\"code-attr\">effect</span>: activeEffect }, debuggerEventExtraInfo));\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">trigger</span>(<span class=\"code-params\">target, type, key, newValue, oldValue, oldTarget</span>) </span>{\n","      <span class=\"code-keyword\">const</span> depsMap = targetMap.get(target);\n","      <span class=\"code-keyword\">if</span> (!depsMap) {\n","          <span class=\"code-comment\">// never been tracked</span>\n","          <span class=\"code-keyword\">return</span>;\n","      }\n","      <span class=\"code-keyword\">let</span> deps = [];\n","      <span class=\"code-keyword\">if</span> (type === <span class=\"code-string\">\"clear\"</span> <span class=\"code-comment\">/* TriggerOpTypes.CLEAR */</span>) {\n","          <span class=\"code-comment\">// collection being cleared</span>\n","          <span class=\"code-comment\">// trigger all effects for target</span>\n","          deps = [...depsMap.values()];\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">'length'</span> &amp;&amp; isArray(target)) {\n","          <span class=\"code-keyword\">const</span> newLength = toNumber(newValue);\n","          depsMap.forEach(<span class=\"code-function\">(<span class=\"code-params\">dep, key</span>) =&gt;</span> {\n","              <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">'length'</span> || key &gt;= newLength) {\n","                  deps.push(dep);\n","              }\n","          });\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// schedule runs for SET | ADD | DELETE</span>\n","          <span class=\"code-keyword\">if</span> (key !== <span class=\"code-keyword\">void</span> <span class=\"code-number\">0</span>) {\n","              deps.push(depsMap.get(key));\n","          }\n","          <span class=\"code-comment\">// also run for iteration key on ADD | DELETE | Map.SET</span>\n","          <span class=\"code-keyword\">switch</span> (type) {\n","              <span class=\"code-keyword\">case</span> <span class=\"code-string\">\"add\"</span> <span class=\"code-comment\">/* TriggerOpTypes.ADD */</span>:\n","                  <span class=\"code-keyword\">if</span> (!isArray(target)) {\n","                      deps.push(depsMap.get(ITERATE_KEY));\n","                      <span class=\"code-keyword\">if</span> (isMap(target)) {\n","                          deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));\n","                      }\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isIntegerKey(key)) {\n","                      <span class=\"code-comment\">// new index added to array -&gt; length changes</span>\n","                      deps.push(depsMap.get(<span class=\"code-string\">'length'</span>));\n","                  }\n","                  <span class=\"code-keyword\">break</span>;\n","              <span class=\"code-keyword\">case</span> <span class=\"code-string\">\"delete\"</span> <span class=\"code-comment\">/* TriggerOpTypes.DELETE */</span>:\n","                  <span class=\"code-keyword\">if</span> (!isArray(target)) {\n","                      deps.push(depsMap.get(ITERATE_KEY));\n","                      <span class=\"code-keyword\">if</span> (isMap(target)) {\n","                          deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));\n","                      }\n","                  }\n","                  <span class=\"code-keyword\">break</span>;\n","              <span class=\"code-keyword\">case</span> <span class=\"code-string\">\"set\"</span> <span class=\"code-comment\">/* TriggerOpTypes.SET */</span>:\n","                  <span class=\"code-keyword\">if</span> (isMap(target)) {\n","                      deps.push(depsMap.get(ITERATE_KEY));\n","                  }\n","                  <span class=\"code-keyword\">break</span>;\n","          }\n","      }\n","      <span class=\"code-keyword\">const</span> eventInfo = { target, type, key, newValue, oldValue, oldTarget }\n","          ;\n","      <span class=\"code-keyword\">if</span> (deps.length === <span class=\"code-number\">1</span>) {\n","          <span class=\"code-keyword\">if</span> (deps[<span class=\"code-number\">0</span>]) {\n","              {\n","                  triggerEffects(deps[<span class=\"code-number\">0</span>], eventInfo);\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">const</span> effects = [];\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> dep <span class=\"code-keyword\">of</span> deps) {\n","              <span class=\"code-keyword\">if</span> (dep) {\n","                  effects.push(...dep);\n","              }\n","          }\n","          {\n","              triggerEffects(createDep(effects), eventInfo);\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">triggerEffects</span>(<span class=\"code-params\">dep, debuggerEventExtraInfo</span>) </span>{\n","      <span class=\"code-comment\">// spread into array for stabilization</span>\n","      <span class=\"code-keyword\">const</span> effects = isArray(dep) ? dep : [...dep];\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> effect <span class=\"code-keyword\">of</span> effects) {\n","          <span class=\"code-keyword\">if</span> (effect.computed) {\n","              triggerEffect(effect, debuggerEventExtraInfo);\n","          }\n","      }\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> effect <span class=\"code-keyword\">of</span> effects) {\n","          <span class=\"code-keyword\">if</span> (!effect.computed) {\n","              triggerEffect(effect, debuggerEventExtraInfo);\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">triggerEffect</span>(<span class=\"code-params\">effect, debuggerEventExtraInfo</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (effect !== activeEffect || effect.allowRecurse) {\n","          <span class=\"code-keyword\">if</span> (effect.onTrigger) {\n","              effect.onTrigger(extend({ effect }, debuggerEventExtraInfo));\n","          }\n","          <span class=\"code-keyword\">if</span> (effect.scheduler) {\n","              effect.scheduler();\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              effect.run();\n","          }\n","      }\n","  }\n","\n","  <span class=\"code-keyword\">const</span> isNonTrackableKeys = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(<span class=\"code-string\">`__proto__,__v_isRef,__isVue`</span>);\n","  <span class=\"code-keyword\">const</span> builtInSymbols = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>(\n","  <span class=\"code-comment\">/*#__PURE__*/</span>\n","  <span class=\"code-built_in\">Object</span>.getOwnPropertyNames(<span class=\"code-built_in\">Symbol</span>)\n","      <span class=\"code-comment\">// ios10.x Object.getOwnPropertyNames(Symbol) can enumerate 'arguments' and 'caller'</span>\n","      <span class=\"code-comment\">// but accessing them on Symbol leads to TypeError because Symbol is a strict mode</span>\n","      <span class=\"code-comment\">// function</span>\n","      .filter(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> key !== <span class=\"code-string\">'arguments'</span> &amp;&amp; key !== <span class=\"code-string\">'caller'</span>)\n","      .map(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> <span class=\"code-built_in\">Symbol</span>[key])\n","      .filter(isSymbol));\n","  <span class=\"code-keyword\">const</span> <span class=\"code-keyword\">get</span> = /*#__PURE__*/ createGetter();\n","  const shallowGet = /*#__PURE__*/ createGetter(false, true);\n","  const readonlyGet = /*#__PURE__*/ createGetter(true);\n","  const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);\n","  const arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();\n","  function createArrayInstrumentations() {\n","      <span class=\"code-keyword\">const</span> instrumentations = {};\n","      [<span class=\"code-string\">'includes'</span>, <span class=\"code-string\">'indexOf'</span>, <span class=\"code-string\">'lastIndexOf'</span>].forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> {\n","          instrumentations[key] = <span class=\"code-function\"><span class=\"code-keyword\">function</span> (<span class=\"code-params\">...args</span>) </span>{\n","              <span class=\"code-keyword\">const</span> arr = toRaw(<span class=\"code-keyword\">this</span>);\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>, l = <span class=\"code-keyword\">this</span>.length; i &lt; l; i++) {\n","                  track(arr, <span class=\"code-string\">\"get\"</span> <span class=\"code-comment\">/* TrackOpTypes.GET */</span>, i + <span class=\"code-string\">''</span>);\n","              }\n","              <span class=\"code-comment\">// we run the method using the original args first (which may be reactive)</span>\n","              <span class=\"code-keyword\">const</span> res = arr[key](...args);\n","              <span class=\"code-keyword\">if</span> (res === <span class=\"code-number\">-1</span> || res === <span class=\"code-literal\">false</span>) {\n","                  <span class=\"code-comment\">// if that didn't work, run it again using raw values.</span>\n","                  <span class=\"code-keyword\">return</span> arr[key](...args.map(toRaw));\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  <span class=\"code-keyword\">return</span> res;\n","              }\n","          };\n","      });\n","      [<span class=\"code-string\">'push'</span>, <span class=\"code-string\">'pop'</span>, <span class=\"code-string\">'shift'</span>, <span class=\"code-string\">'unshift'</span>, <span class=\"code-string\">'splice'</span>].forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> {\n","          instrumentations[key] = <span class=\"code-function\"><span class=\"code-keyword\">function</span> (<span class=\"code-params\">...args</span>) </span>{\n","              pauseTracking();\n","              <span class=\"code-keyword\">const</span> res = toRaw(<span class=\"code-keyword\">this</span>)[key].apply(<span class=\"code-keyword\">this</span>, args);\n","              resetTracking();\n","              <span class=\"code-keyword\">return</span> res;\n","          };\n","      });\n","      <span class=\"code-keyword\">return</span> instrumentations;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createGetter</span>(<span class=\"code-params\">isReadonly = false, shallow = false</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">get</span>(<span class=\"code-params\">target, key, receiver</span>) </span>{\n","          <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">\"__v_isReactive\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_REACTIVE */</span>) {\n","              <span class=\"code-keyword\">return</span> !isReadonly;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">\"__v_isReadonly\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_READONLY */</span>) {\n","              <span class=\"code-keyword\">return</span> isReadonly;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">\"__v_isShallow\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_SHALLOW */</span>) {\n","              <span class=\"code-keyword\">return</span> shallow;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span> &amp;&amp;\n","              receiver ===\n","                  (isReadonly\n","                      ? shallow\n","                          ? shallowReadonlyMap\n","                          : readonlyMap\n","                      : shallow\n","                          ? shallowReactiveMap\n","                          : reactiveMap).get(target)) {\n","              <span class=\"code-keyword\">return</span> target;\n","          }\n","          <span class=\"code-keyword\">const</span> targetIsArray = isArray(target);\n","          <span class=\"code-keyword\">if</span> (!isReadonly &amp;&amp; targetIsArray &amp;&amp; hasOwn(arrayInstrumentations, key)) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">Reflect</span>.get(arrayInstrumentations, key, receiver);\n","          }\n","          <span class=\"code-keyword\">const</span> res = <span class=\"code-built_in\">Reflect</span>.get(target, key, receiver);\n","          <span class=\"code-keyword\">if</span> (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\n","              <span class=\"code-keyword\">return</span> res;\n","          }\n","          <span class=\"code-keyword\">if</span> (!isReadonly) {\n","              track(target, <span class=\"code-string\">\"get\"</span> <span class=\"code-comment\">/* TrackOpTypes.GET */</span>, key);\n","          }\n","          <span class=\"code-keyword\">if</span> (shallow) {\n","              <span class=\"code-keyword\">return</span> res;\n","          }\n","          <span class=\"code-keyword\">if</span> (isRef(res)) {\n","              <span class=\"code-comment\">// ref unwrapping - skip unwrap for Array + integer key.</span>\n","              <span class=\"code-keyword\">return</span> targetIsArray &amp;&amp; isIntegerKey(key) ? res : res.value;\n","          }\n","          <span class=\"code-keyword\">if</span> (isObject(res)) {\n","              <span class=\"code-comment\">// Convert returned value into a proxy as well. we do the isObject check</span>\n","              <span class=\"code-comment\">// here to avoid invalid value warning. Also need to lazy access readonly</span>\n","              <span class=\"code-comment\">// and reactive here to avoid circular dependency.</span>\n","              <span class=\"code-keyword\">return</span> isReadonly ? readonly(res) : reactive(res);\n","          }\n","          <span class=\"code-keyword\">return</span> res;\n","      };\n","  }\n","  <span class=\"code-keyword\">const</span> <span class=\"code-keyword\">set</span> = /*#__PURE__*/ createSetter();\n","  const shallowSet = /*#__PURE__*/ createSetter(true);\n","  function createSetter(shallow = false) {\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">set</span>(<span class=\"code-params\">target, key, value, receiver</span>) </span>{\n","          <span class=\"code-keyword\">let</span> oldValue = target[key];\n","          <span class=\"code-keyword\">if</span> (isReadonly(oldValue) &amp;&amp; isRef(oldValue) &amp;&amp; !isRef(value)) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          }\n","          <span class=\"code-keyword\">if</span> (!shallow) {\n","              <span class=\"code-keyword\">if</span> (!isShallow(value) &amp;&amp; !isReadonly(value)) {\n","                  oldValue = toRaw(oldValue);\n","                  value = toRaw(value);\n","              }\n","              <span class=\"code-keyword\">if</span> (!isArray(target) &amp;&amp; isRef(oldValue) &amp;&amp; !isRef(value)) {\n","                  oldValue.value = value;\n","                  <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","              }\n","          }\n","          <span class=\"code-keyword\">const</span> hadKey = isArray(target) &amp;&amp; isIntegerKey(key)\n","              ? <span class=\"code-built_in\">Number</span>(key) &lt; target.length\n","              : hasOwn(target, key);\n","          <span class=\"code-keyword\">const</span> result = <span class=\"code-built_in\">Reflect</span>.set(target, key, value, receiver);\n","          <span class=\"code-comment\">// don't trigger if target is something up in the prototype chain of original</span>\n","          <span class=\"code-keyword\">if</span> (target === toRaw(receiver)) {\n","              <span class=\"code-keyword\">if</span> (!hadKey) {\n","                  trigger(target, <span class=\"code-string\">\"add\"</span> <span class=\"code-comment\">/* TriggerOpTypes.ADD */</span>, key, value);\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (hasChanged(value, oldValue)) {\n","                  trigger(target, <span class=\"code-string\">\"set\"</span> <span class=\"code-comment\">/* TriggerOpTypes.SET */</span>, key, value, oldValue);\n","              }\n","          }\n","          <span class=\"code-keyword\">return</span> result;\n","      };\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">deleteProperty</span>(<span class=\"code-params\">target, key</span>) </span>{\n","      <span class=\"code-keyword\">const</span> hadKey = hasOwn(target, key);\n","      <span class=\"code-keyword\">const</span> oldValue = target[key];\n","      <span class=\"code-keyword\">const</span> result = <span class=\"code-built_in\">Reflect</span>.deleteProperty(target, key);\n","      <span class=\"code-keyword\">if</span> (result &amp;&amp; hadKey) {\n","          trigger(target, <span class=\"code-string\">\"delete\"</span> <span class=\"code-comment\">/* TriggerOpTypes.DELETE */</span>, key, <span class=\"code-literal\">undefined</span>, oldValue);\n","      }\n","      <span class=\"code-keyword\">return</span> result;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">has</span>(<span class=\"code-params\">target, key</span>) </span>{\n","      <span class=\"code-keyword\">const</span> result = <span class=\"code-built_in\">Reflect</span>.has(target, key);\n","      <span class=\"code-keyword\">if</span> (!isSymbol(key) || !builtInSymbols.has(key)) {\n","          track(target, <span class=\"code-string\">\"has\"</span> <span class=\"code-comment\">/* TrackOpTypes.HAS */</span>, key);\n","      }\n","      <span class=\"code-keyword\">return</span> result;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">ownKeys</span>(<span class=\"code-params\">target</span>) </span>{\n","      track(target, <span class=\"code-string\">\"iterate\"</span> <span class=\"code-comment\">/* TrackOpTypes.ITERATE */</span>, isArray(target) ? <span class=\"code-string\">'length'</span> : ITERATE_KEY);\n","      <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">Reflect</span>.ownKeys(target);\n","  }\n","  <span class=\"code-keyword\">const</span> mutableHandlers = {\n","      <span class=\"code-keyword\">get</span>,\n","      <span class=\"code-keyword\">set</span>,\n","      deleteProperty,\n","      has,\n","      ownKeys\n","  };\n","  const readonlyHandlers = {\n","      <span class=\"code-keyword\">get</span>: readonlyGet,\n","      <span class=\"code-keyword\">set</span>(target, key) {\n","          {\n","              warn(<span class=\"code-string\">`Set operation on key \"<span class=\"code-subst\">${<span class=\"code-built_in\">String</span>(key)}</span>\" failed: target is readonly.`</span>, target);\n","          }\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      },\n","      deleteProperty(target, key) {\n","          {\n","              warn(<span class=\"code-string\">`Delete operation on key \"<span class=\"code-subst\">${<span class=\"code-built_in\">String</span>(key)}</span>\" failed: target is readonly.`</span>, target);\n","          }\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      }\n","  };\n","  <span class=\"code-keyword\">const</span> shallowReactiveHandlers = <span class=\"code-comment\">/*#__PURE__*/</span> extend({}, mutableHandlers, {\n","      <span class=\"code-keyword\">get</span>: shallowGet,\n","      <span class=\"code-keyword\">set</span>: shallowSet\n","  });\n","  // Props handlers are special in the sense that it should not unwrap top-level\n","  // refs (in order to allow refs to be explicitly passed down), but should\n","  // retain the reactivity of the normal readonly object.\n","  const shallowReadonlyHandlers = /*#__PURE__*/ extend({}, readonlyHandlers, {\n","      <span class=\"code-keyword\">get</span>: shallowReadonlyGet\n","  });\n","\n","  const toShallow = (value) =&gt; value;\n","  const getProto = (v) =&gt; Reflect.getPrototypeOf(v);\n","  function <span class=\"code-keyword\">get</span>$1(target, key, isReadonly = false, isShallow = false) {\n","      <span class=\"code-comment\">// #1772: readonly(reactive(Map)) should return readonly + reactive version</span>\n","      <span class=\"code-comment\">// of the value</span>\n","      target = target[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>];\n","      <span class=\"code-keyword\">const</span> rawTarget = toRaw(target);\n","      <span class=\"code-keyword\">const</span> rawKey = toRaw(key);\n","      <span class=\"code-keyword\">if</span> (!isReadonly) {\n","          <span class=\"code-keyword\">if</span> (key !== rawKey) {\n","              track(rawTarget, <span class=\"code-string\">\"get\"</span> <span class=\"code-comment\">/* TrackOpTypes.GET */</span>, key);\n","          }\n","          track(rawTarget, <span class=\"code-string\">\"get\"</span> <span class=\"code-comment\">/* TrackOpTypes.GET */</span>, rawKey);\n","      }\n","      <span class=\"code-keyword\">const</span> { has } = getProto(rawTarget);\n","      <span class=\"code-keyword\">const</span> wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n","      <span class=\"code-keyword\">if</span> (has.call(rawTarget, key)) {\n","          <span class=\"code-keyword\">return</span> wrap(target.get(key));\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (has.call(rawTarget, rawKey)) {\n","          <span class=\"code-keyword\">return</span> wrap(target.get(rawKey));\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (target !== rawTarget) {\n","          <span class=\"code-comment\">// #3602 readonly(reactive(Map))</span>\n","          <span class=\"code-comment\">// ensure that the nested reactive `Map` can do tracking for itself</span>\n","          target.get(key);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">has$1</span>(<span class=\"code-params\">key, isReadonly = false</span>) </span>{\n","      <span class=\"code-keyword\">const</span> target = <span class=\"code-keyword\">this</span>[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>];\n","      <span class=\"code-keyword\">const</span> rawTarget = toRaw(target);\n","      <span class=\"code-keyword\">const</span> rawKey = toRaw(key);\n","      <span class=\"code-keyword\">if</span> (!isReadonly) {\n","          <span class=\"code-keyword\">if</span> (key !== rawKey) {\n","              track(rawTarget, <span class=\"code-string\">\"has\"</span> <span class=\"code-comment\">/* TrackOpTypes.HAS */</span>, key);\n","          }\n","          track(rawTarget, <span class=\"code-string\">\"has\"</span> <span class=\"code-comment\">/* TrackOpTypes.HAS */</span>, rawKey);\n","      }\n","      <span class=\"code-keyword\">return</span> key === rawKey\n","          ? target.has(key)\n","          : target.has(key) || target.has(rawKey);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">size</span>(<span class=\"code-params\">target, isReadonly = false</span>) </span>{\n","      target = target[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>];\n","      !isReadonly &amp;&amp; track(toRaw(target), <span class=\"code-string\">\"iterate\"</span> <span class=\"code-comment\">/* TrackOpTypes.ITERATE */</span>, ITERATE_KEY);\n","      <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">Reflect</span>.get(target, <span class=\"code-string\">'size'</span>, target);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">add</span>(<span class=\"code-params\">value</span>) </span>{\n","      value = toRaw(value);\n","      <span class=\"code-keyword\">const</span> target = toRaw(<span class=\"code-keyword\">this</span>);\n","      <span class=\"code-keyword\">const</span> proto = getProto(target);\n","      <span class=\"code-keyword\">const</span> hadKey = proto.has.call(target, value);\n","      <span class=\"code-keyword\">if</span> (!hadKey) {\n","          target.add(value);\n","          trigger(target, <span class=\"code-string\">\"add\"</span> <span class=\"code-comment\">/* TriggerOpTypes.ADD */</span>, value, value);\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">set$1</span>(<span class=\"code-params\">key, value</span>) </span>{\n","      value = toRaw(value);\n","      <span class=\"code-keyword\">const</span> target = toRaw(<span class=\"code-keyword\">this</span>);\n","      <span class=\"code-keyword\">const</span> { has, <span class=\"code-keyword\">get</span> } = getProto(target);\n","      let hadKey = has.call(target, key);\n","      if (!hadKey) {\n","          key = toRaw(key);\n","          hadKey = has.call(target, key);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          checkIdentityKeys(target, has, key);\n","      }\n","      <span class=\"code-keyword\">const</span> oldValue = <span class=\"code-keyword\">get</span>.call(target, key);\n","      target.<span class=\"code-keyword\">set</span>(key, value);\n","      if (!hadKey) {\n","          trigger(target, <span class=\"code-string\">\"add\"</span> <span class=\"code-comment\">/* TriggerOpTypes.ADD */</span>, key, value);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (hasChanged(value, oldValue)) {\n","          trigger(target, <span class=\"code-string\">\"set\"</span> <span class=\"code-comment\">/* TriggerOpTypes.SET */</span>, key, value, oldValue);\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">deleteEntry</span>(<span class=\"code-params\">key</span>) </span>{\n","      <span class=\"code-keyword\">const</span> target = toRaw(<span class=\"code-keyword\">this</span>);\n","      <span class=\"code-keyword\">const</span> { has, <span class=\"code-keyword\">get</span> } = getProto(target);\n","      let hadKey = has.call(target, key);\n","      if (!hadKey) {\n","          key = toRaw(key);\n","          hadKey = has.call(target, key);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          checkIdentityKeys(target, has, key);\n","      }\n","      <span class=\"code-keyword\">const</span> oldValue = <span class=\"code-keyword\">get</span> ? <span class=\"code-keyword\">get</span>.call(target, key) : undefined;\n","      // forward the operation before queueing reactions\n","      const result = target.delete(key);\n","      if (hadKey) {\n","          trigger(target, <span class=\"code-string\">\"delete\"</span> <span class=\"code-comment\">/* TriggerOpTypes.DELETE */</span>, key, <span class=\"code-literal\">undefined</span>, oldValue);\n","      }\n","      <span class=\"code-keyword\">return</span> result;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">clear</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">const</span> target = toRaw(<span class=\"code-keyword\">this</span>);\n","      <span class=\"code-keyword\">const</span> hadItems = target.size !== <span class=\"code-number\">0</span>;\n","      <span class=\"code-keyword\">const</span> oldTarget = isMap(target)\n","              ? <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>(target)\n","              : <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>(target)\n","          ;\n","      <span class=\"code-comment\">// forward the operation before queueing reactions</span>\n","      <span class=\"code-keyword\">const</span> result = target.clear();\n","      <span class=\"code-keyword\">if</span> (hadItems) {\n","          trigger(target, <span class=\"code-string\">\"clear\"</span> <span class=\"code-comment\">/* TriggerOpTypes.CLEAR */</span>, <span class=\"code-literal\">undefined</span>, <span class=\"code-literal\">undefined</span>, oldTarget);\n","      }\n","      <span class=\"code-keyword\">return</span> result;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createForEach</span>(<span class=\"code-params\">isReadonly, isShallow</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">forEach</span>(<span class=\"code-params\">callback, thisArg</span>) </span>{\n","          <span class=\"code-keyword\">const</span> observed = <span class=\"code-keyword\">this</span>;\n","          <span class=\"code-keyword\">const</span> target = observed[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>];\n","          <span class=\"code-keyword\">const</span> rawTarget = toRaw(target);\n","          <span class=\"code-keyword\">const</span> wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n","          !isReadonly &amp;&amp; track(rawTarget, <span class=\"code-string\">\"iterate\"</span> <span class=\"code-comment\">/* TrackOpTypes.ITERATE */</span>, ITERATE_KEY);\n","          <span class=\"code-keyword\">return</span> target.forEach(<span class=\"code-function\">(<span class=\"code-params\">value, key</span>) =&gt;</span> {\n","              <span class=\"code-comment\">// important: make sure the callback is</span>\n","              <span class=\"code-comment\">// 1. invoked with the reactive map as `this` and 3rd arg</span>\n","              <span class=\"code-comment\">// 2. the value received should be a corresponding reactive/readonly.</span>\n","              <span class=\"code-keyword\">return</span> callback.call(thisArg, wrap(value), wrap(key), observed);\n","          });\n","      };\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createIterableMethod</span>(<span class=\"code-params\">method, isReadonly, isShallow</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-keyword\">function</span> (<span class=\"code-params\">...args</span>) </span>{\n","          <span class=\"code-keyword\">const</span> target = <span class=\"code-keyword\">this</span>[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>];\n","          <span class=\"code-keyword\">const</span> rawTarget = toRaw(target);\n","          <span class=\"code-keyword\">const</span> targetIsMap = isMap(rawTarget);\n","          <span class=\"code-keyword\">const</span> isPair = method === <span class=\"code-string\">'entries'</span> || (method === <span class=\"code-built_in\">Symbol</span>.iterator &amp;&amp; targetIsMap);\n","          <span class=\"code-keyword\">const</span> isKeyOnly = method === <span class=\"code-string\">'keys'</span> &amp;&amp; targetIsMap;\n","          <span class=\"code-keyword\">const</span> innerIterator = target[method](...args);\n","          <span class=\"code-keyword\">const</span> wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n","          !isReadonly &amp;&amp;\n","              track(rawTarget, <span class=\"code-string\">\"iterate\"</span> <span class=\"code-comment\">/* TrackOpTypes.ITERATE */</span>, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\n","          <span class=\"code-comment\">// return a wrapped iterator which returns observed versions of the</span>\n","          <span class=\"code-comment\">// values emitted from the real iterator</span>\n","          <span class=\"code-keyword\">return</span> {\n","              <span class=\"code-comment\">// iterator protocol</span>\n","              next() {\n","                  <span class=\"code-keyword\">const</span> { value, done } = innerIterator.next();\n","                  <span class=\"code-keyword\">return</span> done\n","                      ? { value, done }\n","                      : {\n","                          value: isPair ? [wrap(value[<span class=\"code-number\">0</span>]), wrap(value[<span class=\"code-number\">1</span>])] : wrap(value),\n","                          done\n","                      };\n","              },\n","              <span class=\"code-comment\">// iterable protocol</span>\n","              [<span class=\"code-built_in\">Symbol</span>.iterator]() {\n","                  <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>;\n","              }\n","          };\n","      };\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createReadonlyMethod</span>(<span class=\"code-params\">type</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-keyword\">function</span> (<span class=\"code-params\">...args</span>) </span>{\n","          {\n","              <span class=\"code-keyword\">const</span> key = args[<span class=\"code-number\">0</span>] ? <span class=\"code-string\">`on key \"<span class=\"code-subst\">${args[<span class=\"code-number\">0</span>]}</span>\" `</span> : <span class=\"code-string\">``</span>;\n","              <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">`<span class=\"code-subst\">${capitalize(type)}</span> operation <span class=\"code-subst\">${key}</span>failed: target is readonly.`</span>, toRaw(<span class=\"code-keyword\">this</span>));\n","          }\n","          <span class=\"code-keyword\">return</span> type === <span class=\"code-string\">\"delete\"</span> <span class=\"code-comment\">/* TriggerOpTypes.DELETE */</span> ? <span class=\"code-literal\">false</span> : <span class=\"code-keyword\">this</span>;\n","      };\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createInstrumentations</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">const</span> mutableInstrumentations = {\n","          <span class=\"code-keyword\">get</span>(key) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">get</span>$1(this, key);\n","          },\n","          <span class=\"code-keyword\">get</span> size() {\n","              <span class=\"code-keyword\">return</span> size(<span class=\"code-keyword\">this</span>);\n","          },\n","          has: has$<span class=\"code-number\">1</span>,\n","          add,\n","          <span class=\"code-keyword\">set</span>: <span class=\"code-keyword\">set</span>$1,\n","          delete: deleteEntry,\n","          clear,\n","          forEach: createForEach(false, false)\n","      };\n","      const shallowInstrumentations = {\n","          <span class=\"code-keyword\">get</span>(key) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">get</span>$1(this, key, false, true);\n","          },\n","          <span class=\"code-keyword\">get</span> size() {\n","              <span class=\"code-keyword\">return</span> size(<span class=\"code-keyword\">this</span>);\n","          },\n","          has: has$<span class=\"code-number\">1</span>,\n","          add,\n","          <span class=\"code-keyword\">set</span>: <span class=\"code-keyword\">set</span>$1,\n","          delete: deleteEntry,\n","          clear,\n","          forEach: createForEach(false, true)\n","      };\n","      const readonlyInstrumentations = {\n","          <span class=\"code-keyword\">get</span>(key) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">get</span>$1(this, key, true);\n","          },\n","          <span class=\"code-keyword\">get</span> size() {\n","              <span class=\"code-keyword\">return</span> size(<span class=\"code-keyword\">this</span>, <span class=\"code-literal\">true</span>);\n","          },\n","          has(key) {\n","              <span class=\"code-keyword\">return</span> has$<span class=\"code-number\">1.</span>call(<span class=\"code-keyword\">this</span>, key, <span class=\"code-literal\">true</span>);\n","          },\n","          add: createReadonlyMethod(<span class=\"code-string\">\"add\"</span> <span class=\"code-comment\">/* TriggerOpTypes.ADD */</span>),\n","          <span class=\"code-keyword\">set</span>: createReadonlyMethod(\"<span class=\"code-keyword\">set</span>\" /* TriggerOpTypes.SET */),\n","          delete: createReadonlyMethod(\"delete\" /* TriggerOpTypes.DELETE */),\n","          clear: createReadonlyMethod(\"clear\" /* TriggerOpTypes.CLEAR */),\n","          forEach: createForEach(true, false)\n","      };\n","      const shallowReadonlyInstrumentations = {\n","          <span class=\"code-keyword\">get</span>(key) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">get</span>$1(this, key, true, true);\n","          },\n","          <span class=\"code-keyword\">get</span> size() {\n","              <span class=\"code-keyword\">return</span> size(<span class=\"code-keyword\">this</span>, <span class=\"code-literal\">true</span>);\n","          },\n","          has(key) {\n","              <span class=\"code-keyword\">return</span> has$<span class=\"code-number\">1.</span>call(<span class=\"code-keyword\">this</span>, key, <span class=\"code-literal\">true</span>);\n","          },\n","          add: createReadonlyMethod(<span class=\"code-string\">\"add\"</span> <span class=\"code-comment\">/* TriggerOpTypes.ADD */</span>),\n","          <span class=\"code-keyword\">set</span>: createReadonlyMethod(\"<span class=\"code-keyword\">set</span>\" /* TriggerOpTypes.SET */),\n","          delete: createReadonlyMethod(\"delete\" /* TriggerOpTypes.DELETE */),\n","          clear: createReadonlyMethod(\"clear\" /* TriggerOpTypes.CLEAR */),\n","          forEach: createForEach(true, true)\n","      };\n","      const iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];\n","      iteratorMethods.forEach(method =&gt; {\n","          mutableInstrumentations[method] = createIterableMethod(method, <span class=\"code-literal\">false</span>, <span class=\"code-literal\">false</span>);\n","          readonlyInstrumentations[method] = createIterableMethod(method, <span class=\"code-literal\">true</span>, <span class=\"code-literal\">false</span>);\n","          shallowInstrumentations[method] = createIterableMethod(method, <span class=\"code-literal\">false</span>, <span class=\"code-literal\">true</span>);\n","          shallowReadonlyInstrumentations[method] = createIterableMethod(method, <span class=\"code-literal\">true</span>, <span class=\"code-literal\">true</span>);\n","      });\n","      <span class=\"code-keyword\">return</span> [\n","          mutableInstrumentations,\n","          readonlyInstrumentations,\n","          shallowInstrumentations,\n","          shallowReadonlyInstrumentations\n","      ];\n","  }\n","  <span class=\"code-keyword\">const</span> [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = <span class=\"code-comment\">/* #__PURE__*/</span> createInstrumentations();\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createInstrumentationGetter</span>(<span class=\"code-params\">isReadonly, shallow</span>) </span>{\n","      <span class=\"code-keyword\">const</span> instrumentations = shallow\n","          ? isReadonly\n","              ? shallowReadonlyInstrumentations\n","              : shallowInstrumentations\n","          : isReadonly\n","              ? readonlyInstrumentations\n","              : mutableInstrumentations;\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\">(<span class=\"code-params\">target, key, receiver</span>) =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">\"__v_isReactive\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_REACTIVE */</span>) {\n","              <span class=\"code-keyword\">return</span> !isReadonly;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">\"__v_isReadonly\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_READONLY */</span>) {\n","              <span class=\"code-keyword\">return</span> isReadonly;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>) {\n","              <span class=\"code-keyword\">return</span> target;\n","          }\n","          <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">Reflect</span>.get(hasOwn(instrumentations, key) &amp;&amp; key <span class=\"code-keyword\">in</span> target\n","              ? instrumentations\n","              : target, key, receiver);\n","      };\n","  }\n","  <span class=\"code-keyword\">const</span> mutableCollectionHandlers = {\n","      <span class=\"code-keyword\">get</span>: /*#__PURE__*/ createInstrumentationGetter(false, false)\n","  };\n","  const shallowCollectionHandlers = {\n","      <span class=\"code-keyword\">get</span>: /*#__PURE__*/ createInstrumentationGetter(false, true)\n","  };\n","  const readonlyCollectionHandlers = {\n","      <span class=\"code-keyword\">get</span>: /*#__PURE__*/ createInstrumentationGetter(true, false)\n","  };\n","  const shallowReadonlyCollectionHandlers = {\n","      <span class=\"code-keyword\">get</span>: /*#__PURE__*/ createInstrumentationGetter(true, true)\n","  };\n","  function checkIdentityKeys(target, has, key) {\n","      <span class=\"code-keyword\">const</span> rawKey = toRaw(key);\n","      <span class=\"code-keyword\">if</span> (rawKey !== key &amp;&amp; has.call(target, rawKey)) {\n","          <span class=\"code-keyword\">const</span> type = toRawType(target);\n","          <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">`Reactive <span class=\"code-subst\">${type}</span> contains both the raw and reactive `</span> +\n","              <span class=\"code-string\">`versions of the same object<span class=\"code-subst\">${type === <span class=\"code-string\">`Map`</span> ? <span class=\"code-string\">` as keys`</span> : <span class=\"code-string\">``</span>}</span>, `</span> +\n","              <span class=\"code-string\">`which can lead to inconsistencies. `</span> +\n","              <span class=\"code-string\">`Avoid differentiating between the raw and reactive versions `</span> +\n","              <span class=\"code-string\">`of an object and only use the reactive version if possible.`</span>);\n","      }\n","  }\n","\n","  <span class=\"code-keyword\">const</span> reactiveMap = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>();\n","  <span class=\"code-keyword\">const</span> shallowReactiveMap = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>();\n","  <span class=\"code-keyword\">const</span> readonlyMap = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>();\n","  <span class=\"code-keyword\">const</span> shallowReadonlyMap = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>();\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">targetTypeMap</span>(<span class=\"code-params\">rawType</span>) </span>{\n","      <span class=\"code-keyword\">switch</span> (rawType) {\n","          <span class=\"code-keyword\">case</span> <span class=\"code-string\">'Object'</span>:\n","          <span class=\"code-keyword\">case</span> <span class=\"code-string\">'Array'</span>:\n","              <span class=\"code-keyword\">return</span> <span class=\"code-number\">1</span> <span class=\"code-comment\">/* TargetType.COMMON */</span>;\n","          <span class=\"code-keyword\">case</span> <span class=\"code-string\">'Map'</span>:\n","          <span class=\"code-keyword\">case</span> <span class=\"code-string\">'Set'</span>:\n","          <span class=\"code-keyword\">case</span> <span class=\"code-string\">'WeakMap'</span>:\n","          <span class=\"code-keyword\">case</span> <span class=\"code-string\">'WeakSet'</span>:\n","              <span class=\"code-keyword\">return</span> <span class=\"code-number\">2</span> <span class=\"code-comment\">/* TargetType.COLLECTION */</span>;\n","          <span class=\"code-keyword\">default</span>:\n","              <span class=\"code-keyword\">return</span> <span class=\"code-number\">0</span> <span class=\"code-comment\">/* TargetType.INVALID */</span>;\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getTargetType</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">return</span> value[<span class=\"code-string\">\"__v_skip\"</span> <span class=\"code-comment\">/* ReactiveFlags.SKIP */</span>] || !<span class=\"code-built_in\">Object</span>.isExtensible(value)\n","          ? <span class=\"code-number\">0</span> <span class=\"code-comment\">/* TargetType.INVALID */</span>\n","          : targetTypeMap(toRawType(value));\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">reactive</span>(<span class=\"code-params\">target</span>) </span>{\n","      <span class=\"code-comment\">// if trying to observe a readonly proxy, return the readonly version.</span>\n","      <span class=\"code-keyword\">if</span> (isReadonly(target)) {\n","          <span class=\"code-keyword\">return</span> target;\n","      }\n","      <span class=\"code-keyword\">return</span> createReactiveObject(target, <span class=\"code-literal\">false</span>, mutableHandlers, mutableCollectionHandlers, reactiveMap);\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Return a shallowly-reactive copy of the original object, where only the root\n</span>","<span class=\"code-comment\">   * level properties are reactive. It also does not auto-unwrap refs (even at the\n</span>","<span class=\"code-comment\">   * root level).\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">shallowReactive</span>(<span class=\"code-params\">target</span>) </span>{\n","      <span class=\"code-keyword\">return</span> createReactiveObject(target, <span class=\"code-literal\">false</span>, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Creates a readonly copy of the original object. Note the returned copy is not\n</span>","<span class=\"code-comment\">   * made reactive, but `readonly` can be called on an already reactive object.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">readonly</span>(<span class=\"code-params\">target</span>) </span>{\n","      <span class=\"code-keyword\">return</span> createReactiveObject(target, <span class=\"code-literal\">true</span>, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Returns a reactive-copy of the original object, where only the root level\n</span>","<span class=\"code-comment\">   * properties are readonly, and does NOT unwrap refs nor recursively convert\n</span>","<span class=\"code-comment\">   * returned properties.\n</span>","<span class=\"code-comment\">   * This is used for creating the props proxy object for stateful components.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">shallowReadonly</span>(<span class=\"code-params\">target</span>) </span>{\n","      <span class=\"code-keyword\">return</span> createReactiveObject(target, <span class=\"code-literal\">true</span>, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createReactiveObject</span>(<span class=\"code-params\">target, isReadonly, baseHandlers, collectionHandlers, proxyMap</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!isObject(target)) {\n","          {\n","              <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">`value cannot be made reactive: <span class=\"code-subst\">${<span class=\"code-built_in\">String</span>(target)}</span>`</span>);\n","          }\n","          <span class=\"code-keyword\">return</span> target;\n","      }\n","      <span class=\"code-comment\">// target is already a Proxy, return it.</span>\n","      <span class=\"code-comment\">// exception: calling readonly() on a reactive object</span>\n","      <span class=\"code-keyword\">if</span> (target[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>] &amp;&amp;\n","          !(isReadonly &amp;&amp; target[<span class=\"code-string\">\"__v_isReactive\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_REACTIVE */</span>])) {\n","          <span class=\"code-keyword\">return</span> target;\n","      }\n","      <span class=\"code-comment\">// target already has corresponding Proxy</span>\n","      <span class=\"code-keyword\">const</span> existingProxy = proxyMap.get(target);\n","      <span class=\"code-keyword\">if</span> (existingProxy) {\n","          <span class=\"code-keyword\">return</span> existingProxy;\n","      }\n","      <span class=\"code-comment\">// only specific value types can be observed.</span>\n","      <span class=\"code-keyword\">const</span> targetType = getTargetType(target);\n","      <span class=\"code-keyword\">if</span> (targetType === <span class=\"code-number\">0</span> <span class=\"code-comment\">/* TargetType.INVALID */</span>) {\n","          <span class=\"code-keyword\">return</span> target;\n","      }\n","      <span class=\"code-keyword\">const</span> proxy = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Proxy</span>(target, targetType === <span class=\"code-number\">2</span> <span class=\"code-comment\">/* TargetType.COLLECTION */</span> ? collectionHandlers : baseHandlers);\n","      proxyMap.set(target, proxy);\n","      <span class=\"code-keyword\">return</span> proxy;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isReactive</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isReadonly(value)) {\n","          <span class=\"code-keyword\">return</span> isReactive(value[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>]);\n","      }\n","      <span class=\"code-keyword\">return</span> !!(value &amp;&amp; value[<span class=\"code-string\">\"__v_isReactive\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_REACTIVE */</span>]);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isReadonly</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">return</span> !!(value &amp;&amp; value[<span class=\"code-string\">\"__v_isReadonly\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_READONLY */</span>]);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isShallow</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">return</span> !!(value &amp;&amp; value[<span class=\"code-string\">\"__v_isShallow\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_SHALLOW */</span>]);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isProxy</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">return</span> isReactive(value) || isReadonly(value);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">toRaw</span>(<span class=\"code-params\">observed</span>) </span>{\n","      <span class=\"code-keyword\">const</span> raw = observed &amp;&amp; observed[<span class=\"code-string\">\"__v_raw\"</span> <span class=\"code-comment\">/* ReactiveFlags.RAW */</span>];\n","      <span class=\"code-keyword\">return</span> raw ? toRaw(raw) : observed;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">markRaw</span>(<span class=\"code-params\">value</span>) </span>{\n","      def(value, <span class=\"code-string\">\"__v_skip\"</span> <span class=\"code-comment\">/* ReactiveFlags.SKIP */</span>, <span class=\"code-literal\">true</span>);\n","      <span class=\"code-keyword\">return</span> value;\n","  }\n","  <span class=\"code-keyword\">const</span> toReactive = <span class=\"code-function\">(<span class=\"code-params\">value</span>) =&gt;</span> isObject(value) ? reactive(value) : value;\n","  <span class=\"code-keyword\">const</span> toReadonly = <span class=\"code-function\">(<span class=\"code-params\">value</span>) =&gt;</span> isObject(value) ? readonly(value) : value;\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">trackRefValue</span>(<span class=\"code-params\">ref</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (shouldTrack &amp;&amp; activeEffect) {\n","          ref = toRaw(ref);\n","          {\n","              trackEffects(ref.dep || (ref.dep = createDep()), {\n","                  target: ref,\n","                  type: <span class=\"code-string\">\"get\"</span> <span class=\"code-comment\">/* TrackOpTypes.GET */</span>,\n","                  key: <span class=\"code-string\">'value'</span>\n","              });\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">triggerRefValue</span>(<span class=\"code-params\">ref, newVal</span>) </span>{\n","      ref = toRaw(ref);\n","      <span class=\"code-keyword\">if</span> (ref.dep) {\n","          {\n","              triggerEffects(ref.dep, {\n","                  target: ref,\n","                  type: <span class=\"code-string\">\"set\"</span> <span class=\"code-comment\">/* TriggerOpTypes.SET */</span>,\n","                  key: <span class=\"code-string\">'value'</span>,\n","                  newValue: newVal\n","              });\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isRef</span>(<span class=\"code-params\">r</span>) </span>{\n","      <span class=\"code-keyword\">return</span> !!(r &amp;&amp; r.__v_isRef === <span class=\"code-literal\">true</span>);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">ref</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">return</span> createRef(value, <span class=\"code-literal\">false</span>);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">shallowRef</span>(<span class=\"code-params\">value</span>) </span>{\n","      <span class=\"code-keyword\">return</span> createRef(value, <span class=\"code-literal\">true</span>);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createRef</span>(<span class=\"code-params\">rawValue, shallow</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isRef(rawValue)) {\n","          <span class=\"code-keyword\">return</span> rawValue;\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">new</span> RefImpl(rawValue, shallow);\n","  }\n","  <span class=\"code-class\"><span class=\"code-keyword\">class</span> <span class=\"code-title\">RefImpl</span> </span>{\n","      <span class=\"code-keyword\">constructor</span>(value, __v_isShallow) {\n","          <span class=\"code-keyword\">this</span>.__v_isShallow = __v_isShallow;\n","          <span class=\"code-keyword\">this</span>.dep = <span class=\"code-literal\">undefined</span>;\n","          <span class=\"code-keyword\">this</span>.__v_isRef = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-keyword\">this</span>._rawValue = __v_isShallow ? value : toRaw(value);\n","          <span class=\"code-keyword\">this</span>._value = __v_isShallow ? value : toReactive(value);\n","      }\n","      <span class=\"code-keyword\">get</span> value() {\n","          trackRefValue(<span class=\"code-keyword\">this</span>);\n","          <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>._value;\n","      }\n","      <span class=\"code-keyword\">set</span> value(newVal) {\n","          <span class=\"code-keyword\">const</span> useDirectValue = <span class=\"code-keyword\">this</span>.__v_isShallow || isShallow(newVal) || isReadonly(newVal);\n","          newVal = useDirectValue ? newVal : toRaw(newVal);\n","          <span class=\"code-keyword\">if</span> (hasChanged(newVal, <span class=\"code-keyword\">this</span>._rawValue)) {\n","              <span class=\"code-keyword\">this</span>._rawValue = newVal;\n","              <span class=\"code-keyword\">this</span>._value = useDirectValue ? newVal : toReactive(newVal);\n","              triggerRefValue(<span class=\"code-keyword\">this</span>, newVal);\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">triggerRef</span>(<span class=\"code-params\">ref</span>) </span>{\n","      triggerRefValue(ref, ref.value );\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">unref</span>(<span class=\"code-params\">ref</span>) </span>{\n","      <span class=\"code-keyword\">return</span> isRef(ref) ? ref.value : ref;\n","  }\n","  <span class=\"code-keyword\">const</span> shallowUnwrapHandlers = {\n","      <span class=\"code-keyword\">get</span>: (target, key, receiver) =&gt; unref(Reflect.<span class=\"code-keyword\">get</span>(target, key, receiver)),\n","      <span class=\"code-keyword\">set</span>: (target, key, value, receiver) =&gt; {\n","          <span class=\"code-keyword\">const</span> oldValue = target[key];\n","          <span class=\"code-keyword\">if</span> (isRef(oldValue) &amp;&amp; !isRef(value)) {\n","              oldValue.value = value;\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">Reflect</span>.set(target, key, value, receiver);\n","          }\n","      }\n","  };\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">proxyRefs</span>(<span class=\"code-params\">objectWithRefs</span>) </span>{\n","      <span class=\"code-keyword\">return</span> isReactive(objectWithRefs)\n","          ? objectWithRefs\n","          : <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Proxy</span>(objectWithRefs, shallowUnwrapHandlers);\n","  }\n","  <span class=\"code-class\"><span class=\"code-keyword\">class</span> <span class=\"code-title\">CustomRefImpl</span> </span>{\n","      <span class=\"code-keyword\">constructor</span>(factory) {\n","          <span class=\"code-keyword\">this</span>.dep = <span class=\"code-literal\">undefined</span>;\n","          <span class=\"code-keyword\">this</span>.__v_isRef = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-keyword\">const</span> { <span class=\"code-keyword\">get</span>, <span class=\"code-keyword\">set</span> } = factory(() =&gt; trackRefValue(this), () =&gt; triggerRefValue(this));\n","          this._get = <span class=\"code-keyword\">get</span>;\n","          this._set = <span class=\"code-keyword\">set</span>;\n","      }\n","      <span class=\"code-keyword\">get</span> value() {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>._get();\n","      }\n","      <span class=\"code-keyword\">set</span> value(newVal) {\n","          <span class=\"code-keyword\">this</span>._set(newVal);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">customRef</span>(<span class=\"code-params\">factory</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">new</span> CustomRefImpl(factory);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">toRefs</span>(<span class=\"code-params\">object</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!isProxy(object)) {\n","          <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">`toRefs() expects a reactive object but received a plain one.`</span>);\n","      }\n","      <span class=\"code-keyword\">const</span> ret = isArray(object) ? <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Array</span>(object.length) : {};\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> object) {\n","          ret[key] = toRef(object, key);\n","      }\n","      <span class=\"code-keyword\">return</span> ret;\n","  }\n","  <span class=\"code-class\"><span class=\"code-keyword\">class</span> <span class=\"code-title\">ObjectRefImpl</span> </span>{\n","      <span class=\"code-keyword\">constructor</span>(_object, _key, _defaultValue) {\n","          <span class=\"code-keyword\">this</span>._object = _object;\n","          <span class=\"code-keyword\">this</span>._key = _key;\n","          <span class=\"code-keyword\">this</span>._defaultValue = _defaultValue;\n","          <span class=\"code-keyword\">this</span>.__v_isRef = <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-keyword\">get</span> value() {\n","          <span class=\"code-keyword\">const</span> val = <span class=\"code-keyword\">this</span>._object[<span class=\"code-keyword\">this</span>._key];\n","          <span class=\"code-keyword\">return</span> val === <span class=\"code-literal\">undefined</span> ? <span class=\"code-keyword\">this</span>._defaultValue : val;\n","      }\n","      <span class=\"code-keyword\">set</span> value(newVal) {\n","          <span class=\"code-keyword\">this</span>._object[<span class=\"code-keyword\">this</span>._key] = newVal;\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">toRef</span>(<span class=\"code-params\">object, key, defaultValue</span>) </span>{\n","      <span class=\"code-keyword\">const</span> val = object[key];\n","      <span class=\"code-keyword\">return</span> isRef(val)\n","          ? val\n","          : <span class=\"code-keyword\">new</span> ObjectRefImpl(object, key, defaultValue);\n","  }\n","\n","  <span class=\"code-keyword\">var</span> _a;\n","  <span class=\"code-class\"><span class=\"code-keyword\">class</span> <span class=\"code-title\">ComputedRefImpl</span> </span>{\n","      <span class=\"code-keyword\">constructor</span>(getter, _setter, isReadonly, isSSR) {\n","          <span class=\"code-keyword\">this</span>._setter = _setter;\n","          <span class=\"code-keyword\">this</span>.dep = <span class=\"code-literal\">undefined</span>;\n","          <span class=\"code-keyword\">this</span>.__v_isRef = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-keyword\">this</span>[_a] = <span class=\"code-literal\">false</span>;\n","          <span class=\"code-keyword\">this</span>._dirty = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-keyword\">this</span>.effect = <span class=\"code-keyword\">new</span> ReactiveEffect(getter, () =&gt; {\n","              <span class=\"code-keyword\">if</span> (!<span class=\"code-keyword\">this</span>._dirty) {\n","                  <span class=\"code-keyword\">this</span>._dirty = <span class=\"code-literal\">true</span>;\n","                  triggerRefValue(<span class=\"code-keyword\">this</span>);\n","              }\n","          });\n","          <span class=\"code-keyword\">this</span>.effect.computed = <span class=\"code-keyword\">this</span>;\n","          <span class=\"code-keyword\">this</span>.effect.active = <span class=\"code-keyword\">this</span>._cacheable = !isSSR;\n","          <span class=\"code-keyword\">this</span>[<span class=\"code-string\">\"__v_isReadonly\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_READONLY */</span>] = isReadonly;\n","      }\n","      <span class=\"code-keyword\">get</span> value() {\n","          <span class=\"code-comment\">// the computed ref may get wrapped by other proxies e.g. readonly() #3376</span>\n","          <span class=\"code-keyword\">const</span> self = toRaw(<span class=\"code-keyword\">this</span>);\n","          trackRefValue(self);\n","          <span class=\"code-keyword\">if</span> (self._dirty || !self._cacheable) {\n","              self._dirty = <span class=\"code-literal\">false</span>;\n","              self._value = self.effect.run();\n","          }\n","          <span class=\"code-keyword\">return</span> self._value;\n","      }\n","      <span class=\"code-keyword\">set</span> value(newValue) {\n","          <span class=\"code-keyword\">this</span>._setter(newValue);\n","      }\n","  }\n","  _a = <span class=\"code-string\">\"__v_isReadonly\"</span> <span class=\"code-comment\">/* ReactiveFlags.IS_READONLY */</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">computed</span>(<span class=\"code-params\">getterOrOptions, debugOptions, isSSR = false</span>) </span>{\n","      <span class=\"code-keyword\">let</span> getter;\n","      <span class=\"code-keyword\">let</span> setter;\n","      <span class=\"code-keyword\">const</span> onlyGetter = isFunction(getterOrOptions);\n","      <span class=\"code-keyword\">if</span> (onlyGetter) {\n","          getter = getterOrOptions;\n","          setter = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                  <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">'Write operation failed: computed value is readonly'</span>);\n","              }\n","              ;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          getter = getterOrOptions.get;\n","          setter = getterOrOptions.set;\n","      }\n","      <span class=\"code-keyword\">const</span> cRef = <span class=\"code-keyword\">new</span> ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);\n","      <span class=\"code-keyword\">if</span> (debugOptions &amp;&amp; !isSSR) {\n","          cRef.effect.onTrack = debugOptions.onTrack;\n","          cRef.effect.onTrigger = debugOptions.onTrigger;\n","      }\n","      <span class=\"code-keyword\">return</span> cRef;\n","  }\n","\n","  <span class=\"code-keyword\">const</span> stack = [];\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">pushWarningContext</span>(<span class=\"code-params\">vnode</span>) </span>{\n","      stack.push(vnode);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">popWarningContext</span>(<span class=\"code-params\"></span>) </span>{\n","      stack.pop();\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">warn$1</span>(<span class=\"code-params\">msg, ...args</span>) </span>{\n","      <span class=\"code-comment\">// avoid props formatting or warn handler tracking deps that might be mutated</span>\n","      <span class=\"code-comment\">// during patch, leading to infinite recursion.</span>\n","      pauseTracking();\n","      <span class=\"code-keyword\">const</span> instance = stack.length ? stack[stack.length - <span class=\"code-number\">1</span>].component : <span class=\"code-literal\">null</span>;\n","      <span class=\"code-keyword\">const</span> appWarnHandler = instance &amp;&amp; instance.appContext.config.warnHandler;\n","      <span class=\"code-keyword\">const</span> trace = getComponentTrace();\n","      <span class=\"code-keyword\">if</span> (appWarnHandler) {\n","          callWithErrorHandling(appWarnHandler, instance, <span class=\"code-number\">11</span> <span class=\"code-comment\">/* ErrorCodes.APP_WARN_HANDLER */</span>, [\n","              msg + args.join(<span class=\"code-string\">''</span>),\n","              instance &amp;&amp; instance.proxy,\n","              trace\n","                  .map(<span class=\"code-function\">(<span class=\"code-params\">{ vnode }</span>) =&gt;</span> <span class=\"code-string\">`at &lt;<span class=\"code-subst\">${formatComponentName(instance, vnode.type)}</span>&gt;`</span>)\n","                  .join(<span class=\"code-string\">'\\n'</span>),\n","              trace\n","          ]);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">const</span> warnArgs = [<span class=\"code-string\">`[Vue warn]: <span class=\"code-subst\">${msg}</span>`</span>, ...args];\n","          <span class=\"code-comment\">/* istanbul ignore if */</span>\n","          <span class=\"code-keyword\">if</span> (trace.length &amp;&amp;\n","              <span class=\"code-comment\">// avoid spamming console during tests</span>\n","              !<span class=\"code-literal\">false</span>) {\n","              warnArgs.push(<span class=\"code-string\">`\\n`</span>, ...formatTrace(trace));\n","          }\n","          <span class=\"code-built_in\">console</span>.warn(...warnArgs);\n","      }\n","      resetTracking();\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getComponentTrace</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">let</span> currentVNode = stack[stack.length - <span class=\"code-number\">1</span>];\n","      <span class=\"code-keyword\">if</span> (!currentVNode) {\n","          <span class=\"code-keyword\">return</span> [];\n","      }\n","      <span class=\"code-comment\">// we can't just use the stack because it will be incomplete during updates</span>\n","      <span class=\"code-comment\">// that did not start from the root. Re-construct the parent chain using</span>\n","      <span class=\"code-comment\">// instance parent pointers.</span>\n","      <span class=\"code-keyword\">const</span> normalizedStack = [];\n","      <span class=\"code-keyword\">while</span> (currentVNode) {\n","          <span class=\"code-keyword\">const</span> last = normalizedStack[<span class=\"code-number\">0</span>];\n","          <span class=\"code-keyword\">if</span> (last &amp;&amp; last.vnode === currentVNode) {\n","              last.recurseCount++;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              normalizedStack.push({\n","                  vnode: currentVNode,\n","                  recurseCount: <span class=\"code-number\">0</span>\n","              });\n","          }\n","          <span class=\"code-keyword\">const</span> parentInstance = currentVNode.component &amp;&amp; currentVNode.component.parent;\n","          currentVNode = parentInstance &amp;&amp; parentInstance.vnode;\n","      }\n","      <span class=\"code-keyword\">return</span> normalizedStack;\n","  }\n","  <span class=\"code-comment\">/* istanbul ignore next */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">formatTrace</span>(<span class=\"code-params\">trace</span>) </span>{\n","      <span class=\"code-keyword\">const</span> logs = [];\n","      trace.forEach(<span class=\"code-function\">(<span class=\"code-params\">entry, i</span>) =&gt;</span> {\n","          logs.push(...(i === <span class=\"code-number\">0</span> ? [] : [<span class=\"code-string\">`\\n`</span>]), ...formatTraceEntry(entry));\n","      });\n","      <span class=\"code-keyword\">return</span> logs;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">formatTraceEntry</span>(<span class=\"code-params\">{ vnode, recurseCount }</span>) </span>{\n","      <span class=\"code-keyword\">const</span> postfix = recurseCount &gt; <span class=\"code-number\">0</span> ? <span class=\"code-string\">`... (<span class=\"code-subst\">${recurseCount}</span> recursive calls)`</span> : <span class=\"code-string\">``</span>;\n","      <span class=\"code-keyword\">const</span> isRoot = vnode.component ? vnode.component.parent == <span class=\"code-literal\">null</span> : <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">const</span> open = <span class=\"code-string\">` at &lt;<span class=\"code-subst\">${formatComponentName(vnode.component, vnode.type, isRoot)}</span>`</span>;\n","      <span class=\"code-keyword\">const</span> close = <span class=\"code-string\">`&gt;`</span> + postfix;\n","      <span class=\"code-keyword\">return</span> vnode.props\n","          ? [open, ...formatProps(vnode.props), close]\n","          : [open + close];\n","  }\n","  <span class=\"code-comment\">/* istanbul ignore next */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">formatProps</span>(<span class=\"code-params\">props</span>) </span>{\n","      <span class=\"code-keyword\">const</span> res = [];\n","      <span class=\"code-keyword\">const</span> keys = <span class=\"code-built_in\">Object</span>.keys(props);\n","      keys.slice(<span class=\"code-number\">0</span>, <span class=\"code-number\">3</span>).forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> {\n","          res.push(...formatProp(key, props[key]));\n","      });\n","      <span class=\"code-keyword\">if</span> (keys.length &gt; <span class=\"code-number\">3</span>) {\n","          res.push(<span class=\"code-string\">` ...`</span>);\n","      }\n","      <span class=\"code-keyword\">return</span> res;\n","  }\n","  <span class=\"code-comment\">/* istanbul ignore next */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">formatProp</span>(<span class=\"code-params\">key, value, raw</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isString(value)) {\n","          value = <span class=\"code-built_in\">JSON</span>.stringify(value);\n","          <span class=\"code-keyword\">return</span> raw ? value : [<span class=\"code-string\">`<span class=\"code-subst\">${key}</span>=<span class=\"code-subst\">${value}</span>`</span>];\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">typeof</span> value === <span class=\"code-string\">'number'</span> ||\n","          <span class=\"code-keyword\">typeof</span> value === <span class=\"code-string\">'boolean'</span> ||\n","          value == <span class=\"code-literal\">null</span>) {\n","          <span class=\"code-keyword\">return</span> raw ? value : [<span class=\"code-string\">`<span class=\"code-subst\">${key}</span>=<span class=\"code-subst\">${value}</span>`</span>];\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isRef(value)) {\n","          value = formatProp(key, toRaw(value.value), <span class=\"code-literal\">true</span>);\n","          <span class=\"code-keyword\">return</span> raw ? value : [<span class=\"code-string\">`<span class=\"code-subst\">${key}</span>=Ref&lt;`</span>, value, <span class=\"code-string\">`&gt;`</span>];\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isFunction(value)) {\n","          <span class=\"code-keyword\">return</span> [<span class=\"code-string\">`<span class=\"code-subst\">${key}</span>=fn<span class=\"code-subst\">${value.name ? <span class=\"code-string\">`&lt;<span class=\"code-subst\">${value.name}</span>&gt;`</span> : <span class=\"code-string\">``</span>}</span>`</span>];\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          value = toRaw(value);\n","          <span class=\"code-keyword\">return</span> raw ? value : [<span class=\"code-string\">`<span class=\"code-subst\">${key}</span>=`</span>, value];\n","      }\n","  }\n","\n","  <span class=\"code-keyword\">const</span> ErrorTypeStrings = {\n","      [<span class=\"code-string\">\"sp\"</span> <span class=\"code-comment\">/* LifecycleHooks.SERVER_PREFETCH */</span>]: <span class=\"code-string\">'serverPrefetch hook'</span>,\n","      [<span class=\"code-string\">\"bc\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_CREATE */</span>]: <span class=\"code-string\">'beforeCreate hook'</span>,\n","      [<span class=\"code-string\">\"c\"</span> <span class=\"code-comment\">/* LifecycleHooks.CREATED */</span>]: <span class=\"code-string\">'created hook'</span>,\n","      [<span class=\"code-string\">\"bm\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_MOUNT */</span>]: <span class=\"code-string\">'beforeMount hook'</span>,\n","      [<span class=\"code-string\">\"m\"</span> <span class=\"code-comment\">/* LifecycleHooks.MOUNTED */</span>]: <span class=\"code-string\">'mounted hook'</span>,\n","      [<span class=\"code-string\">\"bu\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_UPDATE */</span>]: <span class=\"code-string\">'beforeUpdate hook'</span>,\n","      [<span class=\"code-string\">\"u\"</span> <span class=\"code-comment\">/* LifecycleHooks.UPDATED */</span>]: <span class=\"code-string\">'updated'</span>,\n","      [<span class=\"code-string\">\"bum\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_UNMOUNT */</span>]: <span class=\"code-string\">'beforeUnmount hook'</span>,\n","      [<span class=\"code-string\">\"um\"</span> <span class=\"code-comment\">/* LifecycleHooks.UNMOUNTED */</span>]: <span class=\"code-string\">'unmounted hook'</span>,\n","      [<span class=\"code-string\">\"a\"</span> <span class=\"code-comment\">/* LifecycleHooks.ACTIVATED */</span>]: <span class=\"code-string\">'activated hook'</span>,\n","      [<span class=\"code-string\">\"da\"</span> <span class=\"code-comment\">/* LifecycleHooks.DEACTIVATED */</span>]: <span class=\"code-string\">'deactivated hook'</span>,\n","      [<span class=\"code-string\">\"ec\"</span> <span class=\"code-comment\">/* LifecycleHooks.ERROR_CAPTURED */</span>]: <span class=\"code-string\">'errorCaptured hook'</span>,\n","      [<span class=\"code-string\">\"rtc\"</span> <span class=\"code-comment\">/* LifecycleHooks.RENDER_TRACKED */</span>]: <span class=\"code-string\">'renderTracked hook'</span>,\n","      [<span class=\"code-string\">\"rtg\"</span> <span class=\"code-comment\">/* LifecycleHooks.RENDER_TRIGGERED */</span>]: <span class=\"code-string\">'renderTriggered hook'</span>,\n","      [<span class=\"code-number\">0</span> <span class=\"code-comment\">/* ErrorCodes.SETUP_FUNCTION */</span>]: <span class=\"code-string\">'setup function'</span>,\n","      [<span class=\"code-number\">1</span> <span class=\"code-comment\">/* ErrorCodes.RENDER_FUNCTION */</span>]: <span class=\"code-string\">'render function'</span>,\n","      [<span class=\"code-number\">2</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_GETTER */</span>]: <span class=\"code-string\">'watcher getter'</span>,\n","      [<span class=\"code-number\">3</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_CALLBACK */</span>]: <span class=\"code-string\">'watcher callback'</span>,\n","      [<span class=\"code-number\">4</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_CLEANUP */</span>]: <span class=\"code-string\">'watcher cleanup function'</span>,\n","      [<span class=\"code-number\">5</span> <span class=\"code-comment\">/* ErrorCodes.NATIVE_EVENT_HANDLER */</span>]: <span class=\"code-string\">'native event handler'</span>,\n","      [<span class=\"code-number\">6</span> <span class=\"code-comment\">/* ErrorCodes.COMPONENT_EVENT_HANDLER */</span>]: <span class=\"code-string\">'component event handler'</span>,\n","      [<span class=\"code-number\">7</span> <span class=\"code-comment\">/* ErrorCodes.VNODE_HOOK */</span>]: <span class=\"code-string\">'vnode hook'</span>,\n","      [<span class=\"code-number\">8</span> <span class=\"code-comment\">/* ErrorCodes.DIRECTIVE_HOOK */</span>]: <span class=\"code-string\">'directive hook'</span>,\n","      [<span class=\"code-number\">9</span> <span class=\"code-comment\">/* ErrorCodes.TRANSITION_HOOK */</span>]: <span class=\"code-string\">'transition hook'</span>,\n","      [<span class=\"code-number\">10</span> <span class=\"code-comment\">/* ErrorCodes.APP_ERROR_HANDLER */</span>]: <span class=\"code-string\">'app errorHandler'</span>,\n","      [<span class=\"code-number\">11</span> <span class=\"code-comment\">/* ErrorCodes.APP_WARN_HANDLER */</span>]: <span class=\"code-string\">'app warnHandler'</span>,\n","      [<span class=\"code-number\">12</span> <span class=\"code-comment\">/* ErrorCodes.FUNCTION_REF */</span>]: <span class=\"code-string\">'ref function'</span>,\n","      [<span class=\"code-number\">13</span> <span class=\"code-comment\">/* ErrorCodes.ASYNC_COMPONENT_LOADER */</span>]: <span class=\"code-string\">'async component loader'</span>,\n","      [<span class=\"code-number\">14</span> <span class=\"code-comment\">/* ErrorCodes.SCHEDULER */</span>]: <span class=\"code-string\">'scheduler flush. This is likely a Vue internals bug. '</span> +\n","          <span class=\"code-string\">'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core'</span>\n","  };\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">callWithErrorHandling</span>(<span class=\"code-params\">fn, instance, type, args</span>) </span>{\n","      <span class=\"code-keyword\">let</span> res;\n","      <span class=\"code-keyword\">try</span> {\n","          res = args ? fn(...args) : fn();\n","      }\n","      <span class=\"code-keyword\">catch</span> (err) {\n","          handleError(err, instance, type);\n","      }\n","      <span class=\"code-keyword\">return</span> res;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">callWithAsyncErrorHandling</span>(<span class=\"code-params\">fn, instance, type, args</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isFunction(fn)) {\n","          <span class=\"code-keyword\">const</span> res = callWithErrorHandling(fn, instance, type, args);\n","          <span class=\"code-keyword\">if</span> (res &amp;&amp; isPromise(res)) {\n","              res.catch(<span class=\"code-function\"><span class=\"code-params\">err</span> =&gt;</span> {\n","                  handleError(err, instance, type);\n","              });\n","          }\n","          <span class=\"code-keyword\">return</span> res;\n","      }\n","      <span class=\"code-keyword\">const</span> values = [];\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; fn.length; i++) {\n","          values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\n","      }\n","      <span class=\"code-keyword\">return</span> values;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">handleError</span>(<span class=\"code-params\">err, instance, type, throwInDev = true</span>) </span>{\n","      <span class=\"code-keyword\">const</span> contextVNode = instance ? instance.vnode : <span class=\"code-literal\">null</span>;\n","      <span class=\"code-keyword\">if</span> (instance) {\n","          <span class=\"code-keyword\">let</span> cur = instance.parent;\n","          <span class=\"code-comment\">// the exposed instance is the render proxy to keep it consistent with 2.x</span>\n","          <span class=\"code-keyword\">const</span> exposedInstance = instance.proxy;\n","          <span class=\"code-comment\">// in production the hook receives only the error code</span>\n","          <span class=\"code-keyword\">const</span> errorInfo = ErrorTypeStrings[type] ;\n","          <span class=\"code-keyword\">while</span> (cur) {\n","              <span class=\"code-keyword\">const</span> errorCapturedHooks = cur.ec;\n","              <span class=\"code-keyword\">if</span> (errorCapturedHooks) {\n","                  <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; errorCapturedHooks.length; i++) {\n","                      <span class=\"code-keyword\">if</span> (errorCapturedHooks[i](err, exposedInstance, errorInfo) === <span class=\"code-literal\">false</span>) {\n","                          <span class=\"code-keyword\">return</span>;\n","                      }\n","                  }\n","              }\n","              cur = cur.parent;\n","          }\n","          <span class=\"code-comment\">// app-level handling</span>\n","          <span class=\"code-keyword\">const</span> appErrorHandler = instance.appContext.config.errorHandler;\n","          <span class=\"code-keyword\">if</span> (appErrorHandler) {\n","              callWithErrorHandling(appErrorHandler, <span class=\"code-literal\">null</span>, <span class=\"code-number\">10</span> <span class=\"code-comment\">/* ErrorCodes.APP_ERROR_HANDLER */</span>, [err, exposedInstance, errorInfo]);\n","              <span class=\"code-keyword\">return</span>;\n","          }\n","      }\n","      logError(err, type, contextVNode, throwInDev);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">logError</span>(<span class=\"code-params\">err, type, contextVNode, throwInDev = true</span>) </span>{\n","      {\n","          <span class=\"code-keyword\">const</span> info = ErrorTypeStrings[type];\n","          <span class=\"code-keyword\">if</span> (contextVNode) {\n","              pushWarningContext(contextVNode);\n","          }\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Unhandled error<span class=\"code-subst\">${info ? <span class=\"code-string\">` during execution of <span class=\"code-subst\">${info}</span>`</span> : <span class=\"code-string\">``</span>}</span>`</span>);\n","          <span class=\"code-keyword\">if</span> (contextVNode) {\n","              popWarningContext();\n","          }\n","          <span class=\"code-comment\">// crash in dev by default so it's more noticeable</span>\n","          <span class=\"code-keyword\">if</span> (throwInDev) {\n","              <span class=\"code-keyword\">throw</span> err;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-built_in\">console</span>.error(err);\n","          }\n","      }\n","  }\n","\n","  <span class=\"code-keyword\">let</span> isFlushing = <span class=\"code-literal\">false</span>;\n","  <span class=\"code-keyword\">let</span> isFlushPending = <span class=\"code-literal\">false</span>;\n","  <span class=\"code-keyword\">const</span> queue = [];\n","  <span class=\"code-keyword\">let</span> flushIndex = <span class=\"code-number\">0</span>;\n","  <span class=\"code-keyword\">const</span> pendingPostFlushCbs = [];\n","  <span class=\"code-keyword\">let</span> activePostFlushCbs = <span class=\"code-literal\">null</span>;\n","  <span class=\"code-keyword\">let</span> postFlushIndex = <span class=\"code-number\">0</span>;\n","  <span class=\"code-keyword\">const</span> resolvedPromise = <span class=\"code-comment\">/*#__PURE__*/</span> <span class=\"code-built_in\">Promise</span>.resolve();\n","  <span class=\"code-keyword\">let</span> currentFlushPromise = <span class=\"code-literal\">null</span>;\n","  <span class=\"code-keyword\">const</span> RECURSION_LIMIT = <span class=\"code-number\">100</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">nextTick</span>(<span class=\"code-params\">fn</span>) </span>{\n","      <span class=\"code-keyword\">const</span> p = currentFlushPromise || resolvedPromise;\n","      <span class=\"code-keyword\">return</span> fn ? p.then(<span class=\"code-keyword\">this</span> ? fn.bind(<span class=\"code-keyword\">this</span>) : fn) : p;\n","  }\n","  <span class=\"code-comment\">// #2768</span>\n","  <span class=\"code-comment\">// Use binary-search to find a suitable position in the queue,</span>\n","  <span class=\"code-comment\">// so that the queue maintains the increasing order of job's id,</span>\n","  <span class=\"code-comment\">// which can prevent the job from being skipped and also can avoid repeated patching.</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">findInsertionIndex</span>(<span class=\"code-params\">id</span>) </span>{\n","      <span class=\"code-comment\">// the start index should be `flushIndex + 1`</span>\n","      <span class=\"code-keyword\">let</span> start = flushIndex + <span class=\"code-number\">1</span>;\n","      <span class=\"code-keyword\">let</span> end = queue.length;\n","      <span class=\"code-keyword\">while</span> (start &lt; end) {\n","          <span class=\"code-keyword\">const</span> middle = (start + end) &gt;&gt;&gt; <span class=\"code-number\">1</span>;\n","          <span class=\"code-keyword\">const</span> middleJobId = getId(queue[middle]);\n","          middleJobId &lt; id ? (start = middle + <span class=\"code-number\">1</span>) : (end = middle);\n","      }\n","      <span class=\"code-keyword\">return</span> start;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">queueJob</span>(<span class=\"code-params\">job</span>) </span>{\n","      <span class=\"code-comment\">// the dedupe search uses the startIndex argument of Array.includes()</span>\n","      <span class=\"code-comment\">// by default the search index includes the current job that is being run</span>\n","      <span class=\"code-comment\">// so it cannot recursively trigger itself again.</span>\n","      <span class=\"code-comment\">// if the job is a watch() callback, the search will start with a +1 index to</span>\n","      <span class=\"code-comment\">// allow it recursively trigger itself - it is the user's responsibility to</span>\n","      <span class=\"code-comment\">// ensure it doesn't end up in an infinite loop.</span>\n","      <span class=\"code-keyword\">if</span> (!queue.length ||\n","          !queue.includes(job, isFlushing &amp;&amp; job.allowRecurse ? flushIndex + <span class=\"code-number\">1</span> : flushIndex)) {\n","          <span class=\"code-keyword\">if</span> (job.id == <span class=\"code-literal\">null</span>) {\n","              queue.push(job);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              queue.splice(findInsertionIndex(job.id), <span class=\"code-number\">0</span>, job);\n","          }\n","          queueFlush();\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">queueFlush</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!isFlushing &amp;&amp; !isFlushPending) {\n","          isFlushPending = <span class=\"code-literal\">true</span>;\n","          currentFlushPromise = resolvedPromise.then(flushJobs);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">invalidateJob</span>(<span class=\"code-params\">job</span>) </span>{\n","      <span class=\"code-keyword\">const</span> i = queue.indexOf(job);\n","      <span class=\"code-keyword\">if</span> (i &gt; flushIndex) {\n","          queue.splice(i, <span class=\"code-number\">1</span>);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">queuePostFlushCb</span>(<span class=\"code-params\">cb</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!isArray(cb)) {\n","          <span class=\"code-keyword\">if</span> (!activePostFlushCbs ||\n","              !activePostFlushCbs.includes(cb, cb.allowRecurse ? postFlushIndex + <span class=\"code-number\">1</span> : postFlushIndex)) {\n","              pendingPostFlushCbs.push(cb);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// if cb is an array, it is a component lifecycle hook which can only be</span>\n","          <span class=\"code-comment\">// triggered by a job, which is already deduped in the main queue, so</span>\n","          <span class=\"code-comment\">// we can skip duplicate check here to improve perf</span>\n","          pendingPostFlushCbs.push(...cb);\n","      }\n","      queueFlush();\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">flushPreFlushCbs</span>(<span class=\"code-params\">seen, \n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  <span class=\"code-regexp\">//</span> if currently flushing, skip the current job itself\n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  i = isFlushing ? flushIndex + <span class=\"code-number\">1</span> : <span class=\"code-number\">0</span></span>) </span>{\n","      {\n","          seen = seen || <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>();\n","      }\n","      <span class=\"code-keyword\">for</span> (; i &lt; queue.length; i++) {\n","          <span class=\"code-keyword\">const</span> cb = queue[i];\n","          <span class=\"code-keyword\">if</span> (cb &amp;&amp; cb.pre) {\n","              <span class=\"code-keyword\">if</span> (checkRecursiveUpdates(seen, cb)) {\n","                  <span class=\"code-keyword\">continue</span>;\n","              }\n","              queue.splice(i, <span class=\"code-number\">1</span>);\n","              i--;\n","              cb();\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">flushPostFlushCbs</span>(<span class=\"code-params\">seen</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (pendingPostFlushCbs.length) {\n","          <span class=\"code-keyword\">const</span> deduped = [...new <span class=\"code-built_in\">Set</span>(pendingPostFlushCbs)];\n","          pendingPostFlushCbs.length = <span class=\"code-number\">0</span>;\n","          <span class=\"code-comment\">// #1947 already has active queue, nested flushPostFlushCbs call</span>\n","          <span class=\"code-keyword\">if</span> (activePostFlushCbs) {\n","              activePostFlushCbs.push(...deduped);\n","              <span class=\"code-keyword\">return</span>;\n","          }\n","          activePostFlushCbs = deduped;\n","          {\n","              seen = seen || <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>();\n","          }\n","          activePostFlushCbs.sort(<span class=\"code-function\">(<span class=\"code-params\">a, b</span>) =&gt;</span> getId(a) - getId(b));\n","          <span class=\"code-keyword\">for</span> (postFlushIndex = <span class=\"code-number\">0</span>; postFlushIndex &lt; activePostFlushCbs.length; postFlushIndex++) {\n","              <span class=\"code-keyword\">if</span> (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {\n","                  <span class=\"code-keyword\">continue</span>;\n","              }\n","              activePostFlushCbs[postFlushIndex]();\n","          }\n","          activePostFlushCbs = <span class=\"code-literal\">null</span>;\n","          postFlushIndex = <span class=\"code-number\">0</span>;\n","      }\n","  }\n","  <span class=\"code-keyword\">const</span> getId = <span class=\"code-function\">(<span class=\"code-params\">job</span>) =&gt;</span> job.id == <span class=\"code-literal\">null</span> ? <span class=\"code-literal\">Infinity</span> : job.id;\n","  <span class=\"code-keyword\">const</span> comparator = <span class=\"code-function\">(<span class=\"code-params\">a, b</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> diff = getId(a) - getId(b);\n","      <span class=\"code-keyword\">if</span> (diff === <span class=\"code-number\">0</span>) {\n","          <span class=\"code-keyword\">if</span> (a.pre &amp;&amp; !b.pre)\n","              <span class=\"code-keyword\">return</span> <span class=\"code-number\">-1</span>;\n","          <span class=\"code-keyword\">if</span> (b.pre &amp;&amp; !a.pre)\n","              <span class=\"code-keyword\">return</span> <span class=\"code-number\">1</span>;\n","      }\n","      <span class=\"code-keyword\">return</span> diff;\n","  };\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">flushJobs</span>(<span class=\"code-params\">seen</span>) </span>{\n","      isFlushPending = <span class=\"code-literal\">false</span>;\n","      isFlushing = <span class=\"code-literal\">true</span>;\n","      {\n","          seen = seen || <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>();\n","      }\n","      <span class=\"code-comment\">// Sort queue before flush.</span>\n","      <span class=\"code-comment\">// This ensures that:</span>\n","      <span class=\"code-comment\">// 1. Components are updated from parent to child. (because parent is always</span>\n","      <span class=\"code-comment\">//    created before the child so its render effect will have smaller</span>\n","      <span class=\"code-comment\">//    priority number)</span>\n","      <span class=\"code-comment\">// 2. If a component is unmounted during a parent component's update,</span>\n","      <span class=\"code-comment\">//    its update can be skipped.</span>\n","      queue.sort(comparator);\n","      <span class=\"code-comment\">// conditional usage of checkRecursiveUpdate must be determined out of</span>\n","      <span class=\"code-comment\">// try ... catch block since Rollup by default de-optimizes treeshaking</span>\n","      <span class=\"code-comment\">// inside try-catch. This can leave all warning code unshaked. Although</span>\n","      <span class=\"code-comment\">// they would get eventually shaken by a minifier like terser, some minifiers</span>\n","      <span class=\"code-comment\">// would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)</span>\n","      <span class=\"code-keyword\">const</span> check = <span class=\"code-function\">(<span class=\"code-params\">job</span>) =&gt;</span> checkRecursiveUpdates(seen, job)\n","          ;\n","      <span class=\"code-keyword\">try</span> {\n","          <span class=\"code-keyword\">for</span> (flushIndex = <span class=\"code-number\">0</span>; flushIndex &lt; queue.length; flushIndex++) {\n","              <span class=\"code-keyword\">const</span> job = queue[flushIndex];\n","              <span class=\"code-keyword\">if</span> (job &amp;&amp; job.active !== <span class=\"code-literal\">false</span>) {\n","                  <span class=\"code-keyword\">if</span> (<span class=\"code-literal\">true</span> &amp;&amp; check(job)) {\n","                      <span class=\"code-keyword\">continue</span>;\n","                  }\n","                  <span class=\"code-comment\">// console.log(`running:`, job.id)</span>\n","                  callWithErrorHandling(job, <span class=\"code-literal\">null</span>, <span class=\"code-number\">14</span> <span class=\"code-comment\">/* ErrorCodes.SCHEDULER */</span>);\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">finally</span> {\n","          flushIndex = <span class=\"code-number\">0</span>;\n","          queue.length = <span class=\"code-number\">0</span>;\n","          flushPostFlushCbs(seen);\n","          isFlushing = <span class=\"code-literal\">false</span>;\n","          currentFlushPromise = <span class=\"code-literal\">null</span>;\n","          <span class=\"code-comment\">// some postFlushCb queued jobs!</span>\n","          <span class=\"code-comment\">// keep flushing until it drains.</span>\n","          <span class=\"code-keyword\">if</span> (queue.length || pendingPostFlushCbs.length) {\n","              flushJobs(seen);\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">checkRecursiveUpdates</span>(<span class=\"code-params\">seen, fn</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!seen.has(fn)) {\n","          seen.set(fn, <span class=\"code-number\">1</span>);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">const</span> count = seen.get(fn);\n","          <span class=\"code-keyword\">if</span> (count &gt; RECURSION_LIMIT) {\n","              <span class=\"code-keyword\">const</span> instance = fn.ownerInstance;\n","              <span class=\"code-keyword\">const</span> componentName = instance &amp;&amp; getComponentName(instance.type);\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Maximum recursive updates exceeded<span class=\"code-subst\">${componentName ? <span class=\"code-string\">` in component &lt;<span class=\"code-subst\">${componentName}</span>&gt;`</span> : <span class=\"code-string\">``</span>}</span>. `</span> +\n","                  <span class=\"code-string\">`This means you have a reactive effect that is mutating its own `</span> +\n","                  <span class=\"code-string\">`dependencies and thus recursively triggering itself. Possible sources `</span> +\n","                  <span class=\"code-string\">`include component template, render function, updated hook or `</span> +\n","                  <span class=\"code-string\">`watcher source function.`</span>);\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              seen.set(fn, count + <span class=\"code-number\">1</span>);\n","          }\n","      }\n","  }\n","\n","  <span class=\"code-comment\">/* eslint-disable no-restricted-globals */</span>\n","  <span class=\"code-keyword\">let</span> isHmrUpdating = <span class=\"code-literal\">false</span>;\n","  <span class=\"code-keyword\">const</span> hmrDirtyComponents = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>();\n","  <span class=\"code-comment\">// Expose the HMR runtime on the global object</span>\n","  <span class=\"code-comment\">// This makes it entirely tree-shakable without polluting the exports and makes</span>\n","  <span class=\"code-comment\">// it easier to be used in toolings like vue-loader</span>\n","  <span class=\"code-comment\">// Note: for a component to be eligible for HMR it also needs the __hmrId option</span>\n","  <span class=\"code-comment\">// to be set so that its instances can be registered / removed.</span>\n","  {\n","      getGlobalThis().__VUE_HMR_RUNTIME__ = {\n","          createRecord: tryWrap(createRecord),\n","          rerender: tryWrap(rerender),\n","          reload: tryWrap(reload)\n","      };\n","  }\n","  <span class=\"code-keyword\">const</span> map = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>();\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">registerHMR</span>(<span class=\"code-params\">instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> id = instance.type.__hmrId;\n","      <span class=\"code-keyword\">let</span> record = map.get(id);\n","      <span class=\"code-keyword\">if</span> (!record) {\n","          createRecord(id, instance.type);\n","          record = map.get(id);\n","      }\n","      record.instances.add(instance);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">unregisterHMR</span>(<span class=\"code-params\">instance</span>) </span>{\n","      map.get(instance.type.__hmrId).instances.delete(instance);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createRecord</span>(<span class=\"code-params\">id, initialDef</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (map.has(id)) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","      }\n","      map.set(id, {\n","          initialDef: normalizeClassComponent(initialDef),\n","          instances: <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>()\n","      });\n","      <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeClassComponent</span>(<span class=\"code-params\">component</span>) </span>{\n","      <span class=\"code-keyword\">return</span> isClassComponent(component) ? component.__vccOpts : component;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">rerender</span>(<span class=\"code-params\">id, newRender</span>) </span>{\n","      <span class=\"code-keyword\">const</span> record = map.get(id);\n","      <span class=\"code-keyword\">if</span> (!record) {\n","          <span class=\"code-keyword\">return</span>;\n","      }\n","      <span class=\"code-comment\">// update initial record (for not-yet-rendered component)</span>\n","      record.initialDef.render = newRender;\n","      [...record.instances].forEach(<span class=\"code-function\"><span class=\"code-params\">instance</span> =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (newRender) {\n","              instance.render = newRender;\n","              normalizeClassComponent(instance.type).render = newRender;\n","          }\n","          instance.renderCache = [];\n","          <span class=\"code-comment\">// this flag forces child components with slot content to update</span>\n","          isHmrUpdating = <span class=\"code-literal\">true</span>;\n","          instance.update();\n","          isHmrUpdating = <span class=\"code-literal\">false</span>;\n","      });\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">reload</span>(<span class=\"code-params\">id, newComp</span>) </span>{\n","      <span class=\"code-keyword\">const</span> record = map.get(id);\n","      <span class=\"code-keyword\">if</span> (!record)\n","          <span class=\"code-keyword\">return</span>;\n","      newComp = normalizeClassComponent(newComp);\n","      <span class=\"code-comment\">// update initial def (for not-yet-rendered components)</span>\n","      updateComponentDef(record.initialDef, newComp);\n","      <span class=\"code-comment\">// create a snapshot which avoids the set being mutated during updates</span>\n","      <span class=\"code-keyword\">const</span> instances = [...record.instances];\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> instance <span class=\"code-keyword\">of</span> instances) {\n","          <span class=\"code-keyword\">const</span> oldComp = normalizeClassComponent(instance.type);\n","          <span class=\"code-keyword\">if</span> (!hmrDirtyComponents.has(oldComp)) {\n","              <span class=\"code-comment\">// 1. Update existing comp definition to match new one</span>\n","              <span class=\"code-keyword\">if</span> (oldComp !== record.initialDef) {\n","                  updateComponentDef(oldComp, newComp);\n","              }\n","              <span class=\"code-comment\">// 2. mark definition dirty. This forces the renderer to replace the</span>\n","              <span class=\"code-comment\">// component on patch.</span>\n","              hmrDirtyComponents.add(oldComp);\n","          }\n","          <span class=\"code-comment\">// 3. invalidate options resolution cache</span>\n","          instance.appContext.optionsCache.delete(instance.type);\n","          <span class=\"code-comment\">// 4. actually update</span>\n","          <span class=\"code-keyword\">if</span> (instance.ceReload) {\n","              <span class=\"code-comment\">// custom element</span>\n","              hmrDirtyComponents.add(oldComp);\n","              instance.ceReload(newComp.styles);\n","              hmrDirtyComponents.delete(oldComp);\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (instance.parent) {\n","              <span class=\"code-comment\">// 4. Force the parent instance to re-render. This will cause all updated</span>\n","              <span class=\"code-comment\">// components to be unmounted and re-mounted. Queue the update so that we</span>\n","              <span class=\"code-comment\">// don't end up forcing the same parent to re-render multiple times.</span>\n","              queueJob(instance.parent.update);\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (instance.appContext.reload) {\n","              <span class=\"code-comment\">// root instance mounted via createApp() has a reload method</span>\n","              instance.appContext.reload();\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">typeof</span> <span class=\"code-built_in\">window</span> !== <span class=\"code-string\">'undefined'</span>) {\n","              <span class=\"code-comment\">// root instance inside tree created via raw render(). Force reload.</span>\n","              <span class=\"code-built_in\">window</span>.location.reload();\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">'[HMR] Root or manually mounted instance modified. Full reload required.'</span>);\n","          }\n","      }\n","      <span class=\"code-comment\">// 5. make sure to cleanup dirty hmr components after update</span>\n","      queuePostFlushCb(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> instance <span class=\"code-keyword\">of</span> instances) {\n","              hmrDirtyComponents.delete(normalizeClassComponent(instance.type));\n","          }\n","      });\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">updateComponentDef</span>(<span class=\"code-params\">oldComp, newComp</span>) </span>{\n","      extend(oldComp, newComp);\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> oldComp) {\n","          <span class=\"code-keyword\">if</span> (key !== <span class=\"code-string\">'__file'</span> &amp;&amp; !(key <span class=\"code-keyword\">in</span> newComp)) {\n","              <span class=\"code-keyword\">delete</span> oldComp[key];\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">tryWrap</span>(<span class=\"code-params\">fn</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\">(<span class=\"code-params\">id, arg</span>) =&gt;</span> {\n","          <span class=\"code-keyword\">try</span> {\n","              <span class=\"code-keyword\">return</span> fn(id, arg);\n","          }\n","          <span class=\"code-keyword\">catch</span> (e) {\n","              <span class=\"code-built_in\">console</span>.error(e);\n","              <span class=\"code-built_in\">console</span>.warn(<span class=\"code-string\">`[HMR] Something went wrong during Vue component hot-reload. `</span> +\n","                  <span class=\"code-string\">`Full reload required.`</span>);\n","          }\n","      };\n","  }\n","\n","  <span class=\"code-keyword\">let</span> buffer = [];\n","  <span class=\"code-keyword\">let</span> devtoolsNotInstalled = <span class=\"code-literal\">false</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">emit</span>(<span class=\"code-params\">event, ...args</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (exports.devtools) {\n","          exports.devtools.emit(event, ...args);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (!devtoolsNotInstalled) {\n","          buffer.push({ event, args });\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">setDevtoolsHook</span>(<span class=\"code-params\">hook, target</span>) </span>{\n","      <span class=\"code-keyword\">var</span> _a, _b;\n","      exports.devtools = hook;\n","      <span class=\"code-keyword\">if</span> (exports.devtools) {\n","          exports.devtools.enabled = <span class=\"code-literal\">true</span>;\n","          buffer.forEach(<span class=\"code-function\">(<span class=\"code-params\">{ event, args }</span>) =&gt;</span> exports.devtools.emit(event, ...args));\n","          buffer = [];\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (\n","      <span class=\"code-comment\">// handle late devtools injection - only do this if we are in an actual</span>\n","      <span class=\"code-comment\">// browser environment to avoid the timer handle stalling test runner exit</span>\n","      <span class=\"code-comment\">// (#4815)</span>\n","      <span class=\"code-keyword\">typeof</span> <span class=\"code-built_in\">window</span> !== <span class=\"code-string\">'undefined'</span> &amp;&amp;\n","          <span class=\"code-comment\">// some envs mock window but not fully</span>\n","          <span class=\"code-built_in\">window</span>.HTMLElement &amp;&amp;\n","          <span class=\"code-comment\">// also exclude jsdom</span>\n","          !((_b = (_a = <span class=\"code-built_in\">window</span>.navigator) === <span class=\"code-literal\">null</span> || _a === <span class=\"code-keyword\">void</span> <span class=\"code-number\">0</span> ? <span class=\"code-keyword\">void</span> <span class=\"code-number\">0</span> : _a.userAgent) === <span class=\"code-literal\">null</span> || _b === <span class=\"code-keyword\">void</span> <span class=\"code-number\">0</span> ? <span class=\"code-keyword\">void</span> <span class=\"code-number\">0</span> : _b.includes(<span class=\"code-string\">'jsdom'</span>))) {\n","          <span class=\"code-keyword\">const</span> replay = (target.__VUE_DEVTOOLS_HOOK_REPLAY__ =\n","              target.__VUE_DEVTOOLS_HOOK_REPLAY__ || []);\n","          replay.push(<span class=\"code-function\">(<span class=\"code-params\">newHook</span>) =&gt;</span> {\n","              setDevtoolsHook(newHook, target);\n","          });\n","          <span class=\"code-comment\">// clear buffer after 3s - the user probably doesn't have devtools installed</span>\n","          <span class=\"code-comment\">// at all, and keeping the buffer will cause memory leaks (#4738)</span>\n","          setTimeout(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","              <span class=\"code-keyword\">if</span> (!exports.devtools) {\n","                  target.__VUE_DEVTOOLS_HOOK_REPLAY__ = <span class=\"code-literal\">null</span>;\n","                  devtoolsNotInstalled = <span class=\"code-literal\">true</span>;\n","                  buffer = [];\n","              }\n","          }, <span class=\"code-number\">3000</span>);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// non-browser env, assume not installed</span>\n","          devtoolsNotInstalled = <span class=\"code-literal\">true</span>;\n","          buffer = [];\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">devtoolsInitApp</span>(<span class=\"code-params\">app, version</span>) </span>{\n","      emit(<span class=\"code-string\">\"app:init\"</span> <span class=\"code-comment\">/* DevtoolsHooks.APP_INIT */</span>, app, version, {\n","          Fragment,\n","          Text,\n","          Comment,\n","          Static\n","      });\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">devtoolsUnmountApp</span>(<span class=\"code-params\">app</span>) </span>{\n","      emit(<span class=\"code-string\">\"app:unmount\"</span> <span class=\"code-comment\">/* DevtoolsHooks.APP_UNMOUNT */</span>, app);\n","  }\n","  <span class=\"code-keyword\">const</span> devtoolsComponentAdded = <span class=\"code-comment\">/*#__PURE__*/</span> createDevtoolsComponentHook(<span class=\"code-string\">\"component:added\"</span> <span class=\"code-comment\">/* DevtoolsHooks.COMPONENT_ADDED */</span>);\n","  <span class=\"code-keyword\">const</span> devtoolsComponentUpdated = \n","  <span class=\"code-comment\">/*#__PURE__*/</span> createDevtoolsComponentHook(<span class=\"code-string\">\"component:updated\"</span> <span class=\"code-comment\">/* DevtoolsHooks.COMPONENT_UPDATED */</span>);\n","  <span class=\"code-keyword\">const</span> _devtoolsComponentRemoved = <span class=\"code-comment\">/*#__PURE__*/</span> createDevtoolsComponentHook(<span class=\"code-string\">\"component:removed\"</span> <span class=\"code-comment\">/* DevtoolsHooks.COMPONENT_REMOVED */</span>);\n","  <span class=\"code-keyword\">const</span> devtoolsComponentRemoved = <span class=\"code-function\">(<span class=\"code-params\">component</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">if</span> (exports.devtools &amp;&amp;\n","          <span class=\"code-keyword\">typeof</span> exports.devtools.cleanupBuffer === <span class=\"code-string\">'function'</span> &amp;&amp;\n","          <span class=\"code-comment\">// remove the component if it wasn't buffered</span>\n","          !exports.devtools.cleanupBuffer(component)) {\n","          _devtoolsComponentRemoved(component);\n","      }\n","  };\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createDevtoolsComponentHook</span>(<span class=\"code-params\">hook</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\">(<span class=\"code-params\">component</span>) =&gt;</span> {\n","          emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : <span class=\"code-literal\">undefined</span>, component);\n","      };\n","  }\n","  <span class=\"code-keyword\">const</span> devtoolsPerfStart = <span class=\"code-comment\">/*#__PURE__*/</span> createDevtoolsPerformanceHook(<span class=\"code-string\">\"perf:start\"</span> <span class=\"code-comment\">/* DevtoolsHooks.PERFORMANCE_START */</span>);\n","  <span class=\"code-keyword\">const</span> devtoolsPerfEnd = <span class=\"code-comment\">/*#__PURE__*/</span> createDevtoolsPerformanceHook(<span class=\"code-string\">\"perf:end\"</span> <span class=\"code-comment\">/* DevtoolsHooks.PERFORMANCE_END */</span>);\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createDevtoolsPerformanceHook</span>(<span class=\"code-params\">hook</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\">(<span class=\"code-params\">component, type, time</span>) =&gt;</span> {\n","          emit(hook, component.appContext.app, component.uid, component, type, time);\n","      };\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">devtoolsComponentEmit</span>(<span class=\"code-params\">component, event, params</span>) </span>{\n","      emit(<span class=\"code-string\">\"component:emit\"</span> <span class=\"code-comment\">/* DevtoolsHooks.COMPONENT_EMIT */</span>, component.appContext.app, component, event, params);\n","  }\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">emit$1</span>(<span class=\"code-params\">instance, event, ...rawArgs</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (instance.isUnmounted)\n","          <span class=\"code-keyword\">return</span>;\n","      <span class=\"code-keyword\">const</span> props = instance.vnode.props || EMPTY_OBJ;\n","      {\n","          <span class=\"code-keyword\">const</span> { emitsOptions, <span class=\"code-attr\">propsOptions</span>: [propsOptions] } = instance;\n","          <span class=\"code-keyword\">if</span> (emitsOptions) {\n","              <span class=\"code-keyword\">if</span> (!(event <span class=\"code-keyword\">in</span> emitsOptions) &amp;&amp;\n","                  !(<span class=\"code-literal\">false</span> )) {\n","                  <span class=\"code-keyword\">if</span> (!propsOptions || !(toHandlerKey(event) <span class=\"code-keyword\">in</span> propsOptions)) {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Component emitted event \"<span class=\"code-subst\">${event}</span>\" but it is neither declared in `</span> +\n","                          <span class=\"code-string\">`the emits option nor as an \"<span class=\"code-subst\">${toHandlerKey(event)}</span>\" prop.`</span>);\n","                  }\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  <span class=\"code-keyword\">const</span> validator = emitsOptions[event];\n","                  <span class=\"code-keyword\">if</span> (isFunction(validator)) {\n","                      <span class=\"code-keyword\">const</span> isValid = validator(...rawArgs);\n","                      <span class=\"code-keyword\">if</span> (!isValid) {\n","                          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Invalid event arguments: event validation failed for event \"<span class=\"code-subst\">${event}</span>\".`</span>);\n","                      }\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">let</span> args = rawArgs;\n","      <span class=\"code-keyword\">const</span> isModelListener = event.startsWith(<span class=\"code-string\">'update:'</span>);\n","      <span class=\"code-comment\">// for v-model update:xxx events, apply modifiers on args</span>\n","      <span class=\"code-keyword\">const</span> modelArg = isModelListener &amp;&amp; event.slice(<span class=\"code-number\">7</span>);\n","      <span class=\"code-keyword\">if</span> (modelArg &amp;&amp; modelArg <span class=\"code-keyword\">in</span> props) {\n","          <span class=\"code-keyword\">const</span> modifiersKey = <span class=\"code-string\">`<span class=\"code-subst\">${modelArg === <span class=\"code-string\">'modelValue'</span> ? <span class=\"code-string\">'model'</span> : modelArg}</span>Modifiers`</span>;\n","          <span class=\"code-keyword\">const</span> { number, trim } = props[modifiersKey] || EMPTY_OBJ;\n","          <span class=\"code-keyword\">if</span> (trim) {\n","              args = rawArgs.map(<span class=\"code-function\"><span class=\"code-params\">a</span> =&gt;</span> (isString(a) ? a.trim() : a));\n","          }\n","          <span class=\"code-keyword\">if</span> (number) {\n","              args = rawArgs.map(toNumber);\n","          }\n","      }\n","      {\n","          devtoolsComponentEmit(instance, event, args);\n","      }\n","      {\n","          <span class=\"code-keyword\">const</span> lowerCaseEvent = event.toLowerCase();\n","          <span class=\"code-keyword\">if</span> (lowerCaseEvent !== event &amp;&amp; props[toHandlerKey(lowerCaseEvent)]) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Event \"<span class=\"code-subst\">${lowerCaseEvent}</span>\" is emitted in component `</span> +\n","                  <span class=\"code-string\">`<span class=\"code-subst\">${formatComponentName(instance, instance.type)}</span> but the handler is registered for \"<span class=\"code-subst\">${event}</span>\". `</span> +\n","                  <span class=\"code-string\">`Note that HTML attributes are case-insensitive and you cannot use `</span> +\n","                  <span class=\"code-string\">`v-on to listen to camelCase events when using in-DOM templates. `</span> +\n","                  <span class=\"code-string\">`You should probably use \"<span class=\"code-subst\">${hyphenate(event)}</span>\" instead of \"<span class=\"code-subst\">${event}</span>\".`</span>);\n","          }\n","      }\n","      <span class=\"code-keyword\">let</span> handlerName;\n","      <span class=\"code-keyword\">let</span> handler = props[(handlerName = toHandlerKey(event))] ||\n","          <span class=\"code-comment\">// also try camelCase event handler (#2249)</span>\n","          props[(handlerName = toHandlerKey(camelize(event)))];\n","      <span class=\"code-comment\">// for v-model update:xxx events, also trigger kebab-case equivalent</span>\n","      <span class=\"code-comment\">// for props passed via kebab-case</span>\n","      <span class=\"code-keyword\">if</span> (!handler &amp;&amp; isModelListener) {\n","          handler = props[(handlerName = toHandlerKey(hyphenate(event)))];\n","      }\n","      <span class=\"code-keyword\">if</span> (handler) {\n","          callWithAsyncErrorHandling(handler, instance, <span class=\"code-number\">6</span> <span class=\"code-comment\">/* ErrorCodes.COMPONENT_EVENT_HANDLER */</span>, args);\n","      }\n","      <span class=\"code-keyword\">const</span> onceHandler = props[handlerName + <span class=\"code-string\">`Once`</span>];\n","      <span class=\"code-keyword\">if</span> (onceHandler) {\n","          <span class=\"code-keyword\">if</span> (!instance.emitted) {\n","              instance.emitted = {};\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (instance.emitted[handlerName]) {\n","              <span class=\"code-keyword\">return</span>;\n","          }\n","          instance.emitted[handlerName] = <span class=\"code-literal\">true</span>;\n","          callWithAsyncErrorHandling(onceHandler, instance, <span class=\"code-number\">6</span> <span class=\"code-comment\">/* ErrorCodes.COMPONENT_EVENT_HANDLER */</span>, args);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeEmitsOptions</span>(<span class=\"code-params\">comp, appContext, asMixin = false</span>) </span>{\n","      <span class=\"code-keyword\">const</span> cache = appContext.emitsCache;\n","      <span class=\"code-keyword\">const</span> cached = cache.get(comp);\n","      <span class=\"code-keyword\">if</span> (cached !== <span class=\"code-literal\">undefined</span>) {\n","          <span class=\"code-keyword\">return</span> cached;\n","      }\n","      <span class=\"code-keyword\">const</span> raw = comp.emits;\n","      <span class=\"code-keyword\">let</span> normalized = {};\n","      <span class=\"code-comment\">// apply mixin/extends props</span>\n","      <span class=\"code-keyword\">let</span> hasExtends = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">if</span> (!isFunction(comp)) {\n","          <span class=\"code-keyword\">const</span> extendEmits = <span class=\"code-function\">(<span class=\"code-params\">raw</span>) =&gt;</span> {\n","              <span class=\"code-keyword\">const</span> normalizedFromExtend = normalizeEmitsOptions(raw, appContext, <span class=\"code-literal\">true</span>);\n","              <span class=\"code-keyword\">if</span> (normalizedFromExtend) {\n","                  hasExtends = <span class=\"code-literal\">true</span>;\n","                  extend(normalized, normalizedFromExtend);\n","              }\n","          };\n","          <span class=\"code-keyword\">if</span> (!asMixin &amp;&amp; appContext.mixins.length) {\n","              appContext.mixins.forEach(extendEmits);\n","          }\n","          <span class=\"code-keyword\">if</span> (comp.extends) {\n","              extendEmits(comp.extends);\n","          }\n","          <span class=\"code-keyword\">if</span> (comp.mixins) {\n","              comp.mixins.forEach(extendEmits);\n","          }\n","      }\n","      <span class=\"code-keyword\">if</span> (!raw &amp;&amp; !hasExtends) {\n","          <span class=\"code-keyword\">if</span> (isObject(comp)) {\n","              cache.set(comp, <span class=\"code-literal\">null</span>);\n","          }\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">null</span>;\n","      }\n","      <span class=\"code-keyword\">if</span> (isArray(raw)) {\n","          raw.forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> (normalized[key] = <span class=\"code-literal\">null</span>));\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          extend(normalized, raw);\n","      }\n","      <span class=\"code-keyword\">if</span> (isObject(comp)) {\n","          cache.set(comp, normalized);\n","      }\n","      <span class=\"code-keyword\">return</span> normalized;\n","  }\n","  <span class=\"code-comment\">// Check if an incoming prop key is a declared emit event listener.</span>\n","  <span class=\"code-comment\">// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are</span>\n","  <span class=\"code-comment\">// both considered matched listeners.</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isEmitListener</span>(<span class=\"code-params\">options, key</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!options || !isOn(key)) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","      }\n","      key = key.slice(<span class=\"code-number\">2</span>).replace(<span class=\"code-regexp\">/Once$/</span>, <span class=\"code-string\">''</span>);\n","      <span class=\"code-keyword\">return</span> (hasOwn(options, key[<span class=\"code-number\">0</span>].toLowerCase() + key.slice(<span class=\"code-number\">1</span>)) ||\n","          hasOwn(options, hyphenate(key)) ||\n","          hasOwn(options, key));\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * mark the current rendering instance for asset resolution (e.g.\n</span>","<span class=\"code-comment\">   * resolveComponent, resolveDirective) during render\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">let</span> currentRenderingInstance = <span class=\"code-literal\">null</span>;\n","  <span class=\"code-keyword\">let</span> currentScopeId = <span class=\"code-literal\">null</span>;\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Note: rendering calls maybe nested. The function returns the parent rendering\n</span>","<span class=\"code-comment\">   * instance if present, which should be restored after the render is done:\n</span>","<span class=\"code-comment\">   *\n</span>","<span class=\"code-comment\">   * ```js\n</span>","<span class=\"code-comment\">   * const prev = setCurrentRenderingInstance(i)\n</span>","<span class=\"code-comment\">   * // ...render\n</span>","<span class=\"code-comment\">   * setCurrentRenderingInstance(prev)\n</span>","<span class=\"code-comment\">   * ```\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">setCurrentRenderingInstance</span>(<span class=\"code-params\">instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> prev = currentRenderingInstance;\n","      currentRenderingInstance = instance;\n","      currentScopeId = (instance &amp;&amp; instance.type.__scopeId) || <span class=\"code-literal\">null</span>;\n","      <span class=\"code-keyword\">return</span> prev;\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Set scope id when creating hoisted vnodes.\n</span>","<span class=\"code-comment\">   * @private compiler helper\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">pushScopeId</span>(<span class=\"code-params\">id</span>) </span>{\n","      currentScopeId = id;\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Technically we no longer need this after 3.0.8 but we need to keep the same\n</span>","<span class=\"code-comment\">   * API for backwards compat w/ code generated by compilers.\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">popScopeId</span>(<span class=\"code-params\"></span>) </span>{\n","      currentScopeId = <span class=\"code-literal\">null</span>;\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Only for backwards compat\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> withScopeId = <span class=\"code-function\">(<span class=\"code-params\">_id</span>) =&gt;</span> withCtx;\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Wrap a slot function to memoize current rendering instance\n</span>","<span class=\"code-comment\">   * @private compiler helper\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">withCtx</span>(<span class=\"code-params\">fn, ctx = currentRenderingInstance, isNonScopedSlot <span class=\"code-regexp\">//</span> false only\n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  </span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!ctx)\n","          <span class=\"code-keyword\">return</span> fn;\n","      <span class=\"code-comment\">// already normalized</span>\n","      <span class=\"code-keyword\">if</span> (fn._n) {\n","          <span class=\"code-keyword\">return</span> fn;\n","      }\n","      <span class=\"code-keyword\">const</span> renderFnWithContext = <span class=\"code-function\">(<span class=\"code-params\">...args</span>) =&gt;</span> {\n","          <span class=\"code-comment\">// If a user calls a compiled slot inside a template expression (#1745), it</span>\n","          <span class=\"code-comment\">// can mess up block tracking, so by default we disable block tracking and</span>\n","          <span class=\"code-comment\">// force bail out when invoking a compiled slot (indicated by the ._d flag).</span>\n","          <span class=\"code-comment\">// This isn't necessary if rendering a compiled `&lt;slot&gt;`, so we flip the</span>\n","          <span class=\"code-comment\">// ._d flag off when invoking the wrapped fn inside `renderSlot`.</span>\n","          <span class=\"code-keyword\">if</span> (renderFnWithContext._d) {\n","              setBlockTracking(<span class=\"code-number\">-1</span>);\n","          }\n","          <span class=\"code-keyword\">const</span> prevInstance = setCurrentRenderingInstance(ctx);\n","          <span class=\"code-keyword\">let</span> res;\n","          <span class=\"code-keyword\">try</span> {\n","              res = fn(...args);\n","          }\n","          <span class=\"code-keyword\">finally</span> {\n","              setCurrentRenderingInstance(prevInstance);\n","              <span class=\"code-keyword\">if</span> (renderFnWithContext._d) {\n","                  setBlockTracking(<span class=\"code-number\">1</span>);\n","              }\n","          }\n","          {\n","              devtoolsComponentUpdated(ctx);\n","          }\n","          <span class=\"code-keyword\">return</span> res;\n","      };\n","      <span class=\"code-comment\">// mark normalized to avoid duplicated wrapping</span>\n","      renderFnWithContext._n = <span class=\"code-literal\">true</span>;\n","      <span class=\"code-comment\">// mark this as compiled by default</span>\n","      <span class=\"code-comment\">// this is used in vnode.ts -&gt; normalizeChildren() to set the slot</span>\n","      <span class=\"code-comment\">// rendering flag.</span>\n","      renderFnWithContext._c = <span class=\"code-literal\">true</span>;\n","      <span class=\"code-comment\">// disable block tracking by default</span>\n","      renderFnWithContext._d = <span class=\"code-literal\">true</span>;\n","      <span class=\"code-keyword\">return</span> renderFnWithContext;\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only flag to track whether $attrs was used during render.\n</span>","<span class=\"code-comment\">   * If $attrs was used during render then the warning for failed attrs\n</span>","<span class=\"code-comment\">   * fallthrough can be suppressed.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">let</span> accessedAttrs = <span class=\"code-literal\">false</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">markAttrsAccessed</span>(<span class=\"code-params\"></span>) </span>{\n","      accessedAttrs = <span class=\"code-literal\">true</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">renderComponentRoot</span>(<span class=\"code-params\">instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { <span class=\"code-attr\">type</span>: Component, vnode, proxy, withProxy, props, <span class=\"code-attr\">propsOptions</span>: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;\n","      <span class=\"code-keyword\">let</span> result;\n","      <span class=\"code-keyword\">let</span> fallthroughAttrs;\n","      <span class=\"code-keyword\">const</span> prev = setCurrentRenderingInstance(instance);\n","      {\n","          accessedAttrs = <span class=\"code-literal\">false</span>;\n","      }\n","      <span class=\"code-keyword\">try</span> {\n","          <span class=\"code-keyword\">if</span> (vnode.shapeFlag &amp; <span class=\"code-number\">4</span> <span class=\"code-comment\">/* ShapeFlags.STATEFUL_COMPONENT */</span>) {\n","              <span class=\"code-comment\">// withProxy is a proxy with a different `has` trap only for</span>\n","              <span class=\"code-comment\">// runtime-compiled render functions using `with` block.</span>\n","              <span class=\"code-keyword\">const</span> proxyToUse = withProxy || proxy;\n","              result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\n","              fallthroughAttrs = attrs;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-comment\">// functional</span>\n","              <span class=\"code-keyword\">const</span> render = Component;\n","              <span class=\"code-comment\">// in dev, mark attrs accessed if optional props (attrs === props)</span>\n","              <span class=\"code-keyword\">if</span> (<span class=\"code-literal\">true</span> &amp;&amp; attrs === props) {\n","                  markAttrsAccessed();\n","              }\n","              result = normalizeVNode(render.length &gt; <span class=\"code-number\">1</span>\n","                  ? render(props, <span class=\"code-literal\">true</span>\n","                      ? {\n","                          <span class=\"code-keyword\">get</span> attrs() {\n","                              markAttrsAccessed();\n","                              <span class=\"code-keyword\">return</span> attrs;\n","                          },\n","                          slots,\n","                          emit\n","                      }\n","                      : { attrs, slots, emit })\n","                  : render(props, <span class=\"code-literal\">null</span> <span class=\"code-comment\">/* we know it doesn't need it */</span>));\n","              fallthroughAttrs = Component.props\n","                  ? attrs\n","                  : getFunctionalFallthrough(attrs);\n","          }\n","      }\n","      <span class=\"code-keyword\">catch</span> (err) {\n","          blockStack.length = <span class=\"code-number\">0</span>;\n","          handleError(err, instance, <span class=\"code-number\">1</span> <span class=\"code-comment\">/* ErrorCodes.RENDER_FUNCTION */</span>);\n","          result = createVNode(Comment);\n","      }\n","      <span class=\"code-comment\">// attr merging</span>\n","      <span class=\"code-comment\">// in dev mode, comments are preserved, and it's possible for a template</span>\n","      <span class=\"code-comment\">// to have comments along side the root element which makes it a fragment</span>\n","      <span class=\"code-keyword\">let</span> root = result;\n","      <span class=\"code-keyword\">let</span> setRoot = <span class=\"code-literal\">undefined</span>;\n","      <span class=\"code-keyword\">if</span> (result.patchFlag &gt; <span class=\"code-number\">0</span> &amp;&amp;\n","          result.patchFlag &amp; <span class=\"code-number\">2048</span> <span class=\"code-comment\">/* PatchFlags.DEV_ROOT_FRAGMENT */</span>) {\n","          [root, setRoot] = getChildRoot(result);\n","      }\n","      <span class=\"code-keyword\">if</span> (fallthroughAttrs &amp;&amp; inheritAttrs !== <span class=\"code-literal\">false</span>) {\n","          <span class=\"code-keyword\">const</span> keys = <span class=\"code-built_in\">Object</span>.keys(fallthroughAttrs);\n","          <span class=\"code-keyword\">const</span> { shapeFlag } = root;\n","          <span class=\"code-keyword\">if</span> (keys.length) {\n","              <span class=\"code-keyword\">if</span> (shapeFlag &amp; (<span class=\"code-number\">1</span> <span class=\"code-comment\">/* ShapeFlags.ELEMENT */</span> | <span class=\"code-number\">6</span> <span class=\"code-comment\">/* ShapeFlags.COMPONENT */</span>)) {\n","                  <span class=\"code-keyword\">if</span> (propsOptions &amp;&amp; keys.some(isModelListener)) {\n","                      <span class=\"code-comment\">// If a v-model listener (onUpdate:xxx) has a corresponding declared</span>\n","                      <span class=\"code-comment\">// prop, it indicates this component expects to handle v-model and</span>\n","                      <span class=\"code-comment\">// it should not fallthrough.</span>\n","                      <span class=\"code-comment\">// related: #1543, #1643, #1989</span>\n","                      fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\n","                  }\n","                  root = cloneVNode(root, fallthroughAttrs);\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (!accessedAttrs &amp;&amp; root.type !== Comment) {\n","                  <span class=\"code-keyword\">const</span> allAttrs = <span class=\"code-built_in\">Object</span>.keys(attrs);\n","                  <span class=\"code-keyword\">const</span> eventAttrs = [];\n","                  <span class=\"code-keyword\">const</span> extraAttrs = [];\n","                  <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>, l = allAttrs.length; i &lt; l; i++) {\n","                      <span class=\"code-keyword\">const</span> key = allAttrs[i];\n","                      <span class=\"code-keyword\">if</span> (isOn(key)) {\n","                          <span class=\"code-comment\">// ignore v-model handlers when they fail to fallthrough</span>\n","                          <span class=\"code-keyword\">if</span> (!isModelListener(key)) {\n","                              <span class=\"code-comment\">// remove `on`, lowercase first letter to reflect event casing</span>\n","                              <span class=\"code-comment\">// accurately</span>\n","                              eventAttrs.push(key[<span class=\"code-number\">2</span>].toLowerCase() + key.slice(<span class=\"code-number\">3</span>));\n","                          }\n","                      }\n","                      <span class=\"code-keyword\">else</span> {\n","                          extraAttrs.push(key);\n","                      }\n","                  }\n","                  <span class=\"code-keyword\">if</span> (extraAttrs.length) {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Extraneous non-props attributes (`</span> +\n","                          <span class=\"code-string\">`<span class=\"code-subst\">${extraAttrs.join(<span class=\"code-string\">', '</span>)}</span>) `</span> +\n","                          <span class=\"code-string\">`were passed to component but could not be automatically inherited `</span> +\n","                          <span class=\"code-string\">`because component renders fragment or text root nodes.`</span>);\n","                  }\n","                  <span class=\"code-keyword\">if</span> (eventAttrs.length) {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Extraneous non-emits event listeners (`</span> +\n","                          <span class=\"code-string\">`<span class=\"code-subst\">${eventAttrs.join(<span class=\"code-string\">', '</span>)}</span>) `</span> +\n","                          <span class=\"code-string\">`were passed to component but could not be automatically inherited `</span> +\n","                          <span class=\"code-string\">`because component renders fragment or text root nodes. `</span> +\n","                          <span class=\"code-string\">`If the listener is intended to be a component custom event listener only, `</span> +\n","                          <span class=\"code-string\">`declare it using the \"emits\" option.`</span>);\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-comment\">// inherit directives</span>\n","      <span class=\"code-keyword\">if</span> (vnode.dirs) {\n","          <span class=\"code-keyword\">if</span> (!isElementRoot(root)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Runtime directive used on component with non-element root node. `</span> +\n","                  <span class=\"code-string\">`The directives will not function as intended.`</span>);\n","          }\n","          <span class=\"code-comment\">// clone before mutating since the root may be a hoisted vnode</span>\n","          root = cloneVNode(root);\n","          root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\n","      }\n","      <span class=\"code-comment\">// inherit transition data</span>\n","      <span class=\"code-keyword\">if</span> (vnode.transition) {\n","          <span class=\"code-keyword\">if</span> (!isElementRoot(root)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Component inside &lt;Transition&gt; renders non-element root node `</span> +\n","                  <span class=\"code-string\">`that cannot be animated.`</span>);\n","          }\n","          root.transition = vnode.transition;\n","      }\n","      <span class=\"code-keyword\">if</span> (setRoot) {\n","          setRoot(root);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          result = root;\n","      }\n","      setCurrentRenderingInstance(prev);\n","      <span class=\"code-keyword\">return</span> result;\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   * In dev mode, template root level comments are rendered, which turns the\n</span>","<span class=\"code-comment\">   * template into a fragment root, but we need to locate the single element\n</span>","<span class=\"code-comment\">   * root for attrs and scope id processing.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> getChildRoot = <span class=\"code-function\">(<span class=\"code-params\">vnode</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> rawChildren = vnode.children;\n","      <span class=\"code-keyword\">const</span> dynamicChildren = vnode.dynamicChildren;\n","      <span class=\"code-keyword\">const</span> childRoot = filterSingleRoot(rawChildren);\n","      <span class=\"code-keyword\">if</span> (!childRoot) {\n","          <span class=\"code-keyword\">return</span> [vnode, <span class=\"code-literal\">undefined</span>];\n","      }\n","      <span class=\"code-keyword\">const</span> index = rawChildren.indexOf(childRoot);\n","      <span class=\"code-keyword\">const</span> dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : <span class=\"code-number\">-1</span>;\n","      <span class=\"code-keyword\">const</span> setRoot = <span class=\"code-function\">(<span class=\"code-params\">updatedRoot</span>) =&gt;</span> {\n","          rawChildren[index] = updatedRoot;\n","          <span class=\"code-keyword\">if</span> (dynamicChildren) {\n","              <span class=\"code-keyword\">if</span> (dynamicIndex &gt; <span class=\"code-number\">-1</span>) {\n","                  dynamicChildren[dynamicIndex] = updatedRoot;\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (updatedRoot.patchFlag &gt; <span class=\"code-number\">0</span>) {\n","                  vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\n","              }\n","          }\n","      };\n","      <span class=\"code-keyword\">return</span> [normalizeVNode(childRoot), setRoot];\n","  };\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">filterSingleRoot</span>(<span class=\"code-params\">children</span>) </span>{\n","      <span class=\"code-keyword\">let</span> singleRoot;\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; children.length; i++) {\n","          <span class=\"code-keyword\">const</span> child = children[i];\n","          <span class=\"code-keyword\">if</span> (isVNode(child)) {\n","              <span class=\"code-comment\">// ignore user comment</span>\n","              <span class=\"code-keyword\">if</span> (child.type !== Comment || child.children === <span class=\"code-string\">'v-if'</span>) {\n","                  <span class=\"code-keyword\">if</span> (singleRoot) {\n","                      <span class=\"code-comment\">// has more than 1 non-comment child, return now</span>\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      singleRoot = child;\n","                  }\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-keyword\">return</span>;\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> singleRoot;\n","  }\n","  <span class=\"code-keyword\">const</span> getFunctionalFallthrough = <span class=\"code-function\">(<span class=\"code-params\">attrs</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">let</span> res;\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> attrs) {\n","          <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">'class'</span> || key === <span class=\"code-string\">'style'</span> || isOn(key)) {\n","              (res || (res = {}))[key] = attrs[key];\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> res;\n","  };\n","  <span class=\"code-keyword\">const</span> filterModelListeners = <span class=\"code-function\">(<span class=\"code-params\">attrs, props</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> res = {};\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> attrs) {\n","          <span class=\"code-keyword\">if</span> (!isModelListener(key) || !(key.slice(<span class=\"code-number\">9</span>) <span class=\"code-keyword\">in</span> props)) {\n","              res[key] = attrs[key];\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> res;\n","  };\n","  <span class=\"code-keyword\">const</span> isElementRoot = <span class=\"code-function\">(<span class=\"code-params\">vnode</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">return</span> (vnode.shapeFlag &amp; (<span class=\"code-number\">6</span> <span class=\"code-comment\">/* ShapeFlags.COMPONENT */</span> | <span class=\"code-number\">1</span> <span class=\"code-comment\">/* ShapeFlags.ELEMENT */</span>) ||\n","          vnode.type === Comment <span class=\"code-comment\">// potential v-if branch switch</span>\n","      );\n","  };\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">shouldUpdateComponent</span>(<span class=\"code-params\">prevVNode, nextVNode, optimized</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { <span class=\"code-attr\">props</span>: prevProps, <span class=\"code-attr\">children</span>: prevChildren, component } = prevVNode;\n","      <span class=\"code-keyword\">const</span> { <span class=\"code-attr\">props</span>: nextProps, <span class=\"code-attr\">children</span>: nextChildren, patchFlag } = nextVNode;\n","      <span class=\"code-keyword\">const</span> emits = component.emitsOptions;\n","      <span class=\"code-comment\">// Parent component's render function was hot-updated. Since this may have</span>\n","      <span class=\"code-comment\">// caused the child component's slots content to have changed, we need to</span>\n","      <span class=\"code-comment\">// force the child to update as well.</span>\n","      <span class=\"code-keyword\">if</span> ((prevChildren || nextChildren) &amp;&amp; isHmrUpdating) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-comment\">// force child update for runtime directive or transition on component vnode.</span>\n","      <span class=\"code-keyword\">if</span> (nextVNode.dirs || nextVNode.transition) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-keyword\">if</span> (optimized &amp;&amp; patchFlag &gt;= <span class=\"code-number\">0</span>) {\n","          <span class=\"code-keyword\">if</span> (patchFlag &amp; <span class=\"code-number\">1024</span> <span class=\"code-comment\">/* PatchFlags.DYNAMIC_SLOTS */</span>) {\n","              <span class=\"code-comment\">// slot content that references values that might have changed,</span>\n","              <span class=\"code-comment\">// e.g. in a v-for</span>\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-keyword\">if</span> (patchFlag &amp; <span class=\"code-number\">16</span> <span class=\"code-comment\">/* PatchFlags.FULL_PROPS */</span>) {\n","              <span class=\"code-keyword\">if</span> (!prevProps) {\n","                  <span class=\"code-keyword\">return</span> !!nextProps;\n","              }\n","              <span class=\"code-comment\">// presence of this flag indicates props are always non-null</span>\n","              <span class=\"code-keyword\">return</span> hasPropsChanged(prevProps, nextProps, emits);\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (patchFlag &amp; <span class=\"code-number\">8</span> <span class=\"code-comment\">/* PatchFlags.PROPS */</span>) {\n","              <span class=\"code-keyword\">const</span> dynamicProps = nextVNode.dynamicProps;\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; dynamicProps.length; i++) {\n","                  <span class=\"code-keyword\">const</span> key = dynamicProps[i];\n","                  <span class=\"code-keyword\">if</span> (nextProps[key] !== prevProps[key] &amp;&amp;\n","                      !isEmitListener(emits, key)) {\n","                      <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// this path is only taken by manually written render functions</span>\n","          <span class=\"code-comment\">// so presence of any children leads to a forced update</span>\n","          <span class=\"code-keyword\">if</span> (prevChildren || nextChildren) {\n","              <span class=\"code-keyword\">if</span> (!nextChildren || !nextChildren.$stable) {\n","                  <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","              }\n","          }\n","          <span class=\"code-keyword\">if</span> (prevProps === nextProps) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          }\n","          <span class=\"code-keyword\">if</span> (!prevProps) {\n","              <span class=\"code-keyword\">return</span> !!nextProps;\n","          }\n","          <span class=\"code-keyword\">if</span> (!nextProps) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-keyword\">return</span> hasPropsChanged(prevProps, nextProps, emits);\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">hasPropsChanged</span>(<span class=\"code-params\">prevProps, nextProps, emitsOptions</span>) </span>{\n","      <span class=\"code-keyword\">const</span> nextKeys = <span class=\"code-built_in\">Object</span>.keys(nextProps);\n","      <span class=\"code-keyword\">if</span> (nextKeys.length !== <span class=\"code-built_in\">Object</span>.keys(prevProps).length) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; nextKeys.length; i++) {\n","          <span class=\"code-keyword\">const</span> key = nextKeys[i];\n","          <span class=\"code-keyword\">if</span> (nextProps[key] !== prevProps[key] &amp;&amp;\n","              !isEmitListener(emitsOptions, key)) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">updateHOCHostEl</span>(<span class=\"code-params\">{ vnode, parent }, el <span class=\"code-regexp\">//</span> HostNode\n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  </span>) </span>{\n","      <span class=\"code-keyword\">while</span> (parent &amp;&amp; parent.subTree === vnode) {\n","          (vnode = parent.vnode).el = el;\n","          parent = parent.parent;\n","      }\n","  }\n","\n","  <span class=\"code-keyword\">const</span> isSuspense = <span class=\"code-function\">(<span class=\"code-params\">type</span>) =&gt;</span> type.__isSuspense;\n","  <span class=\"code-comment\">// Suspense exposes a component-like API, and is treated like a component</span>\n","  <span class=\"code-comment\">// in the compiler, but internally it's a special built-in type that hooks</span>\n","  <span class=\"code-comment\">// directly into the renderer.</span>\n","  <span class=\"code-keyword\">const</span> SuspenseImpl = {\n","      name: <span class=\"code-string\">'Suspense'</span>,\n","      <span class=\"code-comment\">// In order to make Suspense tree-shakable, we need to avoid importing it</span>\n","      <span class=\"code-comment\">// directly in the renderer. The renderer checks for the __isSuspense flag</span>\n","      <span class=\"code-comment\">// on a vnode's type and calls the `process` method, passing in renderer</span>\n","      <span class=\"code-comment\">// internals.</span>\n","      __isSuspense: <span class=\"code-literal\">true</span>,\n","      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, \n","      <span class=\"code-comment\">// platform-specific impl passed from renderer</span>\n","      rendererInternals) {\n","          <span class=\"code-keyword\">if</span> (n1 == <span class=\"code-literal\">null</span>) {\n","              mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);\n","          }\n","      },\n","      hydrate: hydrateSuspense,\n","      create: createSuspenseBoundary,\n","      normalize: normalizeSuspenseChildren\n","  };\n","  <span class=\"code-comment\">// Force-casted public typing for h and TSX props inference</span>\n","  <span class=\"code-keyword\">const</span> Suspense = (SuspenseImpl\n","      );\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">triggerEvent</span>(<span class=\"code-params\">vnode, name</span>) </span>{\n","      <span class=\"code-keyword\">const</span> eventListener = vnode.props &amp;&amp; vnode.props[name];\n","      <span class=\"code-keyword\">if</span> (isFunction(eventListener)) {\n","          eventListener();\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mountSuspense</span>(<span class=\"code-params\">vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { <span class=\"code-attr\">p</span>: patch, <span class=\"code-attr\">o</span>: { createElement } } = rendererInternals;\n","      <span class=\"code-keyword\">const</span> hiddenContainer = createElement(<span class=\"code-string\">'div'</span>);\n","      <span class=\"code-keyword\">const</span> suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));\n","      <span class=\"code-comment\">// start mounting the content subtree in an off-dom container</span>\n","      patch(<span class=\"code-literal\">null</span>, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, <span class=\"code-literal\">null</span>, parentComponent, suspense, isSVG, slotScopeIds);\n","      <span class=\"code-comment\">// now check if we have encountered any async deps</span>\n","      <span class=\"code-keyword\">if</span> (suspense.deps &gt; <span class=\"code-number\">0</span>) {\n","          <span class=\"code-comment\">// has async</span>\n","          <span class=\"code-comment\">// invoke @fallback event</span>\n","          triggerEvent(vnode, <span class=\"code-string\">'onPending'</span>);\n","          triggerEvent(vnode, <span class=\"code-string\">'onFallback'</span>);\n","          <span class=\"code-comment\">// mount the fallback tree</span>\n","          patch(<span class=\"code-literal\">null</span>, vnode.ssFallback, container, anchor, parentComponent, <span class=\"code-literal\">null</span>, <span class=\"code-comment\">// fallback tree will not have suspense context</span>\n","          isSVG, slotScopeIds);\n","          setActiveBranch(suspense, vnode.ssFallback);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// Suspense has no async deps. Just resolve.</span>\n","          suspense.resolve();\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">patchSuspense</span>(<span class=\"code-params\">n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }</span>) </span>{\n","      <span class=\"code-keyword\">const</span> suspense = (n2.suspense = n1.suspense);\n","      suspense.vnode = n2;\n","      n2.el = n1.el;\n","      <span class=\"code-keyword\">const</span> newBranch = n2.ssContent;\n","      <span class=\"code-keyword\">const</span> newFallback = n2.ssFallback;\n","      <span class=\"code-keyword\">const</span> { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;\n","      <span class=\"code-keyword\">if</span> (pendingBranch) {\n","          suspense.pendingBranch = newBranch;\n","          <span class=\"code-keyword\">if</span> (isSameVNodeType(newBranch, pendingBranch)) {\n","              <span class=\"code-comment\">// same root type but content may have changed.</span>\n","              patch(pendingBranch, newBranch, suspense.hiddenContainer, <span class=\"code-literal\">null</span>, parentComponent, suspense, isSVG, slotScopeIds, optimized);\n","              <span class=\"code-keyword\">if</span> (suspense.deps &lt;= <span class=\"code-number\">0</span>) {\n","                  suspense.resolve();\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isInFallback) {\n","                  patch(activeBranch, newFallback, container, anchor, parentComponent, <span class=\"code-literal\">null</span>, <span class=\"code-comment\">// fallback tree will not have suspense context</span>\n","                  isSVG, slotScopeIds, optimized);\n","                  setActiveBranch(suspense, newFallback);\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-comment\">// toggled before pending tree is resolved</span>\n","              suspense.pendingId++;\n","              <span class=\"code-keyword\">if</span> (isHydrating) {\n","                  <span class=\"code-comment\">// if toggled before hydration is finished, the current DOM tree is</span>\n","                  <span class=\"code-comment\">// no longer valid. set it as the active branch so it will be unmounted</span>\n","                  <span class=\"code-comment\">// when resolved</span>\n","                  suspense.isHydrating = <span class=\"code-literal\">false</span>;\n","                  suspense.activeBranch = pendingBranch;\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  unmount(pendingBranch, parentComponent, suspense);\n","              }\n","              <span class=\"code-comment\">// increment pending ID. this is used to invalidate async callbacks</span>\n","              <span class=\"code-comment\">// reset suspense state</span>\n","              suspense.deps = <span class=\"code-number\">0</span>;\n","              <span class=\"code-comment\">// discard effects from pending branch</span>\n","              suspense.effects.length = <span class=\"code-number\">0</span>;\n","              <span class=\"code-comment\">// discard previous container</span>\n","              suspense.hiddenContainer = createElement(<span class=\"code-string\">'div'</span>);\n","              <span class=\"code-keyword\">if</span> (isInFallback) {\n","                  <span class=\"code-comment\">// already in fallback state</span>\n","                  patch(<span class=\"code-literal\">null</span>, newBranch, suspense.hiddenContainer, <span class=\"code-literal\">null</span>, parentComponent, suspense, isSVG, slotScopeIds, optimized);\n","                  <span class=\"code-keyword\">if</span> (suspense.deps &lt;= <span class=\"code-number\">0</span>) {\n","                      suspense.resolve();\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      patch(activeBranch, newFallback, container, anchor, parentComponent, <span class=\"code-literal\">null</span>, <span class=\"code-comment\">// fallback tree will not have suspense context</span>\n","                      isSVG, slotScopeIds, optimized);\n","                      setActiveBranch(suspense, newFallback);\n","                  }\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (activeBranch &amp;&amp; isSameVNodeType(newBranch, activeBranch)) {\n","                  <span class=\"code-comment\">// toggled \"back\" to current active branch</span>\n","                  patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\n","                  <span class=\"code-comment\">// force resolve</span>\n","                  suspense.resolve(<span class=\"code-literal\">true</span>);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  <span class=\"code-comment\">// switched to a 3rd branch</span>\n","                  patch(<span class=\"code-literal\">null</span>, newBranch, suspense.hiddenContainer, <span class=\"code-literal\">null</span>, parentComponent, suspense, isSVG, slotScopeIds, optimized);\n","                  <span class=\"code-keyword\">if</span> (suspense.deps &lt;= <span class=\"code-number\">0</span>) {\n","                      suspense.resolve();\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">if</span> (activeBranch &amp;&amp; isSameVNodeType(newBranch, activeBranch)) {\n","              <span class=\"code-comment\">// root did not change, just normal patch</span>\n","              patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\n","              setActiveBranch(suspense, newBranch);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-comment\">// root node toggled</span>\n","              <span class=\"code-comment\">// invoke @pending event</span>\n","              triggerEvent(n2, <span class=\"code-string\">'onPending'</span>);\n","              <span class=\"code-comment\">// mount pending branch in off-dom container</span>\n","              suspense.pendingBranch = newBranch;\n","              suspense.pendingId++;\n","              patch(<span class=\"code-literal\">null</span>, newBranch, suspense.hiddenContainer, <span class=\"code-literal\">null</span>, parentComponent, suspense, isSVG, slotScopeIds, optimized);\n","              <span class=\"code-keyword\">if</span> (suspense.deps &lt;= <span class=\"code-number\">0</span>) {\n","                  <span class=\"code-comment\">// incoming branch has no async deps, resolve now.</span>\n","                  suspense.resolve();\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  <span class=\"code-keyword\">const</span> { timeout, pendingId } = suspense;\n","                  <span class=\"code-keyword\">if</span> (timeout &gt; <span class=\"code-number\">0</span>) {\n","                      setTimeout(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                          <span class=\"code-keyword\">if</span> (suspense.pendingId === pendingId) {\n","                              suspense.fallback(newFallback);\n","                          }\n","                      }, timeout);\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (timeout === <span class=\"code-number\">0</span>) {\n","                      suspense.fallback(newFallback);\n","                  }\n","              }\n","          }\n","      }\n","  }\n","  <span class=\"code-keyword\">let</span> hasWarned = <span class=\"code-literal\">false</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createSuspenseBoundary</span>(<span class=\"code-params\">vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false</span>) </span>{\n","      <span class=\"code-comment\">/* istanbul ignore if */</span>\n","      <span class=\"code-keyword\">if</span> (!hasWarned) {\n","          hasWarned = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-comment\">// @ts-ignore `console.info` cannot be null error</span>\n","          <span class=\"code-built_in\">console</span>[<span class=\"code-built_in\">console</span>.info ? <span class=\"code-string\">'info'</span> : <span class=\"code-string\">'log'</span>](<span class=\"code-string\">`&lt;Suspense&gt; is an experimental feature and its API will likely change.`</span>);\n","      }\n","      <span class=\"code-keyword\">const</span> { <span class=\"code-attr\">p</span>: patch, <span class=\"code-attr\">m</span>: move, <span class=\"code-attr\">um</span>: unmount, <span class=\"code-attr\">n</span>: next, <span class=\"code-attr\">o</span>: { parentNode, remove } } = rendererInternals;\n","      <span class=\"code-keyword\">const</span> timeout = toNumber(vnode.props &amp;&amp; vnode.props.timeout);\n","      <span class=\"code-keyword\">const</span> suspense = {\n","          vnode,\n","          parent,\n","          parentComponent,\n","          isSVG,\n","          container,\n","          hiddenContainer,\n","          anchor,\n","          deps: <span class=\"code-number\">0</span>,\n","          pendingId: <span class=\"code-number\">0</span>,\n","          timeout: <span class=\"code-keyword\">typeof</span> timeout === <span class=\"code-string\">'number'</span> ? timeout : <span class=\"code-number\">-1</span>,\n","          activeBranch: <span class=\"code-literal\">null</span>,\n","          pendingBranch: <span class=\"code-literal\">null</span>,\n","          isInFallback: <span class=\"code-literal\">true</span>,\n","          isHydrating,\n","          isUnmounted: <span class=\"code-literal\">false</span>,\n","          effects: [],\n","          resolve(resume = <span class=\"code-literal\">false</span>) {\n","              {\n","                  <span class=\"code-keyword\">if</span> (!resume &amp;&amp; !suspense.pendingBranch) {\n","                      <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Error</span>(<span class=\"code-string\">`suspense.resolve() is called without a pending branch.`</span>);\n","                  }\n","                  <span class=\"code-keyword\">if</span> (suspense.isUnmounted) {\n","                      <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Error</span>(<span class=\"code-string\">`suspense.resolve() is called on an already unmounted suspense boundary.`</span>);\n","                  }\n","              }\n","              <span class=\"code-keyword\">const</span> { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;\n","              <span class=\"code-keyword\">if</span> (suspense.isHydrating) {\n","                  suspense.isHydrating = <span class=\"code-literal\">false</span>;\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (!resume) {\n","                  <span class=\"code-keyword\">const</span> delayEnter = activeBranch &amp;&amp;\n","                      pendingBranch.transition &amp;&amp;\n","                      pendingBranch.transition.mode === <span class=\"code-string\">'out-in'</span>;\n","                  <span class=\"code-keyword\">if</span> (delayEnter) {\n","                      activeBranch.transition.afterLeave = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                          <span class=\"code-keyword\">if</span> (pendingId === suspense.pendingId) {\n","                              move(pendingBranch, container, anchor, <span class=\"code-number\">0</span> <span class=\"code-comment\">/* MoveType.ENTER */</span>);\n","                          }\n","                      };\n","                  }\n","                  <span class=\"code-comment\">// this is initial anchor on mount</span>\n","                  <span class=\"code-keyword\">let</span> { anchor } = suspense;\n","                  <span class=\"code-comment\">// unmount current active tree</span>\n","                  <span class=\"code-keyword\">if</span> (activeBranch) {\n","                      <span class=\"code-comment\">// if the fallback tree was mounted, it may have been moved</span>\n","                      <span class=\"code-comment\">// as part of a parent suspense. get the latest anchor for insertion</span>\n","                      anchor = next(activeBranch);\n","                      unmount(activeBranch, parentComponent, suspense, <span class=\"code-literal\">true</span>);\n","                  }\n","                  <span class=\"code-keyword\">if</span> (!delayEnter) {\n","                      <span class=\"code-comment\">// move content from off-dom container to actual container</span>\n","                      move(pendingBranch, container, anchor, <span class=\"code-number\">0</span> <span class=\"code-comment\">/* MoveType.ENTER */</span>);\n","                  }\n","              }\n","              setActiveBranch(suspense, pendingBranch);\n","              suspense.pendingBranch = <span class=\"code-literal\">null</span>;\n","              suspense.isInFallback = <span class=\"code-literal\">false</span>;\n","              <span class=\"code-comment\">// flush buffered effects</span>\n","              <span class=\"code-comment\">// check if there is a pending parent suspense</span>\n","              <span class=\"code-keyword\">let</span> parent = suspense.parent;\n","              <span class=\"code-keyword\">let</span> hasUnresolvedAncestor = <span class=\"code-literal\">false</span>;\n","              <span class=\"code-keyword\">while</span> (parent) {\n","                  <span class=\"code-keyword\">if</span> (parent.pendingBranch) {\n","                      <span class=\"code-comment\">// found a pending parent suspense, merge buffered post jobs</span>\n","                      <span class=\"code-comment\">// into that parent</span>\n","                      parent.effects.push(...effects);\n","                      hasUnresolvedAncestor = <span class=\"code-literal\">true</span>;\n","                      <span class=\"code-keyword\">break</span>;\n","                  }\n","                  parent = parent.parent;\n","              }\n","              <span class=\"code-comment\">// no pending parent suspense, flush all jobs</span>\n","              <span class=\"code-keyword\">if</span> (!hasUnresolvedAncestor) {\n","                  queuePostFlushCb(effects);\n","              }\n","              suspense.effects = [];\n","              <span class=\"code-comment\">// invoke @resolve event</span>\n","              triggerEvent(vnode, <span class=\"code-string\">'onResolve'</span>);\n","          },\n","          fallback(fallbackVNode) {\n","              <span class=\"code-keyword\">if</span> (!suspense.pendingBranch) {\n","                  <span class=\"code-keyword\">return</span>;\n","              }\n","              <span class=\"code-keyword\">const</span> { vnode, activeBranch, parentComponent, container, isSVG } = suspense;\n","              <span class=\"code-comment\">// invoke @fallback event</span>\n","              triggerEvent(vnode, <span class=\"code-string\">'onFallback'</span>);\n","              <span class=\"code-keyword\">const</span> anchor = next(activeBranch);\n","              <span class=\"code-keyword\">const</span> mountFallback = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                  <span class=\"code-keyword\">if</span> (!suspense.isInFallback) {\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","                  <span class=\"code-comment\">// mount the fallback tree</span>\n","                  patch(<span class=\"code-literal\">null</span>, fallbackVNode, container, anchor, parentComponent, <span class=\"code-literal\">null</span>, <span class=\"code-comment\">// fallback tree will not have suspense context</span>\n","                  isSVG, slotScopeIds, optimized);\n","                  setActiveBranch(suspense, fallbackVNode);\n","              };\n","              <span class=\"code-keyword\">const</span> delayEnter = fallbackVNode.transition &amp;&amp; fallbackVNode.transition.mode === <span class=\"code-string\">'out-in'</span>;\n","              <span class=\"code-keyword\">if</span> (delayEnter) {\n","                  activeBranch.transition.afterLeave = mountFallback;\n","              }\n","              suspense.isInFallback = <span class=\"code-literal\">true</span>;\n","              <span class=\"code-comment\">// unmount current active branch</span>\n","              unmount(activeBranch, parentComponent, <span class=\"code-literal\">null</span>, <span class=\"code-comment\">// no suspense so unmount hooks fire now</span>\n","              <span class=\"code-literal\">true</span> <span class=\"code-comment\">// shouldRemove</span>\n","              );\n","              <span class=\"code-keyword\">if</span> (!delayEnter) {\n","                  mountFallback();\n","              }\n","          },\n","          move(container, anchor, type) {\n","              suspense.activeBranch &amp;&amp;\n","                  move(suspense.activeBranch, container, anchor, type);\n","              suspense.container = container;\n","          },\n","          next() {\n","              <span class=\"code-keyword\">return</span> suspense.activeBranch &amp;&amp; next(suspense.activeBranch);\n","          },\n","          registerDep(instance, setupRenderEffect) {\n","              <span class=\"code-keyword\">const</span> isInPendingSuspense = !!suspense.pendingBranch;\n","              <span class=\"code-keyword\">if</span> (isInPendingSuspense) {\n","                  suspense.deps++;\n","              }\n","              <span class=\"code-keyword\">const</span> hydratedEl = instance.vnode.el;\n","              instance\n","                  .asyncDep.catch(<span class=\"code-function\"><span class=\"code-params\">err</span> =&gt;</span> {\n","                  handleError(err, instance, <span class=\"code-number\">0</span> <span class=\"code-comment\">/* ErrorCodes.SETUP_FUNCTION */</span>);\n","              })\n","                  .then(<span class=\"code-function\"><span class=\"code-params\">asyncSetupResult</span> =&gt;</span> {\n","                  <span class=\"code-comment\">// retry when the setup() promise resolves.</span>\n","                  <span class=\"code-comment\">// component may have been unmounted before resolve.</span>\n","                  <span class=\"code-keyword\">if</span> (instance.isUnmounted ||\n","                      suspense.isUnmounted ||\n","                      suspense.pendingId !== instance.suspenseId) {\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","                  <span class=\"code-comment\">// retry from this component</span>\n","                  instance.asyncResolved = <span class=\"code-literal\">true</span>;\n","                  <span class=\"code-keyword\">const</span> { vnode } = instance;\n","                  {\n","                      pushWarningContext(vnode);\n","                  }\n","                  handleSetupResult(instance, asyncSetupResult, <span class=\"code-literal\">false</span>);\n","                  <span class=\"code-keyword\">if</span> (hydratedEl) {\n","                      <span class=\"code-comment\">// vnode may have been replaced if an update happened before the</span>\n","                      <span class=\"code-comment\">// async dep is resolved.</span>\n","                      vnode.el = hydratedEl;\n","                  }\n","                  <span class=\"code-keyword\">const</span> placeholder = !hydratedEl &amp;&amp; instance.subTree.el;\n","                  setupRenderEffect(instance, vnode, \n","                  <span class=\"code-comment\">// component may have been moved before resolve.</span>\n","                  <span class=\"code-comment\">// if this is not a hydration, instance.subTree will be the comment</span>\n","                  <span class=\"code-comment\">// placeholder.</span>\n","                  parentNode(hydratedEl || instance.subTree.el), \n","                  <span class=\"code-comment\">// anchor will not be used if this is hydration, so only need to</span>\n","                  <span class=\"code-comment\">// consider the comment placeholder case.</span>\n","                  hydratedEl ? <span class=\"code-literal\">null</span> : next(instance.subTree), suspense, isSVG, optimized);\n","                  <span class=\"code-keyword\">if</span> (placeholder) {\n","                      remove(placeholder);\n","                  }\n","                  updateHOCHostEl(instance, vnode.el);\n","                  {\n","                      popWarningContext();\n","                  }\n","                  <span class=\"code-comment\">// only decrease deps count if suspense is not already resolved</span>\n","                  <span class=\"code-keyword\">if</span> (isInPendingSuspense &amp;&amp; --suspense.deps === <span class=\"code-number\">0</span>) {\n","                      suspense.resolve();\n","                  }\n","              });\n","          },\n","          unmount(parentSuspense, doRemove) {\n","              suspense.isUnmounted = <span class=\"code-literal\">true</span>;\n","              <span class=\"code-keyword\">if</span> (suspense.activeBranch) {\n","                  unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);\n","              }\n","              <span class=\"code-keyword\">if</span> (suspense.pendingBranch) {\n","                  unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);\n","              }\n","          }\n","      };\n","      <span class=\"code-keyword\">return</span> suspense;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">hydrateSuspense</span>(<span class=\"code-params\">node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode</span>) </span>{\n","      <span class=\"code-comment\">/* eslint-disable no-restricted-globals */</span>\n","      <span class=\"code-keyword\">const</span> suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, <span class=\"code-built_in\">document</span>.createElement(<span class=\"code-string\">'div'</span>), <span class=\"code-literal\">null</span>, isSVG, slotScopeIds, optimized, rendererInternals, <span class=\"code-literal\">true</span> <span class=\"code-comment\">/* hydrating */</span>));\n","      <span class=\"code-comment\">// there are two possible scenarios for server-rendered suspense:</span>\n","      <span class=\"code-comment\">// - success: ssr content should be fully resolved</span>\n","      <span class=\"code-comment\">// - failure: ssr content should be the fallback branch.</span>\n","      <span class=\"code-comment\">// however, on the client we don't really know if it has failed or not</span>\n","      <span class=\"code-comment\">// attempt to hydrate the DOM assuming it has succeeded, but we still</span>\n","      <span class=\"code-comment\">// need to construct a suspense boundary first</span>\n","      <span class=\"code-keyword\">const</span> result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);\n","      <span class=\"code-keyword\">if</span> (suspense.deps === <span class=\"code-number\">0</span>) {\n","          suspense.resolve();\n","      }\n","      <span class=\"code-keyword\">return</span> result;\n","      <span class=\"code-comment\">/* eslint-enable no-restricted-globals */</span>\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeSuspenseChildren</span>(<span class=\"code-params\">vnode</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { shapeFlag, children } = vnode;\n","      <span class=\"code-keyword\">const</span> isSlotChildren = shapeFlag &amp; <span class=\"code-number\">32</span> <span class=\"code-comment\">/* ShapeFlags.SLOTS_CHILDREN */</span>;\n","      vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);\n","      vnode.ssFallback = isSlotChildren\n","          ? normalizeSuspenseSlot(children.fallback)\n","          : createVNode(Comment);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeSuspenseSlot</span>(<span class=\"code-params\">s</span>) </span>{\n","      <span class=\"code-keyword\">let</span> block;\n","      <span class=\"code-keyword\">if</span> (isFunction(s)) {\n","          <span class=\"code-keyword\">const</span> trackBlock = isBlockTreeEnabled &amp;&amp; s._c;\n","          <span class=\"code-keyword\">if</span> (trackBlock) {\n","              <span class=\"code-comment\">// disableTracking: false</span>\n","              <span class=\"code-comment\">// allow block tracking for compiled slots</span>\n","              <span class=\"code-comment\">// (see ./componentRenderContext.ts)</span>\n","              s._d = <span class=\"code-literal\">false</span>;\n","              openBlock();\n","          }\n","          s = s();\n","          <span class=\"code-keyword\">if</span> (trackBlock) {\n","              s._d = <span class=\"code-literal\">true</span>;\n","              block = currentBlock;\n","              closeBlock();\n","          }\n","      }\n","      <span class=\"code-keyword\">if</span> (isArray(s)) {\n","          <span class=\"code-keyword\">const</span> singleChild = filterSingleRoot(s);\n","          <span class=\"code-keyword\">if</span> (!singleChild) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`&lt;Suspense&gt; slots expect a single root node.`</span>);\n","          }\n","          s = singleChild;\n","      }\n","      s = normalizeVNode(s);\n","      <span class=\"code-keyword\">if</span> (block &amp;&amp; !s.dynamicChildren) {\n","          s.dynamicChildren = block.filter(<span class=\"code-function\"><span class=\"code-params\">c</span> =&gt;</span> c !== s);\n","      }\n","      <span class=\"code-keyword\">return</span> s;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">queueEffectWithSuspense</span>(<span class=\"code-params\">fn, suspense</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (suspense &amp;&amp; suspense.pendingBranch) {\n","          <span class=\"code-keyword\">if</span> (isArray(fn)) {\n","              suspense.effects.push(...fn);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              suspense.effects.push(fn);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          queuePostFlushCb(fn);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">setActiveBranch</span>(<span class=\"code-params\">suspense, branch</span>) </span>{\n","      suspense.activeBranch = branch;\n","      <span class=\"code-keyword\">const</span> { vnode, parentComponent } = suspense;\n","      <span class=\"code-keyword\">const</span> el = (vnode.el = branch.el);\n","      <span class=\"code-comment\">// in case suspense is the root node of a component,</span>\n","      <span class=\"code-comment\">// recursively update the HOC el</span>\n","      <span class=\"code-keyword\">if</span> (parentComponent &amp;&amp; parentComponent.subTree === vnode) {\n","          parentComponent.vnode.el = el;\n","          updateHOCHostEl(parentComponent, el);\n","      }\n","  }\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">provide</span>(<span class=\"code-params\">key, value</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!currentInstance) {\n","          {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`provide() can only be used inside setup().`</span>);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">let</span> provides = currentInstance.provides;\n","          <span class=\"code-comment\">// by default an instance inherits its parent's provides object</span>\n","          <span class=\"code-comment\">// but when it needs to provide values of its own, it creates its</span>\n","          <span class=\"code-comment\">// own provides object using parent provides object as prototype.</span>\n","          <span class=\"code-comment\">// this way in `inject` we can simply look up injections from direct</span>\n","          <span class=\"code-comment\">// parent and let the prototype chain do the work.</span>\n","          <span class=\"code-keyword\">const</span> parentProvides = currentInstance.parent &amp;&amp; currentInstance.parent.provides;\n","          <span class=\"code-keyword\">if</span> (parentProvides === provides) {\n","              provides = currentInstance.provides = <span class=\"code-built_in\">Object</span>.create(parentProvides);\n","          }\n","          <span class=\"code-comment\">// TS doesn't allow symbol as index type</span>\n","          provides[key] = value;\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">inject</span>(<span class=\"code-params\">key, defaultValue, treatDefaultAsFactory = false</span>) </span>{\n","      <span class=\"code-comment\">// fallback to `currentRenderingInstance` so that this can be called in</span>\n","      <span class=\"code-comment\">// a functional component</span>\n","      <span class=\"code-keyword\">const</span> instance = currentInstance || currentRenderingInstance;\n","      <span class=\"code-keyword\">if</span> (instance) {\n","          <span class=\"code-comment\">// #2400</span>\n","          <span class=\"code-comment\">// to support `app.use` plugins,</span>\n","          <span class=\"code-comment\">// fallback to appContext's `provides` if the instance is at root</span>\n","          <span class=\"code-keyword\">const</span> provides = instance.parent == <span class=\"code-literal\">null</span>\n","              ? instance.vnode.appContext &amp;&amp; instance.vnode.appContext.provides\n","              : instance.parent.provides;\n","          <span class=\"code-keyword\">if</span> (provides &amp;&amp; key <span class=\"code-keyword\">in</span> provides) {\n","              <span class=\"code-comment\">// TS doesn't allow symbol as index type</span>\n","              <span class=\"code-keyword\">return</span> provides[key];\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (<span class=\"code-built_in\">arguments</span>.length &gt; <span class=\"code-number\">1</span>) {\n","              <span class=\"code-keyword\">return</span> treatDefaultAsFactory &amp;&amp; isFunction(defaultValue)\n","                  ? defaultValue.call(instance.proxy)\n","                  : defaultValue;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`injection \"<span class=\"code-subst\">${<span class=\"code-built_in\">String</span>(key)}</span>\" not found.`</span>);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`inject() can only be used inside setup() or functional components.`</span>);\n","      }\n","  }\n","\n","  <span class=\"code-comment\">// Simple effect.</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">watchEffect</span>(<span class=\"code-params\">effect, options</span>) </span>{\n","      <span class=\"code-keyword\">return</span> doWatch(effect, <span class=\"code-literal\">null</span>, options);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">watchPostEffect</span>(<span class=\"code-params\">effect, options</span>) </span>{\n","      <span class=\"code-keyword\">return</span> doWatch(effect, <span class=\"code-literal\">null</span>, (<span class=\"code-built_in\">Object</span>.assign(<span class=\"code-built_in\">Object</span>.assign({}, options), { <span class=\"code-attr\">flush</span>: <span class=\"code-string\">'post'</span> }) ));\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">watchSyncEffect</span>(<span class=\"code-params\">effect, options</span>) </span>{\n","      <span class=\"code-keyword\">return</span> doWatch(effect, <span class=\"code-literal\">null</span>, (<span class=\"code-built_in\">Object</span>.assign(<span class=\"code-built_in\">Object</span>.assign({}, options), { <span class=\"code-attr\">flush</span>: <span class=\"code-string\">'sync'</span> }) ));\n","  }\n","  <span class=\"code-comment\">// initial value for watchers to trigger on undefined initial values</span>\n","  <span class=\"code-keyword\">const</span> INITIAL_WATCHER_VALUE = {};\n","  <span class=\"code-comment\">// implementation</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">watch</span>(<span class=\"code-params\">source, cb, options</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!isFunction(cb)) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`\\`watch(fn, options?)\\` signature has been moved to a separate API. `</span> +\n","              <span class=\"code-string\">`Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only `</span> +\n","              <span class=\"code-string\">`supports \\`watch(source, cb, options?) signature.`</span>);\n","      }\n","      <span class=\"code-keyword\">return</span> doWatch(source, cb, options);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">doWatch</span>(<span class=\"code-params\">source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!cb) {\n","          <span class=\"code-keyword\">if</span> (immediate !== <span class=\"code-literal\">undefined</span>) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`watch() \"immediate\" option is only respected when using the `</span> +\n","                  <span class=\"code-string\">`watch(source, callback, options?) signature.`</span>);\n","          }\n","          <span class=\"code-keyword\">if</span> (deep !== <span class=\"code-literal\">undefined</span>) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`watch() \"deep\" option is only respected when using the `</span> +\n","                  <span class=\"code-string\">`watch(source, callback, options?) signature.`</span>);\n","          }\n","      }\n","      <span class=\"code-keyword\">const</span> warnInvalidSource = <span class=\"code-function\">(<span class=\"code-params\">s</span>) =&gt;</span> {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Invalid watch source: `</span>, s, <span class=\"code-string\">`A watch source can only be a getter/effect function, a ref, `</span> +\n","              <span class=\"code-string\">`a reactive object, or an array of these types.`</span>);\n","      };\n","      <span class=\"code-keyword\">const</span> instance = currentInstance;\n","      <span class=\"code-keyword\">let</span> getter;\n","      <span class=\"code-keyword\">let</span> forceTrigger = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">let</span> isMultiSource = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">if</span> (isRef(source)) {\n","          getter = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> source.value;\n","          forceTrigger = isShallow(source);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isReactive(source)) {\n","          getter = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> source;\n","          deep = <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isArray(source)) {\n","          isMultiSource = <span class=\"code-literal\">true</span>;\n","          forceTrigger = source.some(<span class=\"code-function\"><span class=\"code-params\">s</span> =&gt;</span> isReactive(s) || isShallow(s));\n","          getter = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> source.map(<span class=\"code-function\"><span class=\"code-params\">s</span> =&gt;</span> {\n","              <span class=\"code-keyword\">if</span> (isRef(s)) {\n","                  <span class=\"code-keyword\">return</span> s.value;\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isReactive(s)) {\n","                  <span class=\"code-keyword\">return</span> traverse(s);\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isFunction(s)) {\n","                  <span class=\"code-keyword\">return</span> callWithErrorHandling(s, instance, <span class=\"code-number\">2</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_GETTER */</span>);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  warnInvalidSource(s);\n","              }\n","          });\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isFunction(source)) {\n","          <span class=\"code-keyword\">if</span> (cb) {\n","              <span class=\"code-comment\">// getter with cb</span>\n","              getter = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> callWithErrorHandling(source, instance, <span class=\"code-number\">2</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_GETTER */</span>);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-comment\">// no cb -&gt; simple effect</span>\n","              getter = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                  <span class=\"code-keyword\">if</span> (instance &amp;&amp; instance.isUnmounted) {\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","                  <span class=\"code-keyword\">if</span> (cleanup) {\n","                      cleanup();\n","                  }\n","                  <span class=\"code-keyword\">return</span> callWithAsyncErrorHandling(source, instance, <span class=\"code-number\">3</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_CALLBACK */</span>, [onCleanup]);\n","              };\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          getter = NOOP;\n","          warnInvalidSource(source);\n","      }\n","      <span class=\"code-keyword\">if</span> (cb &amp;&amp; deep) {\n","          <span class=\"code-keyword\">const</span> baseGetter = getter;\n","          getter = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> traverse(baseGetter());\n","      }\n","      <span class=\"code-keyword\">let</span> cleanup;\n","      <span class=\"code-keyword\">let</span> onCleanup = <span class=\"code-function\">(<span class=\"code-params\">fn</span>) =&gt;</span> {\n","          cleanup = effect.onStop = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","              callWithErrorHandling(fn, instance, <span class=\"code-number\">4</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_CLEANUP */</span>);\n","          };\n","      };\n","      <span class=\"code-keyword\">let</span> oldValue = isMultiSource\n","          ? <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Array</span>(source.length).fill(INITIAL_WATCHER_VALUE)\n","          : INITIAL_WATCHER_VALUE;\n","      <span class=\"code-keyword\">const</span> job = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (!effect.active) {\n","              <span class=\"code-keyword\">return</span>;\n","          }\n","          <span class=\"code-keyword\">if</span> (cb) {\n","              <span class=\"code-comment\">// watch(source, cb)</span>\n","              <span class=\"code-keyword\">const</span> newValue = effect.run();\n","              <span class=\"code-keyword\">if</span> (deep ||\n","                  forceTrigger ||\n","                  (isMultiSource\n","                      ? newValue.some(<span class=\"code-function\">(<span class=\"code-params\">v, i</span>) =&gt;</span> hasChanged(v, oldValue[i]))\n","                      : hasChanged(newValue, oldValue)) ||\n","                  (<span class=\"code-literal\">false</span>  )) {\n","                  <span class=\"code-comment\">// cleanup before running cb again</span>\n","                  <span class=\"code-keyword\">if</span> (cleanup) {\n","                      cleanup();\n","                  }\n","                  callWithAsyncErrorHandling(cb, instance, <span class=\"code-number\">3</span> <span class=\"code-comment\">/* ErrorCodes.WATCH_CALLBACK */</span>, [\n","                      newValue,\n","                      <span class=\"code-comment\">// pass undefined as the old value when it's changed for the first time</span>\n","                      oldValue === INITIAL_WATCHER_VALUE\n","                          ? <span class=\"code-literal\">undefined</span>\n","                          : (isMultiSource &amp;&amp; oldValue[<span class=\"code-number\">0</span>] === INITIAL_WATCHER_VALUE)\n","                              ? []\n","                              : oldValue,\n","                      onCleanup\n","                  ]);\n","                  oldValue = newValue;\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-comment\">// watchEffect</span>\n","              effect.run();\n","          }\n","      };\n","      <span class=\"code-comment\">// important: mark the job as a watcher callback so that scheduler knows</span>\n","      <span class=\"code-comment\">// it is allowed to self-trigger (#1727)</span>\n","      job.allowRecurse = !!cb;\n","      <span class=\"code-keyword\">let</span> scheduler;\n","      <span class=\"code-keyword\">if</span> (flush === <span class=\"code-string\">'sync'</span>) {\n","          scheduler = job; <span class=\"code-comment\">// the scheduler function gets called directly</span>\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (flush === <span class=\"code-string\">'post'</span>) {\n","          scheduler = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> queuePostRenderEffect(job, instance &amp;&amp; instance.suspense);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// default: 'pre'</span>\n","          job.pre = <span class=\"code-literal\">true</span>;\n","          <span class=\"code-keyword\">if</span> (instance)\n","              job.id = instance.uid;\n","          scheduler = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> queueJob(job);\n","      }\n","      <span class=\"code-keyword\">const</span> effect = <span class=\"code-keyword\">new</span> ReactiveEffect(getter, scheduler);\n","      {\n","          effect.onTrack = onTrack;\n","          effect.onTrigger = onTrigger;\n","      }\n","      <span class=\"code-comment\">// initial run</span>\n","      <span class=\"code-keyword\">if</span> (cb) {\n","          <span class=\"code-keyword\">if</span> (immediate) {\n","              job();\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              oldValue = effect.run();\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (flush === <span class=\"code-string\">'post'</span>) {\n","          queuePostRenderEffect(effect.run.bind(effect), instance &amp;&amp; instance.suspense);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          effect.run();\n","      }\n","      <span class=\"code-keyword\">const</span> unwatch = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          effect.stop();\n","          <span class=\"code-keyword\">if</span> (instance &amp;&amp; instance.scope) {\n","              remove(instance.scope.effects, effect);\n","          }\n","      };\n","      <span class=\"code-keyword\">return</span> unwatch;\n","  }\n","  <span class=\"code-comment\">// this.$watch</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">instanceWatch</span>(<span class=\"code-params\">source, value, options</span>) </span>{\n","      <span class=\"code-keyword\">const</span> publicThis = <span class=\"code-keyword\">this</span>.proxy;\n","      <span class=\"code-keyword\">const</span> getter = isString(source)\n","          ? source.includes(<span class=\"code-string\">'.'</span>)\n","              ? createPathGetter(publicThis, source)\n","              : <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> publicThis[source]\n","          : source.bind(publicThis, publicThis);\n","      <span class=\"code-keyword\">let</span> cb;\n","      <span class=\"code-keyword\">if</span> (isFunction(value)) {\n","          cb = value;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          cb = value.handler;\n","          options = value;\n","      }\n","      <span class=\"code-keyword\">const</span> cur = currentInstance;\n","      setCurrentInstance(<span class=\"code-keyword\">this</span>);\n","      <span class=\"code-keyword\">const</span> res = doWatch(getter, cb.bind(publicThis), options);\n","      <span class=\"code-keyword\">if</span> (cur) {\n","          setCurrentInstance(cur);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          unsetCurrentInstance();\n","      }\n","      <span class=\"code-keyword\">return</span> res;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createPathGetter</span>(<span class=\"code-params\">ctx, path</span>) </span>{\n","      <span class=\"code-keyword\">const</span> segments = path.split(<span class=\"code-string\">'.'</span>);\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          <span class=\"code-keyword\">let</span> cur = ctx;\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; segments.length &amp;&amp; cur; i++) {\n","              cur = cur[segments[i]];\n","          }\n","          <span class=\"code-keyword\">return</span> cur;\n","      };\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">traverse</span>(<span class=\"code-params\">value, seen</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!isObject(value) || value[<span class=\"code-string\">\"__v_skip\"</span> <span class=\"code-comment\">/* ReactiveFlags.SKIP */</span>]) {\n","          <span class=\"code-keyword\">return</span> value;\n","      }\n","      seen = seen || <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>();\n","      <span class=\"code-keyword\">if</span> (seen.has(value)) {\n","          <span class=\"code-keyword\">return</span> value;\n","      }\n","      seen.add(value);\n","      <span class=\"code-keyword\">if</span> (isRef(value)) {\n","          traverse(value.value, seen);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isArray(value)) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; value.length; i++) {\n","              traverse(value[i], seen);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isSet(value) || isMap(value)) {\n","          value.forEach(<span class=\"code-function\">(<span class=\"code-params\">v</span>) =&gt;</span> {\n","              traverse(v, seen);\n","          });\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isPlainObject(value)) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> value) {\n","              traverse(value[key], seen);\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> value;\n","  }\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">useTransitionState</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">const</span> state = {\n","          isMounted: <span class=\"code-literal\">false</span>,\n","          isLeaving: <span class=\"code-literal\">false</span>,\n","          isUnmounting: <span class=\"code-literal\">false</span>,\n","          leavingVNodes: <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>()\n","      };\n","      onMounted(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          state.isMounted = <span class=\"code-literal\">true</span>;\n","      });\n","      onBeforeUnmount(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          state.isUnmounting = <span class=\"code-literal\">true</span>;\n","      });\n","      <span class=\"code-keyword\">return</span> state;\n","  }\n","  <span class=\"code-keyword\">const</span> TransitionHookValidator = [<span class=\"code-built_in\">Function</span>, <span class=\"code-built_in\">Array</span>];\n","  <span class=\"code-keyword\">const</span> BaseTransitionImpl = {\n","      name: <span class=\"code-string\">`BaseTransition`</span>,\n","      props: {\n","          mode: <span class=\"code-built_in\">String</span>,\n","          appear: <span class=\"code-built_in\">Boolean</span>,\n","          persisted: <span class=\"code-built_in\">Boolean</span>,\n","          <span class=\"code-comment\">// enter</span>\n","          onBeforeEnter: TransitionHookValidator,\n","          onEnter: TransitionHookValidator,\n","          onAfterEnter: TransitionHookValidator,\n","          onEnterCancelled: TransitionHookValidator,\n","          <span class=\"code-comment\">// leave</span>\n","          onBeforeLeave: TransitionHookValidator,\n","          onLeave: TransitionHookValidator,\n","          onAfterLeave: TransitionHookValidator,\n","          onLeaveCancelled: TransitionHookValidator,\n","          <span class=\"code-comment\">// appear</span>\n","          onBeforeAppear: TransitionHookValidator,\n","          onAppear: TransitionHookValidator,\n","          onAfterAppear: TransitionHookValidator,\n","          onAppearCancelled: TransitionHookValidator\n","      },\n","      setup(props, { slots }) {\n","          <span class=\"code-keyword\">const</span> instance = getCurrentInstance();\n","          <span class=\"code-keyword\">const</span> state = useTransitionState();\n","          <span class=\"code-keyword\">let</span> prevTransitionKey;\n","          <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","              <span class=\"code-keyword\">const</span> children = slots.default &amp;&amp; getTransitionRawChildren(slots.default(), <span class=\"code-literal\">true</span>);\n","              <span class=\"code-keyword\">if</span> (!children || !children.length) {\n","                  <span class=\"code-keyword\">return</span>;\n","              }\n","              <span class=\"code-keyword\">let</span> child = children[<span class=\"code-number\">0</span>];\n","              <span class=\"code-keyword\">if</span> (children.length &gt; <span class=\"code-number\">1</span>) {\n","                  <span class=\"code-keyword\">let</span> hasFound = <span class=\"code-literal\">false</span>;\n","                  <span class=\"code-comment\">// locate first non-comment child</span>\n","                  <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> c <span class=\"code-keyword\">of</span> children) {\n","                      <span class=\"code-keyword\">if</span> (c.type !== Comment) {\n","                          <span class=\"code-keyword\">if</span> (hasFound) {\n","                              <span class=\"code-comment\">// warn more than one non-comment child</span>\n","                              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">'&lt;transition&gt; can only be used on a single element or component. '</span> +\n","                                  <span class=\"code-string\">'Use &lt;transition-group&gt; for lists.'</span>);\n","                              <span class=\"code-keyword\">break</span>;\n","                          }\n","                          child = c;\n","                          hasFound = <span class=\"code-literal\">true</span>;\n","                      }\n","                  }\n","              }\n","              <span class=\"code-comment\">// there's no need to track reactivity for these props so use the raw</span>\n","              <span class=\"code-comment\">// props for a bit better perf</span>\n","              <span class=\"code-keyword\">const</span> rawProps = toRaw(props);\n","              <span class=\"code-keyword\">const</span> { mode } = rawProps;\n","              <span class=\"code-comment\">// check mode</span>\n","              <span class=\"code-keyword\">if</span> (mode &amp;&amp;\n","                  mode !== <span class=\"code-string\">'in-out'</span> &amp;&amp;\n","                  mode !== <span class=\"code-string\">'out-in'</span> &amp;&amp;\n","                  mode !== <span class=\"code-string\">'default'</span>) {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`invalid &lt;transition&gt; mode: <span class=\"code-subst\">${mode}</span>`</span>);\n","              }\n","              <span class=\"code-keyword\">if</span> (state.isLeaving) {\n","                  <span class=\"code-keyword\">return</span> emptyPlaceholder(child);\n","              }\n","              <span class=\"code-comment\">// in the case of &lt;transition&gt;&lt;keep-alive/&gt;&lt;/transition&gt;, we need to</span>\n","              <span class=\"code-comment\">// compare the type of the kept-alive children.</span>\n","              <span class=\"code-keyword\">const</span> innerChild = getKeepAliveChild(child);\n","              <span class=\"code-keyword\">if</span> (!innerChild) {\n","                  <span class=\"code-keyword\">return</span> emptyPlaceholder(child);\n","              }\n","              <span class=\"code-keyword\">const</span> enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);\n","              setTransitionHooks(innerChild, enterHooks);\n","              <span class=\"code-keyword\">const</span> oldChild = instance.subTree;\n","              <span class=\"code-keyword\">const</span> oldInnerChild = oldChild &amp;&amp; getKeepAliveChild(oldChild);\n","              <span class=\"code-keyword\">let</span> transitionKeyChanged = <span class=\"code-literal\">false</span>;\n","              <span class=\"code-keyword\">const</span> { getTransitionKey } = innerChild.type;\n","              <span class=\"code-keyword\">if</span> (getTransitionKey) {\n","                  <span class=\"code-keyword\">const</span> key = getTransitionKey();\n","                  <span class=\"code-keyword\">if</span> (prevTransitionKey === <span class=\"code-literal\">undefined</span>) {\n","                      prevTransitionKey = key;\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (key !== prevTransitionKey) {\n","                      prevTransitionKey = key;\n","                      transitionKeyChanged = <span class=\"code-literal\">true</span>;\n","                  }\n","              }\n","              <span class=\"code-comment\">// handle mode</span>\n","              <span class=\"code-keyword\">if</span> (oldInnerChild &amp;&amp;\n","                  oldInnerChild.type !== Comment &amp;&amp;\n","                  (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\n","                  <span class=\"code-keyword\">const</span> leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\n","                  <span class=\"code-comment\">// update old tree's hooks in case of dynamic transition</span>\n","                  setTransitionHooks(oldInnerChild, leavingHooks);\n","                  <span class=\"code-comment\">// switching between different views</span>\n","                  <span class=\"code-keyword\">if</span> (mode === <span class=\"code-string\">'out-in'</span>) {\n","                      state.isLeaving = <span class=\"code-literal\">true</span>;\n","                      <span class=\"code-comment\">// return placeholder node and queue update when leave finishes</span>\n","                      leavingHooks.afterLeave = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                          state.isLeaving = <span class=\"code-literal\">false</span>;\n","                          <span class=\"code-comment\">// #6835</span>\n","                          <span class=\"code-comment\">// it also needs to be updated when active is undefined</span>\n","                          <span class=\"code-keyword\">if</span> (instance.update.active !== <span class=\"code-literal\">false</span>) {\n","                              instance.update();\n","                          }\n","                      };\n","                      <span class=\"code-keyword\">return</span> emptyPlaceholder(child);\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (mode === <span class=\"code-string\">'in-out'</span> &amp;&amp; innerChild.type !== Comment) {\n","                      leavingHooks.delayLeave = <span class=\"code-function\">(<span class=\"code-params\">el, earlyRemove, delayedLeave</span>) =&gt;</span> {\n","                          <span class=\"code-keyword\">const</span> leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\n","                          leavingVNodesCache[<span class=\"code-built_in\">String</span>(oldInnerChild.key)] = oldInnerChild;\n","                          <span class=\"code-comment\">// early removal callback</span>\n","                          el._leaveCb = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                              earlyRemove();\n","                              el._leaveCb = <span class=\"code-literal\">undefined</span>;\n","                              <span class=\"code-keyword\">delete</span> enterHooks.delayedLeave;\n","                          };\n","                          enterHooks.delayedLeave = delayedLeave;\n","                      };\n","                  }\n","              }\n","              <span class=\"code-keyword\">return</span> child;\n","          };\n","      }\n","  };\n","  <span class=\"code-comment\">// export the public type for h/tsx inference</span>\n","  <span class=\"code-comment\">// also to avoid inline import() in generated d.ts files</span>\n","  <span class=\"code-keyword\">const</span> BaseTransition = BaseTransitionImpl;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getLeavingNodesForType</span>(<span class=\"code-params\">state, vnode</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { leavingVNodes } = state;\n","      <span class=\"code-keyword\">let</span> leavingVNodesCache = leavingVNodes.get(vnode.type);\n","      <span class=\"code-keyword\">if</span> (!leavingVNodesCache) {\n","          leavingVNodesCache = <span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>);\n","          leavingVNodes.set(vnode.type, leavingVNodesCache);\n","      }\n","      <span class=\"code-keyword\">return</span> leavingVNodesCache;\n","  }\n","  <span class=\"code-comment\">// The transition hooks are attached to the vnode as vnode.transition</span>\n","  <span class=\"code-comment\">// and will be called at appropriate timing in the renderer.</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolveTransitionHooks</span>(<span class=\"code-params\">vnode, props, state, instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { appear, mode, persisted = <span class=\"code-literal\">false</span>, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;\n","      <span class=\"code-keyword\">const</span> key = <span class=\"code-built_in\">String</span>(vnode.key);\n","      <span class=\"code-keyword\">const</span> leavingVNodesCache = getLeavingNodesForType(state, vnode);\n","      <span class=\"code-keyword\">const</span> callHook = <span class=\"code-function\">(<span class=\"code-params\">hook, args</span>) =&gt;</span> {\n","          hook &amp;&amp;\n","              callWithAsyncErrorHandling(hook, instance, <span class=\"code-number\">9</span> <span class=\"code-comment\">/* ErrorCodes.TRANSITION_HOOK */</span>, args);\n","      };\n","      <span class=\"code-keyword\">const</span> callAsyncHook = <span class=\"code-function\">(<span class=\"code-params\">hook, args</span>) =&gt;</span> {\n","          <span class=\"code-keyword\">const</span> done = args[<span class=\"code-number\">1</span>];\n","          callHook(hook, args);\n","          <span class=\"code-keyword\">if</span> (isArray(hook)) {\n","              <span class=\"code-keyword\">if</span> (hook.every(<span class=\"code-function\"><span class=\"code-params\">hook</span> =&gt;</span> hook.length &lt;= <span class=\"code-number\">1</span>))\n","                  done();\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (hook.length &lt;= <span class=\"code-number\">1</span>) {\n","              done();\n","          }\n","      };\n","      <span class=\"code-keyword\">const</span> hooks = {\n","          mode,\n","          persisted,\n","          beforeEnter(el) {\n","              <span class=\"code-keyword\">let</span> hook = onBeforeEnter;\n","              <span class=\"code-keyword\">if</span> (!state.isMounted) {\n","                  <span class=\"code-keyword\">if</span> (appear) {\n","                      hook = onBeforeAppear || onBeforeEnter;\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","              }\n","              <span class=\"code-comment\">// for same element (v-show)</span>\n","              <span class=\"code-keyword\">if</span> (el._leaveCb) {\n","                  el._leaveCb(<span class=\"code-literal\">true</span> <span class=\"code-comment\">/* cancelled */</span>);\n","              }\n","              <span class=\"code-comment\">// for toggled element with same key (v-if)</span>\n","              <span class=\"code-keyword\">const</span> leavingVNode = leavingVNodesCache[key];\n","              <span class=\"code-keyword\">if</span> (leavingVNode &amp;&amp;\n","                  isSameVNodeType(vnode, leavingVNode) &amp;&amp;\n","                  leavingVNode.el._leaveCb) {\n","                  <span class=\"code-comment\">// force early removal (not cancelled)</span>\n","                  leavingVNode.el._leaveCb();\n","              }\n","              callHook(hook, [el]);\n","          },\n","          enter(el) {\n","              <span class=\"code-keyword\">let</span> hook = onEnter;\n","              <span class=\"code-keyword\">let</span> afterHook = onAfterEnter;\n","              <span class=\"code-keyword\">let</span> cancelHook = onEnterCancelled;\n","              <span class=\"code-keyword\">if</span> (!state.isMounted) {\n","                  <span class=\"code-keyword\">if</span> (appear) {\n","                      hook = onAppear || onEnter;\n","                      afterHook = onAfterAppear || onAfterEnter;\n","                      cancelHook = onAppearCancelled || onEnterCancelled;\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","              }\n","              <span class=\"code-keyword\">let</span> called = <span class=\"code-literal\">false</span>;\n","              <span class=\"code-keyword\">const</span> done = <span class=\"code-function\">(<span class=\"code-params\">el._enterCb = (cancelled</span>) =&gt;</span> {\n","                  <span class=\"code-keyword\">if</span> (called)\n","                      <span class=\"code-keyword\">return</span>;\n","                  called = <span class=\"code-literal\">true</span>;\n","                  <span class=\"code-keyword\">if</span> (cancelled) {\n","                      callHook(cancelHook, [el]);\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      callHook(afterHook, [el]);\n","                  }\n","                  <span class=\"code-keyword\">if</span> (hooks.delayedLeave) {\n","                      hooks.delayedLeave();\n","                  }\n","                  el._enterCb = <span class=\"code-literal\">undefined</span>;\n","              });\n","              <span class=\"code-keyword\">if</span> (hook) {\n","                  callAsyncHook(hook, [el, done]);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  done();\n","              }\n","          },\n","          leave(el, remove) {\n","              <span class=\"code-keyword\">const</span> key = <span class=\"code-built_in\">String</span>(vnode.key);\n","              <span class=\"code-keyword\">if</span> (el._enterCb) {\n","                  el._enterCb(<span class=\"code-literal\">true</span> <span class=\"code-comment\">/* cancelled */</span>);\n","              }\n","              <span class=\"code-keyword\">if</span> (state.isUnmounting) {\n","                  <span class=\"code-keyword\">return</span> remove();\n","              }\n","              callHook(onBeforeLeave, [el]);\n","              <span class=\"code-keyword\">let</span> called = <span class=\"code-literal\">false</span>;\n","              <span class=\"code-keyword\">const</span> done = <span class=\"code-function\">(<span class=\"code-params\">el._leaveCb = (cancelled</span>) =&gt;</span> {\n","                  <span class=\"code-keyword\">if</span> (called)\n","                      <span class=\"code-keyword\">return</span>;\n","                  called = <span class=\"code-literal\">true</span>;\n","                  remove();\n","                  <span class=\"code-keyword\">if</span> (cancelled) {\n","                      callHook(onLeaveCancelled, [el]);\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      callHook(onAfterLeave, [el]);\n","                  }\n","                  el._leaveCb = <span class=\"code-literal\">undefined</span>;\n","                  <span class=\"code-keyword\">if</span> (leavingVNodesCache[key] === vnode) {\n","                      <span class=\"code-keyword\">delete</span> leavingVNodesCache[key];\n","                  }\n","              });\n","              leavingVNodesCache[key] = vnode;\n","              <span class=\"code-keyword\">if</span> (onLeave) {\n","                  callAsyncHook(onLeave, [el, done]);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  done();\n","              }\n","          },\n","          clone(vnode) {\n","              <span class=\"code-keyword\">return</span> resolveTransitionHooks(vnode, props, state, instance);\n","          }\n","      };\n","      <span class=\"code-keyword\">return</span> hooks;\n","  }\n","  <span class=\"code-comment\">// the placeholder really only handles one special case: KeepAlive</span>\n","  <span class=\"code-comment\">// in the case of a KeepAlive in a leave phase we need to return a KeepAlive</span>\n","  <span class=\"code-comment\">// placeholder with empty content to avoid the KeepAlive instance from being</span>\n","  <span class=\"code-comment\">// unmounted.</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">emptyPlaceholder</span>(<span class=\"code-params\">vnode</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isKeepAlive(vnode)) {\n","          vnode = cloneVNode(vnode);\n","          vnode.children = <span class=\"code-literal\">null</span>;\n","          <span class=\"code-keyword\">return</span> vnode;\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getKeepAliveChild</span>(<span class=\"code-params\">vnode</span>) </span>{\n","      <span class=\"code-keyword\">return</span> isKeepAlive(vnode)\n","          ? vnode.children\n","              ? vnode.children[<span class=\"code-number\">0</span>]\n","              : <span class=\"code-literal\">undefined</span>\n","          : vnode;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">setTransitionHooks</span>(<span class=\"code-params\">vnode, hooks</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (vnode.shapeFlag &amp; <span class=\"code-number\">6</span> <span class=\"code-comment\">/* ShapeFlags.COMPONENT */</span> &amp;&amp; vnode.component) {\n","          setTransitionHooks(vnode.component.subTree, hooks);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (vnode.shapeFlag &amp; <span class=\"code-number\">128</span> <span class=\"code-comment\">/* ShapeFlags.SUSPENSE */</span>) {\n","          vnode.ssContent.transition = hooks.clone(vnode.ssContent);\n","          vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          vnode.transition = hooks;\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getTransitionRawChildren</span>(<span class=\"code-params\">children, keepComment = false, parentKey</span>) </span>{\n","      <span class=\"code-keyword\">let</span> ret = [];\n","      <span class=\"code-keyword\">let</span> keyedFragmentCount = <span class=\"code-number\">0</span>;\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; children.length; i++) {\n","          <span class=\"code-keyword\">let</span> child = children[i];\n","          <span class=\"code-comment\">// #5360 inherit parent key in case of &lt;template v-for&gt;</span>\n","          <span class=\"code-keyword\">const</span> key = parentKey == <span class=\"code-literal\">null</span>\n","              ? child.key\n","              : <span class=\"code-built_in\">String</span>(parentKey) + <span class=\"code-built_in\">String</span>(child.key != <span class=\"code-literal\">null</span> ? child.key : i);\n","          <span class=\"code-comment\">// handle fragment children case, e.g. v-for</span>\n","          <span class=\"code-keyword\">if</span> (child.type === Fragment) {\n","              <span class=\"code-keyword\">if</span> (child.patchFlag &amp; <span class=\"code-number\">128</span> <span class=\"code-comment\">/* PatchFlags.KEYED_FRAGMENT */</span>)\n","                  keyedFragmentCount++;\n","              ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));\n","          }\n","          <span class=\"code-comment\">// comment placeholders should be skipped, e.g. v-if</span>\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (keepComment || child.type !== Comment) {\n","              ret.push(key != <span class=\"code-literal\">null</span> ? cloneVNode(child, { key }) : child);\n","          }\n","      }\n","      <span class=\"code-comment\">// #1126 if a transition children list contains multiple sub fragments, these</span>\n","      <span class=\"code-comment\">// fragments will be merged into a flat children array. Since each v-for</span>\n","      <span class=\"code-comment\">// fragment may contain different static bindings inside, we need to de-op</span>\n","      <span class=\"code-comment\">// these children to force full diffs to ensure correct behavior.</span>\n","      <span class=\"code-keyword\">if</span> (keyedFragmentCount &gt; <span class=\"code-number\">1</span>) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; ret.length; i++) {\n","              ret[i].patchFlag = <span class=\"code-number\">-2</span> <span class=\"code-comment\">/* PatchFlags.BAIL */</span>;\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> ret;\n","  }\n","\n","  <span class=\"code-comment\">// implementation, close to no-op</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">defineComponent</span>(<span class=\"code-params\">options</span>) </span>{\n","      <span class=\"code-keyword\">return</span> isFunction(options) ? { <span class=\"code-attr\">setup</span>: options, <span class=\"code-attr\">name</span>: options.name } : options;\n","  }\n","\n","  <span class=\"code-keyword\">const</span> isAsyncWrapper = <span class=\"code-function\">(<span class=\"code-params\">i</span>) =&gt;</span> !!i.type.__asyncLoader;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">defineAsyncComponent</span>(<span class=\"code-params\">source</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isFunction(source)) {\n","          source = { <span class=\"code-attr\">loader</span>: source };\n","      }\n","      <span class=\"code-keyword\">const</span> { loader, loadingComponent, errorComponent, delay = <span class=\"code-number\">200</span>, timeout, <span class=\"code-comment\">// undefined = never times out</span>\n","      suspensible = <span class=\"code-literal\">true</span>, <span class=\"code-attr\">onError</span>: userOnError } = source;\n","      <span class=\"code-keyword\">let</span> pendingRequest = <span class=\"code-literal\">null</span>;\n","      <span class=\"code-keyword\">let</span> resolvedComp;\n","      <span class=\"code-keyword\">let</span> retries = <span class=\"code-number\">0</span>;\n","      <span class=\"code-keyword\">const</span> retry = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          retries++;\n","          pendingRequest = <span class=\"code-literal\">null</span>;\n","          <span class=\"code-keyword\">return</span> load();\n","      };\n","      <span class=\"code-keyword\">const</span> load = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          <span class=\"code-keyword\">let</span> thisRequest;\n","          <span class=\"code-keyword\">return</span> (pendingRequest ||\n","              (thisRequest = pendingRequest =\n","                  loader()\n","                      .catch(<span class=\"code-function\"><span class=\"code-params\">err</span> =&gt;</span> {\n","                      err = err <span class=\"code-keyword\">instanceof</span> <span class=\"code-built_in\">Error</span> ? err : <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Error</span>(<span class=\"code-built_in\">String</span>(err));\n","                      <span class=\"code-keyword\">if</span> (userOnError) {\n","                          <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Promise</span>(<span class=\"code-function\">(<span class=\"code-params\">resolve, reject</span>) =&gt;</span> {\n","                              <span class=\"code-keyword\">const</span> userRetry = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> resolve(retry());\n","                              <span class=\"code-keyword\">const</span> userFail = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> reject(err);\n","                              userOnError(err, userRetry, userFail, retries + <span class=\"code-number\">1</span>);\n","                          });\n","                      }\n","                      <span class=\"code-keyword\">else</span> {\n","                          <span class=\"code-keyword\">throw</span> err;\n","                      }\n","                  })\n","                      .then(<span class=\"code-function\">(<span class=\"code-params\">comp</span>) =&gt;</span> {\n","                      <span class=\"code-keyword\">if</span> (thisRequest !== pendingRequest &amp;&amp; pendingRequest) {\n","                          <span class=\"code-keyword\">return</span> pendingRequest;\n","                      }\n","                      <span class=\"code-keyword\">if</span> (!comp) {\n","                          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Async component loader resolved to undefined. `</span> +\n","                              <span class=\"code-string\">`If you are using retry(), make sure to return its return value.`</span>);\n","                      }\n","                      <span class=\"code-comment\">// interop module default</span>\n","                      <span class=\"code-keyword\">if</span> (comp &amp;&amp;\n","                          (comp.__esModule || comp[<span class=\"code-built_in\">Symbol</span>.toStringTag] === <span class=\"code-string\">'Module'</span>)) {\n","                          comp = comp.default;\n","                      }\n","                      <span class=\"code-keyword\">if</span> (comp &amp;&amp; !isObject(comp) &amp;&amp; !isFunction(comp)) {\n","                          <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Error</span>(<span class=\"code-string\">`Invalid async component load result: <span class=\"code-subst\">${comp}</span>`</span>);\n","                      }\n","                      resolvedComp = comp;\n","                      <span class=\"code-keyword\">return</span> comp;\n","                  })));\n","      };\n","      <span class=\"code-keyword\">return</span> defineComponent({\n","          name: <span class=\"code-string\">'AsyncComponentWrapper'</span>,\n","          __asyncLoader: load,\n","          <span class=\"code-keyword\">get</span> __asyncResolved() {\n","              <span class=\"code-keyword\">return</span> resolvedComp;\n","          },\n","          setup() {\n","              <span class=\"code-keyword\">const</span> instance = currentInstance;\n","              <span class=\"code-comment\">// already resolved</span>\n","              <span class=\"code-keyword\">if</span> (resolvedComp) {\n","                  <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> createInnerComp(resolvedComp, instance);\n","              }\n","              <span class=\"code-keyword\">const</span> onError = <span class=\"code-function\">(<span class=\"code-params\">err</span>) =&gt;</span> {\n","                  pendingRequest = <span class=\"code-literal\">null</span>;\n","                  handleError(err, instance, <span class=\"code-number\">13</span> <span class=\"code-comment\">/* ErrorCodes.ASYNC_COMPONENT_LOADER */</span>, !errorComponent <span class=\"code-comment\">/* do not throw in dev if user provided error component */</span>);\n","              };\n","              <span class=\"code-comment\">// suspense-controlled or SSR.</span>\n","              <span class=\"code-keyword\">if</span> ((suspensible &amp;&amp; instance.suspense) ||\n","                  (<span class=\"code-literal\">false</span> )) {\n","                  <span class=\"code-keyword\">return</span> load()\n","                      .then(<span class=\"code-function\"><span class=\"code-params\">comp</span> =&gt;</span> {\n","                      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> createInnerComp(comp, instance);\n","                  })\n","                      .catch(<span class=\"code-function\"><span class=\"code-params\">err</span> =&gt;</span> {\n","                      onError(err);\n","                      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> errorComponent\n","                          ? createVNode(errorComponent, {\n","                              error: err\n","                          })\n","                          : <span class=\"code-literal\">null</span>;\n","                  });\n","              }\n","              <span class=\"code-keyword\">const</span> loaded = ref(<span class=\"code-literal\">false</span>);\n","              <span class=\"code-keyword\">const</span> error = ref();\n","              <span class=\"code-keyword\">const</span> delayed = ref(!!delay);\n","              <span class=\"code-keyword\">if</span> (delay) {\n","                  setTimeout(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                      delayed.value = <span class=\"code-literal\">false</span>;\n","                  }, delay);\n","              }\n","              <span class=\"code-keyword\">if</span> (timeout != <span class=\"code-literal\">null</span>) {\n","                  setTimeout(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                      <span class=\"code-keyword\">if</span> (!loaded.value &amp;&amp; !error.value) {\n","                          <span class=\"code-keyword\">const</span> err = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Error</span>(<span class=\"code-string\">`Async component timed out after <span class=\"code-subst\">${timeout}</span>ms.`</span>);\n","                          onError(err);\n","                          error.value = err;\n","                      }\n","                  }, timeout);\n","              }\n","              load()\n","                  .then(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                  loaded.value = <span class=\"code-literal\">true</span>;\n","                  <span class=\"code-keyword\">if</span> (instance.parent &amp;&amp; isKeepAlive(instance.parent.vnode)) {\n","                      <span class=\"code-comment\">// parent is keep-alive, force update so the loaded component's</span>\n","                      <span class=\"code-comment\">// name is taken into account</span>\n","                      queueJob(instance.parent.update);\n","                  }\n","              })\n","                  .catch(<span class=\"code-function\"><span class=\"code-params\">err</span> =&gt;</span> {\n","                  onError(err);\n","                  error.value = err;\n","              });\n","              <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                  <span class=\"code-keyword\">if</span> (loaded.value &amp;&amp; resolvedComp) {\n","                      <span class=\"code-keyword\">return</span> createInnerComp(resolvedComp, instance);\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (error.value &amp;&amp; errorComponent) {\n","                      <span class=\"code-keyword\">return</span> createVNode(errorComponent, {\n","                          error: error.value\n","                      });\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (loadingComponent &amp;&amp; !delayed.value) {\n","                      <span class=\"code-keyword\">return</span> createVNode(loadingComponent);\n","                  }\n","              };\n","          }\n","      });\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createInnerComp</span>(<span class=\"code-params\">comp, parent</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { ref, props, children, ce } = parent.vnode;\n","      <span class=\"code-keyword\">const</span> vnode = createVNode(comp, props, children);\n","      <span class=\"code-comment\">// ensure inner component inherits the async wrapper's ref owner</span>\n","      vnode.ref = ref;\n","      <span class=\"code-comment\">// pass the custom element callback on to the inner comp</span>\n","      <span class=\"code-comment\">// and remove it from the async wrapper</span>\n","      vnode.ce = ce;\n","      <span class=\"code-keyword\">delete</span> parent.vnode.ce;\n","      <span class=\"code-keyword\">return</span> vnode;\n","  }\n","\n","  <span class=\"code-keyword\">const</span> isKeepAlive = <span class=\"code-function\">(<span class=\"code-params\">vnode</span>) =&gt;</span> vnode.type.__isKeepAlive;\n","  <span class=\"code-keyword\">const</span> KeepAliveImpl = {\n","      name: <span class=\"code-string\">`KeepAlive`</span>,\n","      <span class=\"code-comment\">// Marker for special handling inside the renderer. We are not using a ===</span>\n","      <span class=\"code-comment\">// check directly on KeepAlive in the renderer, because importing it directly</span>\n","      <span class=\"code-comment\">// would prevent it from being tree-shaken.</span>\n","      __isKeepAlive: <span class=\"code-literal\">true</span>,\n","      props: {\n","          include: [<span class=\"code-built_in\">String</span>, <span class=\"code-built_in\">RegExp</span>, <span class=\"code-built_in\">Array</span>],\n","          exclude: [<span class=\"code-built_in\">String</span>, <span class=\"code-built_in\">RegExp</span>, <span class=\"code-built_in\">Array</span>],\n","          max: [<span class=\"code-built_in\">String</span>, <span class=\"code-built_in\">Number</span>]\n","      },\n","      setup(props, { slots }) {\n","          <span class=\"code-keyword\">const</span> instance = getCurrentInstance();\n","          <span class=\"code-comment\">// KeepAlive communicates with the instantiated renderer via the</span>\n","          <span class=\"code-comment\">// ctx where the renderer passes in its internals,</span>\n","          <span class=\"code-comment\">// and the KeepAlive instance exposes activate/deactivate implementations.</span>\n","          <span class=\"code-comment\">// The whole point of this is to avoid importing KeepAlive directly in the</span>\n","          <span class=\"code-comment\">// renderer to facilitate tree-shaking.</span>\n","          <span class=\"code-keyword\">const</span> sharedContext = instance.ctx;\n","          <span class=\"code-keyword\">const</span> cache = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Map</span>();\n","          <span class=\"code-keyword\">const</span> keys = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>();\n","          <span class=\"code-keyword\">let</span> current = <span class=\"code-literal\">null</span>;\n","          {\n","              instance.__v_cache = cache;\n","          }\n","          <span class=\"code-keyword\">const</span> parentSuspense = instance.suspense;\n","          <span class=\"code-keyword\">const</span> { <span class=\"code-attr\">renderer</span>: { <span class=\"code-attr\">p</span>: patch, <span class=\"code-attr\">m</span>: move, <span class=\"code-attr\">um</span>: _unmount, <span class=\"code-attr\">o</span>: { createElement } } } = sharedContext;\n","          <span class=\"code-keyword\">const</span> storageContainer = createElement(<span class=\"code-string\">'div'</span>);\n","          sharedContext.activate = <span class=\"code-function\">(<span class=\"code-params\">vnode, container, anchor, isSVG, optimized</span>) =&gt;</span> {\n","              <span class=\"code-keyword\">const</span> instance = vnode.component;\n","              move(vnode, container, anchor, <span class=\"code-number\">0</span> <span class=\"code-comment\">/* MoveType.ENTER */</span>, parentSuspense);\n","              <span class=\"code-comment\">// in case props have changed</span>\n","              patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);\n","              queuePostRenderEffect(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                  instance.isDeactivated = <span class=\"code-literal\">false</span>;\n","                  <span class=\"code-keyword\">if</span> (instance.a) {\n","                      invokeArrayFns(instance.a);\n","                  }\n","                  <span class=\"code-keyword\">const</span> vnodeHook = vnode.props &amp;&amp; vnode.props.onVnodeMounted;\n","                  <span class=\"code-keyword\">if</span> (vnodeHook) {\n","                      invokeVNodeHook(vnodeHook, instance.parent, vnode);\n","                  }\n","              }, parentSuspense);\n","              {\n","                  <span class=\"code-comment\">// Update components tree</span>\n","                  devtoolsComponentAdded(instance);\n","              }\n","          };\n","          sharedContext.deactivate = <span class=\"code-function\">(<span class=\"code-params\">vnode</span>) =&gt;</span> {\n","              <span class=\"code-keyword\">const</span> instance = vnode.component;\n","              move(vnode, storageContainer, <span class=\"code-literal\">null</span>, <span class=\"code-number\">1</span> <span class=\"code-comment\">/* MoveType.LEAVE */</span>, parentSuspense);\n","              queuePostRenderEffect(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","                  <span class=\"code-keyword\">if</span> (instance.da) {\n","                      invokeArrayFns(instance.da);\n","                  }\n","                  <span class=\"code-keyword\">const</span> vnodeHook = vnode.props &amp;&amp; vnode.props.onVnodeUnmounted;\n","                  <span class=\"code-keyword\">if</span> (vnodeHook) {\n","                      invokeVNodeHook(vnodeHook, instance.parent, vnode);\n","                  }\n","                  instance.isDeactivated = <span class=\"code-literal\">true</span>;\n","              }, parentSuspense);\n","              {\n","                  <span class=\"code-comment\">// Update components tree</span>\n","                  devtoolsComponentAdded(instance);\n","              }\n","          };\n","          <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">unmount</span>(<span class=\"code-params\">vnode</span>) </span>{\n","              <span class=\"code-comment\">// reset the shapeFlag so it can be properly unmounted</span>\n","              resetShapeFlag(vnode);\n","              _unmount(vnode, instance, parentSuspense, <span class=\"code-literal\">true</span>);\n","          }\n","          <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">pruneCache</span>(<span class=\"code-params\">filter</span>) </span>{\n","              cache.forEach(<span class=\"code-function\">(<span class=\"code-params\">vnode, key</span>) =&gt;</span> {\n","                  <span class=\"code-keyword\">const</span> name = getComponentName(vnode.type);\n","                  <span class=\"code-keyword\">if</span> (name &amp;&amp; (!filter || !filter(name))) {\n","                      pruneCacheEntry(key);\n","                  }\n","              });\n","          }\n","          <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">pruneCacheEntry</span>(<span class=\"code-params\">key</span>) </span>{\n","              <span class=\"code-keyword\">const</span> cached = cache.get(key);\n","              <span class=\"code-keyword\">if</span> (!current || cached.type !== current.type) {\n","                  unmount(cached);\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (current) {\n","                  <span class=\"code-comment\">// current active instance should no longer be kept-alive.</span>\n","                  <span class=\"code-comment\">// we can't unmount it now but it might be later, so reset its flag now.</span>\n","                  resetShapeFlag(current);\n","              }\n","              cache.delete(key);\n","              keys.delete(key);\n","          }\n","          <span class=\"code-comment\">// prune cache on include/exclude prop change</span>\n","          watch(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> [props.include, props.exclude], ([include, exclude]) =&gt; {\n","              include &amp;&amp; pruneCache(<span class=\"code-function\"><span class=\"code-params\">name</span> =&gt;</span> matches(include, name));\n","              exclude &amp;&amp; pruneCache(<span class=\"code-function\"><span class=\"code-params\">name</span> =&gt;</span> !matches(exclude, name));\n","          }, \n","          <span class=\"code-comment\">// prune post-render after `current` has been updated</span>\n","          { <span class=\"code-attr\">flush</span>: <span class=\"code-string\">'post'</span>, <span class=\"code-attr\">deep</span>: <span class=\"code-literal\">true</span> });\n","          <span class=\"code-comment\">// cache sub tree after render</span>\n","          <span class=\"code-keyword\">let</span> pendingCacheKey = <span class=\"code-literal\">null</span>;\n","          <span class=\"code-keyword\">const</span> cacheSubtree = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","              <span class=\"code-comment\">// fix #1621, the pendingCacheKey could be 0</span>\n","              <span class=\"code-keyword\">if</span> (pendingCacheKey != <span class=\"code-literal\">null</span>) {\n","                  cache.set(pendingCacheKey, getInnerChild(instance.subTree));\n","              }\n","          };\n","          onMounted(cacheSubtree);\n","          onUpdated(cacheSubtree);\n","          onBeforeUnmount(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","              cache.forEach(<span class=\"code-function\"><span class=\"code-params\">cached</span> =&gt;</span> {\n","                  <span class=\"code-keyword\">const</span> { subTree, suspense } = instance;\n","                  <span class=\"code-keyword\">const</span> vnode = getInnerChild(subTree);\n","                  <span class=\"code-keyword\">if</span> (cached.type === vnode.type) {\n","                      <span class=\"code-comment\">// current instance will be unmounted as part of keep-alive's unmount</span>\n","                      resetShapeFlag(vnode);\n","                      <span class=\"code-comment\">// but invoke its deactivated hook here</span>\n","                      <span class=\"code-keyword\">const</span> da = vnode.component.da;\n","                      da &amp;&amp; queuePostRenderEffect(da, suspense);\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","                  unmount(cached);\n","              });\n","          });\n","          <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","              pendingCacheKey = <span class=\"code-literal\">null</span>;\n","              <span class=\"code-keyword\">if</span> (!slots.default) {\n","                  <span class=\"code-keyword\">return</span> <span class=\"code-literal\">null</span>;\n","              }\n","              <span class=\"code-keyword\">const</span> children = slots.default();\n","              <span class=\"code-keyword\">const</span> rawVNode = children[<span class=\"code-number\">0</span>];\n","              <span class=\"code-keyword\">if</span> (children.length &gt; <span class=\"code-number\">1</span>) {\n","                  {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`KeepAlive should contain exactly one component child.`</span>);\n","                  }\n","                  current = <span class=\"code-literal\">null</span>;\n","                  <span class=\"code-keyword\">return</span> children;\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (!isVNode(rawVNode) ||\n","                  (!(rawVNode.shapeFlag &amp; <span class=\"code-number\">4</span> <span class=\"code-comment\">/* ShapeFlags.STATEFUL_COMPONENT */</span>) &amp;&amp;\n","                      !(rawVNode.shapeFlag &amp; <span class=\"code-number\">128</span> <span class=\"code-comment\">/* ShapeFlags.SUSPENSE */</span>))) {\n","                  current = <span class=\"code-literal\">null</span>;\n","                  <span class=\"code-keyword\">return</span> rawVNode;\n","              }\n","              <span class=\"code-keyword\">let</span> vnode = getInnerChild(rawVNode);\n","              <span class=\"code-keyword\">const</span> comp = vnode.type;\n","              <span class=\"code-comment\">// for async components, name check should be based in its loaded</span>\n","              <span class=\"code-comment\">// inner component if available</span>\n","              <span class=\"code-keyword\">const</span> name = getComponentName(isAsyncWrapper(vnode)\n","                  ? vnode.type.__asyncResolved || {}\n","                  : comp);\n","              <span class=\"code-keyword\">const</span> { include, exclude, max } = props;\n","              <span class=\"code-keyword\">if</span> ((include &amp;&amp; (!name || !matches(include, name))) ||\n","                  (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))) {\n","                  current = vnode;\n","                  <span class=\"code-keyword\">return</span> rawVNode;\n","              }\n","              <span class=\"code-keyword\">const</span> key = vnode.key == <span class=\"code-literal\">null</span> ? comp : vnode.key;\n","              <span class=\"code-keyword\">const</span> cachedVNode = cache.get(key);\n","              <span class=\"code-comment\">// clone vnode if it's reused because we are going to mutate it</span>\n","              <span class=\"code-keyword\">if</span> (vnode.el) {\n","                  vnode = cloneVNode(vnode);\n","                  <span class=\"code-keyword\">if</span> (rawVNode.shapeFlag &amp; <span class=\"code-number\">128</span> <span class=\"code-comment\">/* ShapeFlags.SUSPENSE */</span>) {\n","                      rawVNode.ssContent = vnode;\n","                  }\n","              }\n","              <span class=\"code-comment\">// #1513 it's possible for the returned vnode to be cloned due to attr</span>\n","              <span class=\"code-comment\">// fallthrough or scopeId, so the vnode here may not be the final vnode</span>\n","              <span class=\"code-comment\">// that is mounted. Instead of caching it directly, we store the pending</span>\n","              <span class=\"code-comment\">// key and cache `instance.subTree` (the normalized vnode) in</span>\n","              <span class=\"code-comment\">// beforeMount/beforeUpdate hooks.</span>\n","              pendingCacheKey = key;\n","              <span class=\"code-keyword\">if</span> (cachedVNode) {\n","                  <span class=\"code-comment\">// copy over mounted state</span>\n","                  vnode.el = cachedVNode.el;\n","                  vnode.component = cachedVNode.component;\n","                  <span class=\"code-keyword\">if</span> (vnode.transition) {\n","                      <span class=\"code-comment\">// recursively update transition hooks on subTree</span>\n","                      setTransitionHooks(vnode, vnode.transition);\n","                  }\n","                  <span class=\"code-comment\">// avoid vnode being mounted as fresh</span>\n","                  vnode.shapeFlag |= <span class=\"code-number\">512</span> <span class=\"code-comment\">/* ShapeFlags.COMPONENT_KEPT_ALIVE */</span>;\n","                  <span class=\"code-comment\">// make this key the freshest</span>\n","                  keys.delete(key);\n","                  keys.add(key);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  keys.add(key);\n","                  <span class=\"code-comment\">// prune oldest entry</span>\n","                  <span class=\"code-keyword\">if</span> (max &amp;&amp; keys.size &gt; <span class=\"code-built_in\">parseInt</span>(max, <span class=\"code-number\">10</span>)) {\n","                      pruneCacheEntry(keys.values().next().value);\n","                  }\n","              }\n","              <span class=\"code-comment\">// avoid vnode being unmounted</span>\n","              vnode.shapeFlag |= <span class=\"code-number\">256</span> <span class=\"code-comment\">/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */</span>;\n","              current = vnode;\n","              <span class=\"code-keyword\">return</span> isSuspense(rawVNode.type) ? rawVNode : vnode;\n","          };\n","      }\n","  };\n","  <span class=\"code-comment\">// export the public type for h/tsx inference</span>\n","  <span class=\"code-comment\">// also to avoid inline import() in generated d.ts files</span>\n","  <span class=\"code-keyword\">const</span> KeepAlive = KeepAliveImpl;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">matches</span>(<span class=\"code-params\">pattern, name</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isArray(pattern)) {\n","          <span class=\"code-keyword\">return</span> pattern.some(<span class=\"code-function\">(<span class=\"code-params\">p</span>) =&gt;</span> matches(p, name));\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isString(pattern)) {\n","          <span class=\"code-keyword\">return</span> pattern.split(<span class=\"code-string\">','</span>).includes(name);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (pattern.test) {\n","          <span class=\"code-keyword\">return</span> pattern.test(name);\n","      }\n","      <span class=\"code-comment\">/* istanbul ignore next */</span>\n","      <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">onActivated</span>(<span class=\"code-params\">hook, target</span>) </span>{\n","      registerKeepAliveHook(hook, <span class=\"code-string\">\"a\"</span> <span class=\"code-comment\">/* LifecycleHooks.ACTIVATED */</span>, target);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">onDeactivated</span>(<span class=\"code-params\">hook, target</span>) </span>{\n","      registerKeepAliveHook(hook, <span class=\"code-string\">\"da\"</span> <span class=\"code-comment\">/* LifecycleHooks.DEACTIVATED */</span>, target);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">registerKeepAliveHook</span>(<span class=\"code-params\">hook, type, target = currentInstance</span>) </span>{\n","      <span class=\"code-comment\">// cache the deactivate branch check wrapper for injected hooks so the same</span>\n","      <span class=\"code-comment\">// hook can be properly deduped by the scheduler. \"__wdc\" stands for \"with</span>\n","      <span class=\"code-comment\">// deactivation check\".</span>\n","      <span class=\"code-keyword\">const</span> wrappedHook = hook.__wdc ||\n","          (hook.__wdc = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","              <span class=\"code-comment\">// only fire the hook if the target instance is NOT in a deactivated branch.</span>\n","              <span class=\"code-keyword\">let</span> current = target;\n","              <span class=\"code-keyword\">while</span> (current) {\n","                  <span class=\"code-keyword\">if</span> (current.isDeactivated) {\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","                  current = current.parent;\n","              }\n","              <span class=\"code-keyword\">return</span> hook();\n","          });\n","      injectHook(type, wrappedHook, target);\n","      <span class=\"code-comment\">// In addition to registering it on the target instance, we walk up the parent</span>\n","      <span class=\"code-comment\">// chain and register it on all ancestor instances that are keep-alive roots.</span>\n","      <span class=\"code-comment\">// This avoids the need to walk the entire component tree when invoking these</span>\n","      <span class=\"code-comment\">// hooks, and more importantly, avoids the need to track child components in</span>\n","      <span class=\"code-comment\">// arrays.</span>\n","      <span class=\"code-keyword\">if</span> (target) {\n","          <span class=\"code-keyword\">let</span> current = target.parent;\n","          <span class=\"code-keyword\">while</span> (current &amp;&amp; current.parent) {\n","              <span class=\"code-keyword\">if</span> (isKeepAlive(current.parent.vnode)) {\n","                  injectToKeepAliveRoot(wrappedHook, type, target, current);\n","              }\n","              current = current.parent;\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">injectToKeepAliveRoot</span>(<span class=\"code-params\">hook, type, target, keepAliveRoot</span>) </span>{\n","      <span class=\"code-comment\">// injectHook wraps the original for error handling, so make sure to remove</span>\n","      <span class=\"code-comment\">// the wrapped version.</span>\n","      <span class=\"code-keyword\">const</span> injected = injectHook(type, hook, keepAliveRoot, <span class=\"code-literal\">true</span> <span class=\"code-comment\">/* prepend */</span>);\n","      onUnmounted(<span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> {\n","          remove(keepAliveRoot[type], injected);\n","      }, target);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resetShapeFlag</span>(<span class=\"code-params\">vnode</span>) </span>{\n","      <span class=\"code-comment\">// bitwise operations to remove keep alive flags</span>\n","      vnode.shapeFlag &amp;= ~<span class=\"code-number\">256</span> <span class=\"code-comment\">/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */</span>;\n","      vnode.shapeFlag &amp;= ~<span class=\"code-number\">512</span> <span class=\"code-comment\">/* ShapeFlags.COMPONENT_KEPT_ALIVE */</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getInnerChild</span>(<span class=\"code-params\">vnode</span>) </span>{\n","      <span class=\"code-keyword\">return</span> vnode.shapeFlag &amp; <span class=\"code-number\">128</span> <span class=\"code-comment\">/* ShapeFlags.SUSPENSE */</span> ? vnode.ssContent : vnode;\n","  }\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">injectHook</span>(<span class=\"code-params\">type, hook, target = currentInstance, prepend = false</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (target) {\n","          <span class=\"code-keyword\">const</span> hooks = target[type] || (target[type] = []);\n","          <span class=\"code-comment\">// cache the error handling wrapper for injected hooks so the same hook</span>\n","          <span class=\"code-comment\">// can be properly deduped by the scheduler. \"__weh\" stands for \"with error</span>\n","          <span class=\"code-comment\">// handling\".</span>\n","          <span class=\"code-keyword\">const</span> wrappedHook = hook.__weh ||\n","              (hook.__weh = <span class=\"code-function\">(<span class=\"code-params\">...args</span>) =&gt;</span> {\n","                  <span class=\"code-keyword\">if</span> (target.isUnmounted) {\n","                      <span class=\"code-keyword\">return</span>;\n","                  }\n","                  <span class=\"code-comment\">// disable tracking inside all lifecycle hooks</span>\n","                  <span class=\"code-comment\">// since they can potentially be called inside effects.</span>\n","                  pauseTracking();\n","                  <span class=\"code-comment\">// Set currentInstance during hook invocation.</span>\n","                  <span class=\"code-comment\">// This assumes the hook does not synchronously trigger other hooks, which</span>\n","                  <span class=\"code-comment\">// can only be false when the user does something really funky.</span>\n","                  setCurrentInstance(target);\n","                  <span class=\"code-keyword\">const</span> res = callWithAsyncErrorHandling(hook, target, type, args);\n","                  unsetCurrentInstance();\n","                  resetTracking();\n","                  <span class=\"code-keyword\">return</span> res;\n","              });\n","          <span class=\"code-keyword\">if</span> (prepend) {\n","              hooks.unshift(wrappedHook);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              hooks.push(wrappedHook);\n","          }\n","          <span class=\"code-keyword\">return</span> wrappedHook;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">const</span> apiName = toHandlerKey(ErrorTypeStrings[type].replace(<span class=\"code-regexp\">/ hook$/</span>, <span class=\"code-string\">''</span>));\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`<span class=\"code-subst\">${apiName}</span> is called when there is no active component instance to be `</span> +\n","              <span class=\"code-string\">`associated with. `</span> +\n","              <span class=\"code-string\">`Lifecycle injection APIs can only be used during execution of setup().`</span> +\n","              (<span class=\"code-string\">` If you are using async setup(), make sure to register lifecycle `</span> +\n","                      <span class=\"code-string\">`hooks before the first await statement.`</span>\n","                  ));\n","      }\n","  }\n","  <span class=\"code-keyword\">const</span> createHook = <span class=\"code-function\">(<span class=\"code-params\">lifecycle</span>) =&gt;</span> <span class=\"code-function\">(<span class=\"code-params\">hook, target = currentInstance</span>) =&gt;</span> \n","  <span class=\"code-comment\">// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)</span>\n","  (!isInSSRComponentSetup || lifecycle === <span class=\"code-string\">\"sp\"</span> <span class=\"code-comment\">/* LifecycleHooks.SERVER_PREFETCH */</span>) &amp;&amp;\n","      injectHook(lifecycle, (...args) =&gt; hook(...args), target);\n","  <span class=\"code-keyword\">const</span> onBeforeMount = createHook(<span class=\"code-string\">\"bm\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_MOUNT */</span>);\n","  <span class=\"code-keyword\">const</span> onMounted = createHook(<span class=\"code-string\">\"m\"</span> <span class=\"code-comment\">/* LifecycleHooks.MOUNTED */</span>);\n","  <span class=\"code-keyword\">const</span> onBeforeUpdate = createHook(<span class=\"code-string\">\"bu\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_UPDATE */</span>);\n","  <span class=\"code-keyword\">const</span> onUpdated = createHook(<span class=\"code-string\">\"u\"</span> <span class=\"code-comment\">/* LifecycleHooks.UPDATED */</span>);\n","  <span class=\"code-keyword\">const</span> onBeforeUnmount = createHook(<span class=\"code-string\">\"bum\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_UNMOUNT */</span>);\n","  <span class=\"code-keyword\">const</span> onUnmounted = createHook(<span class=\"code-string\">\"um\"</span> <span class=\"code-comment\">/* LifecycleHooks.UNMOUNTED */</span>);\n","  <span class=\"code-keyword\">const</span> onServerPrefetch = createHook(<span class=\"code-string\">\"sp\"</span> <span class=\"code-comment\">/* LifecycleHooks.SERVER_PREFETCH */</span>);\n","  <span class=\"code-keyword\">const</span> onRenderTriggered = createHook(<span class=\"code-string\">\"rtg\"</span> <span class=\"code-comment\">/* LifecycleHooks.RENDER_TRIGGERED */</span>);\n","  <span class=\"code-keyword\">const</span> onRenderTracked = createHook(<span class=\"code-string\">\"rtc\"</span> <span class=\"code-comment\">/* LifecycleHooks.RENDER_TRACKED */</span>);\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">onErrorCaptured</span>(<span class=\"code-params\">hook, target = currentInstance</span>) </span>{\n","      injectHook(<span class=\"code-string\">\"ec\"</span> <span class=\"code-comment\">/* LifecycleHooks.ERROR_CAPTURED */</span>, hook, target);\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">  Runtime helper for applying directives to a vnode. Example usage:\n</span>","<span class=\"code-comment\">\n</span>","<span class=\"code-comment\">  const comp = resolveComponent('comp')\n</span>","<span class=\"code-comment\">  const foo = resolveDirective('foo')\n</span>","<span class=\"code-comment\">  const bar = resolveDirective('bar')\n</span>","<span class=\"code-comment\">\n</span>","<span class=\"code-comment\">  return withDirectives(h(comp), [\n</span>","<span class=\"code-comment\">    [foo, this.x],\n</span>","<span class=\"code-comment\">    [bar, this.y]\n</span>","<span class=\"code-comment\">  ])\n</span>","<span class=\"code-comment\">  */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">validateDirectiveName</span>(<span class=\"code-params\">name</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isBuiltInDirective(name)) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">'Do not use built-in directive ids as custom directive id: '</span> + name);\n","      }\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Adds directives to a VNode.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">withDirectives</span>(<span class=\"code-params\">vnode, directives</span>) </span>{\n","      <span class=\"code-keyword\">const</span> internalInstance = currentRenderingInstance;\n","      <span class=\"code-keyword\">if</span> (internalInstance === <span class=\"code-literal\">null</span>) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`withDirectives can only be used inside render functions.`</span>);\n","          <span class=\"code-keyword\">return</span> vnode;\n","      }\n","      <span class=\"code-keyword\">const</span> instance = getExposeProxy(internalInstance) ||\n","          internalInstance.proxy;\n","      <span class=\"code-keyword\">const</span> bindings = vnode.dirs || (vnode.dirs = []);\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; directives.length; i++) {\n","          <span class=\"code-keyword\">let</span> [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];\n","          <span class=\"code-keyword\">if</span> (dir) {\n","              <span class=\"code-keyword\">if</span> (isFunction(dir)) {\n","                  dir = {\n","                      mounted: dir,\n","                      updated: dir\n","                  };\n","              }\n","              <span class=\"code-keyword\">if</span> (dir.deep) {\n","                  traverse(value);\n","              }\n","              bindings.push({\n","                  dir,\n","                  instance,\n","                  value,\n","                  oldValue: <span class=\"code-keyword\">void</span> <span class=\"code-number\">0</span>,\n","                  arg,\n","                  modifiers\n","              });\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> vnode;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">invokeDirectiveHook</span>(<span class=\"code-params\">vnode, prevVNode, instance, name</span>) </span>{\n","      <span class=\"code-keyword\">const</span> bindings = vnode.dirs;\n","      <span class=\"code-keyword\">const</span> oldBindings = prevVNode &amp;&amp; prevVNode.dirs;\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; bindings.length; i++) {\n","          <span class=\"code-keyword\">const</span> binding = bindings[i];\n","          <span class=\"code-keyword\">if</span> (oldBindings) {\n","              binding.oldValue = oldBindings[i].value;\n","          }\n","          <span class=\"code-keyword\">let</span> hook = binding.dir[name];\n","          <span class=\"code-keyword\">if</span> (hook) {\n","              <span class=\"code-comment\">// disable tracking inside all lifecycle hooks</span>\n","              <span class=\"code-comment\">// since they can potentially be called inside effects.</span>\n","              pauseTracking();\n","              callWithAsyncErrorHandling(hook, instance, <span class=\"code-number\">8</span> <span class=\"code-comment\">/* ErrorCodes.DIRECTIVE_HOOK */</span>, [\n","                  vnode.el,\n","                  binding,\n","                  vnode,\n","                  prevVNode\n","              ]);\n","              resetTracking();\n","          }\n","      }\n","  }\n","\n","  <span class=\"code-keyword\">const</span> COMPONENTS = <span class=\"code-string\">'components'</span>;\n","  <span class=\"code-keyword\">const</span> DIRECTIVES = <span class=\"code-string\">'directives'</span>;\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolveComponent</span>(<span class=\"code-params\">name, maybeSelfReference</span>) </span>{\n","      <span class=\"code-keyword\">return</span> resolveAsset(COMPONENTS, name, <span class=\"code-literal\">true</span>, maybeSelfReference) || name;\n","  }\n","  <span class=\"code-keyword\">const</span> NULL_DYNAMIC_COMPONENT = <span class=\"code-built_in\">Symbol</span>();\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolveDynamicComponent</span>(<span class=\"code-params\">component</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isString(component)) {\n","          <span class=\"code-keyword\">return</span> resolveAsset(COMPONENTS, component, <span class=\"code-literal\">false</span>) || component;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// invalid types will fallthrough to createVNode and raise warning</span>\n","          <span class=\"code-keyword\">return</span> (component || NULL_DYNAMIC_COMPONENT);\n","      }\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolveDirective</span>(<span class=\"code-params\">name</span>) </span>{\n","      <span class=\"code-keyword\">return</span> resolveAsset(DIRECTIVES, name);\n","  }\n","  <span class=\"code-comment\">// implementation</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolveAsset</span>(<span class=\"code-params\">type, name, warnMissing = true, maybeSelfReference = false</span>) </span>{\n","      <span class=\"code-keyword\">const</span> instance = currentRenderingInstance || currentInstance;\n","      <span class=\"code-keyword\">if</span> (instance) {\n","          <span class=\"code-keyword\">const</span> Component = instance.type;\n","          <span class=\"code-comment\">// explicit self name has highest priority</span>\n","          <span class=\"code-keyword\">if</span> (type === COMPONENTS) {\n","              <span class=\"code-keyword\">const</span> selfName = getComponentName(Component, <span class=\"code-literal\">false</span> <span class=\"code-comment\">/* do not include inferred name to avoid breaking existing code */</span>);\n","              <span class=\"code-keyword\">if</span> (selfName &amp;&amp;\n","                  (selfName === name ||\n","                      selfName === camelize(name) ||\n","                      selfName === capitalize(camelize(name)))) {\n","                  <span class=\"code-keyword\">return</span> Component;\n","              }\n","          }\n","          <span class=\"code-keyword\">const</span> res = \n","          <span class=\"code-comment\">// local registration</span>\n","          <span class=\"code-comment\">// check instance[type] first which is resolved for options API</span>\n","          resolve(instance[type] || Component[type], name) ||\n","              <span class=\"code-comment\">// global registration</span>\n","              resolve(instance.appContext[type], name);\n","          <span class=\"code-keyword\">if</span> (!res &amp;&amp; maybeSelfReference) {\n","              <span class=\"code-comment\">// fallback to implicit self-reference</span>\n","              <span class=\"code-keyword\">return</span> Component;\n","          }\n","          <span class=\"code-keyword\">if</span> (warnMissing &amp;&amp; !res) {\n","              <span class=\"code-keyword\">const</span> extra = type === COMPONENTS\n","                  ? <span class=\"code-string\">`\\nIf this is a native custom element, make sure to exclude it from `</span> +\n","                      <span class=\"code-string\">`component resolution via compilerOptions.isCustomElement.`</span>\n","                  : <span class=\"code-string\">``</span>;\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Failed to resolve <span class=\"code-subst\">${type.slice(<span class=\"code-number\">0</span>, <span class=\"code-number\">-1</span>)}</span>: <span class=\"code-subst\">${name}</span><span class=\"code-subst\">${extra}</span>`</span>);\n","          }\n","          <span class=\"code-keyword\">return</span> res;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`resolve<span class=\"code-subst\">${capitalize(type.slice(<span class=\"code-number\">0</span>, <span class=\"code-number\">-1</span>))}</span> `</span> +\n","              <span class=\"code-string\">`can only be used in render() or setup().`</span>);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolve</span>(<span class=\"code-params\">registry, name</span>) </span>{\n","      <span class=\"code-keyword\">return</span> (registry &amp;&amp;\n","          (registry[name] ||\n","              registry[camelize(name)] ||\n","              registry[capitalize(camelize(name))]));\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Actual implementation\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">renderList</span>(<span class=\"code-params\">source, renderItem, cache, index</span>) </span>{\n","      <span class=\"code-keyword\">let</span> ret;\n","      <span class=\"code-keyword\">const</span> cached = (cache &amp;&amp; cache[index]);\n","      <span class=\"code-keyword\">if</span> (isArray(source) || isString(source)) {\n","          ret = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Array</span>(source.length);\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>, l = source.length; i &lt; l; i++) {\n","              ret[i] = renderItem(source[i], i, <span class=\"code-literal\">undefined</span>, cached &amp;&amp; cached[i]);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">typeof</span> source === <span class=\"code-string\">'number'</span>) {\n","          <span class=\"code-keyword\">if</span> (!<span class=\"code-built_in\">Number</span>.isInteger(source)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`The v-for range expect an integer value but got <span class=\"code-subst\">${source}</span>.`</span>);\n","          }\n","          ret = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Array</span>(source);\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; source; i++) {\n","              ret[i] = renderItem(i + <span class=\"code-number\">1</span>, i, <span class=\"code-literal\">undefined</span>, cached &amp;&amp; cached[i]);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isObject(source)) {\n","          <span class=\"code-keyword\">if</span> (source[<span class=\"code-built_in\">Symbol</span>.iterator]) {\n","              ret = <span class=\"code-built_in\">Array</span>.from(source, (item, i) =&gt; renderItem(item, i, <span class=\"code-literal\">undefined</span>, cached &amp;&amp; cached[i]));\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-keyword\">const</span> keys = <span class=\"code-built_in\">Object</span>.keys(source);\n","              ret = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Array</span>(keys.length);\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>, l = keys.length; i &lt; l; i++) {\n","                  <span class=\"code-keyword\">const</span> key = keys[i];\n","                  ret[i] = renderItem(source[key], key, i, cached &amp;&amp; cached[i]);\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          ret = [];\n","      }\n","      <span class=\"code-keyword\">if</span> (cache) {\n","          cache[index] = ret;\n","      }\n","      <span class=\"code-keyword\">return</span> ret;\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Compiler runtime helper for creating dynamic slots object\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createSlots</span>(<span class=\"code-params\">slots, dynamicSlots</span>) </span>{\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; dynamicSlots.length; i++) {\n","          <span class=\"code-keyword\">const</span> slot = dynamicSlots[i];\n","          <span class=\"code-comment\">// array of dynamic slot generated by &lt;template v-for=\"...\" #[...]&gt;</span>\n","          <span class=\"code-keyword\">if</span> (isArray(slot)) {\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> j = <span class=\"code-number\">0</span>; j &lt; slot.length; j++) {\n","                  slots[slot[j].name] = slot[j].fn;\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (slot) {\n","              <span class=\"code-comment\">// conditional single slot generated by &lt;template v-if=\"...\" #foo&gt;</span>\n","              slots[slot.name] = slot.key\n","                  ? <span class=\"code-function\">(<span class=\"code-params\">...args</span>) =&gt;</span> {\n","                      <span class=\"code-keyword\">const</span> res = slot.fn(...args);\n","                      <span class=\"code-comment\">// attach branch key so each conditional branch is considered a</span>\n","                      <span class=\"code-comment\">// different fragment</span>\n","                      <span class=\"code-keyword\">if</span> (res)\n","                          res.key = slot.key;\n","                      <span class=\"code-keyword\">return</span> res;\n","                  }\n","                  : slot.fn;\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> slots;\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Compiler runtime helper for rendering `&lt;slot/&gt;`\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">renderSlot</span>(<span class=\"code-params\">slots, name, props = {}, \n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  <span class=\"code-regexp\">//</span> this is not a user-facing function, so the fallback is always generated by\n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  <span class=\"code-regexp\">//</span> the compiler and guaranteed to be a function returning an array\n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  fallback, noSlotted</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (currentRenderingInstance.isCE ||\n","          (currentRenderingInstance.parent &amp;&amp;\n","              isAsyncWrapper(currentRenderingInstance.parent) &amp;&amp;\n","              currentRenderingInstance.parent.isCE)) {\n","          <span class=\"code-keyword\">if</span> (name !== <span class=\"code-string\">'default'</span>)\n","              props.name = name;\n","          <span class=\"code-keyword\">return</span> createVNode(<span class=\"code-string\">'slot'</span>, props, fallback &amp;&amp; fallback());\n","      }\n","      <span class=\"code-keyword\">let</span> slot = slots[name];\n","      <span class=\"code-keyword\">if</span> (slot &amp;&amp; slot.length &gt; <span class=\"code-number\">1</span>) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`SSR-optimized slot function detected in a non-SSR-optimized render `</span> +\n","              <span class=\"code-string\">`function. You need to mark this component with $dynamic-slots in the `</span> +\n","              <span class=\"code-string\">`parent template.`</span>);\n","          slot = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> [];\n","      }\n","      <span class=\"code-comment\">// a compiled slot disables block tracking by default to avoid manual</span>\n","      <span class=\"code-comment\">// invocation interfering with template-based block tracking, but in</span>\n","      <span class=\"code-comment\">// `renderSlot` we can be sure that it's template-based so we can force</span>\n","      <span class=\"code-comment\">// enable it.</span>\n","      <span class=\"code-keyword\">if</span> (slot &amp;&amp; slot._c) {\n","          slot._d = <span class=\"code-literal\">false</span>;\n","      }\n","      openBlock();\n","      <span class=\"code-keyword\">const</span> validSlotContent = slot &amp;&amp; ensureValidVNode(slot(props));\n","      <span class=\"code-keyword\">const</span> rendered = createBlock(Fragment, {\n","          key: props.key ||\n","              <span class=\"code-comment\">// slot content array of a dynamic conditional slot may have a branch</span>\n","              <span class=\"code-comment\">// key attached in the `createSlots` helper, respect that</span>\n","              (validSlotContent &amp;&amp; validSlotContent.key) ||\n","              <span class=\"code-string\">`_<span class=\"code-subst\">${name}</span>`</span>\n","      }, validSlotContent || (fallback ? fallback() : []), validSlotContent &amp;&amp; slots._ === <span class=\"code-number\">1</span> <span class=\"code-comment\">/* SlotFlags.STABLE */</span>\n","          ? <span class=\"code-number\">64</span> <span class=\"code-comment\">/* PatchFlags.STABLE_FRAGMENT */</span>\n","          : <span class=\"code-number\">-2</span> <span class=\"code-comment\">/* PatchFlags.BAIL */</span>);\n","      <span class=\"code-keyword\">if</span> (!noSlotted &amp;&amp; rendered.scopeId) {\n","          rendered.slotScopeIds = [rendered.scopeId + <span class=\"code-string\">'-s'</span>];\n","      }\n","      <span class=\"code-keyword\">if</span> (slot &amp;&amp; slot._c) {\n","          slot._d = <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-keyword\">return</span> rendered;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">ensureValidVNode</span>(<span class=\"code-params\">vnodes</span>) </span>{\n","      <span class=\"code-keyword\">return</span> vnodes.some(<span class=\"code-function\"><span class=\"code-params\">child</span> =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (!isVNode(child))\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          <span class=\"code-keyword\">if</span> (child.type === Comment)\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          <span class=\"code-keyword\">if</span> (child.type === Fragment &amp;&amp;\n","              !ensureValidVNode(child.children))\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      })\n","          ? vnodes\n","          : <span class=\"code-literal\">null</span>;\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * For prefixing keys in v-on=\"obj\" with \"on\"\n</span>","<span class=\"code-comment\">   * @private\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">toHandlers</span>(<span class=\"code-params\">obj, preserveCaseIfNecessary</span>) </span>{\n","      <span class=\"code-keyword\">const</span> ret = {};\n","      <span class=\"code-keyword\">if</span> (!isObject(obj)) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`v-on with no argument expects an object value.`</span>);\n","          <span class=\"code-keyword\">return</span> ret;\n","      }\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> obj) {\n","          ret[preserveCaseIfNecessary &amp;&amp; <span class=\"code-regexp\">/[A-Z]/</span>.test(key)\n","              ? <span class=\"code-string\">`on:<span class=\"code-subst\">${key}</span>`</span>\n","              : toHandlerKey(key)] = obj[key];\n","      }\n","      <span class=\"code-keyword\">return</span> ret;\n","  }\n","\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * #2437 In Vue 3, functional components do not have a public instance proxy but\n</span>","<span class=\"code-comment\">   * they exist in the internal parent chain. For code that relies on traversing\n</span>","<span class=\"code-comment\">   * public $parent chains, skip functional ones and go to the parent instead.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-keyword\">const</span> getPublicInstance = <span class=\"code-function\">(<span class=\"code-params\">i</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">if</span> (!i)\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">null</span>;\n","      <span class=\"code-keyword\">if</span> (isStatefulComponent(i))\n","          <span class=\"code-keyword\">return</span> getExposeProxy(i) || i.proxy;\n","      <span class=\"code-keyword\">return</span> getPublicInstance(i.parent);\n","  };\n","  <span class=\"code-keyword\">const</span> publicPropertiesMap = \n","  <span class=\"code-comment\">// Move PURE marker to new line to workaround compiler discarding it</span>\n","  <span class=\"code-comment\">// due to type annotation</span>\n","  <span class=\"code-comment\">/*#__PURE__*/</span> extend(<span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>), {\n","      $: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> i,\n","      $el: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> i.vnode.el,\n","      $data: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> i.data,\n","      $props: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> (shallowReadonly(i.props) ),\n","      $attrs: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> (shallowReadonly(i.attrs) ),\n","      $slots: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> (shallowReadonly(i.slots) ),\n","      $refs: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> (shallowReadonly(i.refs) ),\n","      $parent: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> getPublicInstance(i.parent),\n","      $root: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> getPublicInstance(i.root),\n","      $emit: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> i.emit,\n","      $options: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> (resolveMergedOptions(i) ),\n","      $forceUpdate: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> i.f || <span class=\"code-function\">(<span class=\"code-params\">i.f = (</span>) =&gt;</span> queueJob(i.update)),\n","      $nextTick: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> i.n || (i.n = nextTick.bind(i.proxy)),\n","      $watch: <span class=\"code-function\"><span class=\"code-params\">i</span> =&gt;</span> (instanceWatch.bind(i) )\n","  });\n","  <span class=\"code-keyword\">const</span> isReservedPrefix = <span class=\"code-function\">(<span class=\"code-params\">key</span>) =&gt;</span> key === <span class=\"code-string\">'_'</span> || key === <span class=\"code-string\">'$'</span>;\n","  <span class=\"code-keyword\">const</span> hasSetupBinding = <span class=\"code-function\">(<span class=\"code-params\">state, key</span>) =&gt;</span> state !== EMPTY_OBJ &amp;&amp; !state.__isScriptSetup &amp;&amp; hasOwn(state, key);\n","  <span class=\"code-keyword\">const</span> PublicInstanceProxyHandlers = {\n","      <span class=\"code-keyword\">get</span>({ _: instance }, key) {\n","          <span class=\"code-keyword\">const</span> { ctx, setupState, data, props, accessCache, type, appContext } = instance;\n","          <span class=\"code-comment\">// for internal formatters to know that this is a Vue instance</span>\n","          <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">'__isVue'</span>) {\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-comment\">// data / props / ctx</span>\n","          <span class=\"code-comment\">// This getter gets called for every property access on the render context</span>\n","          <span class=\"code-comment\">// during render and is a major hotspot. The most expensive part of this</span>\n","          <span class=\"code-comment\">// is the multiple hasOwn() calls. It's much faster to do a simple property</span>\n","          <span class=\"code-comment\">// access on a plain object, so we use an accessCache object (with null</span>\n","          <span class=\"code-comment\">// prototype) to memoize what access type a key corresponds to.</span>\n","          <span class=\"code-keyword\">let</span> normalizedProps;\n","          <span class=\"code-keyword\">if</span> (key[<span class=\"code-number\">0</span>] !== <span class=\"code-string\">'$'</span>) {\n","              <span class=\"code-keyword\">const</span> n = accessCache[key];\n","              <span class=\"code-keyword\">if</span> (n !== <span class=\"code-literal\">undefined</span>) {\n","                  <span class=\"code-keyword\">switch</span> (n) {\n","                      <span class=\"code-keyword\">case</span> <span class=\"code-number\">1</span> <span class=\"code-comment\">/* AccessTypes.SETUP */</span>:\n","                          <span class=\"code-keyword\">return</span> setupState[key];\n","                      <span class=\"code-keyword\">case</span> <span class=\"code-number\">2</span> <span class=\"code-comment\">/* AccessTypes.DATA */</span>:\n","                          <span class=\"code-keyword\">return</span> data[key];\n","                      <span class=\"code-keyword\">case</span> <span class=\"code-number\">4</span> <span class=\"code-comment\">/* AccessTypes.CONTEXT */</span>:\n","                          <span class=\"code-keyword\">return</span> ctx[key];\n","                      <span class=\"code-keyword\">case</span> <span class=\"code-number\">3</span> <span class=\"code-comment\">/* AccessTypes.PROPS */</span>:\n","                          <span class=\"code-keyword\">return</span> props[key];\n","                      <span class=\"code-comment\">// default: just fallthrough</span>\n","                  }\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (hasSetupBinding(setupState, key)) {\n","                  accessCache[key] = <span class=\"code-number\">1</span> <span class=\"code-comment\">/* AccessTypes.SETUP */</span>;\n","                  <span class=\"code-keyword\">return</span> setupState[key];\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) {\n","                  accessCache[key] = <span class=\"code-number\">2</span> <span class=\"code-comment\">/* AccessTypes.DATA */</span>;\n","                  <span class=\"code-keyword\">return</span> data[key];\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (\n","              <span class=\"code-comment\">// only cache other properties when instance has declared (thus stable)</span>\n","              <span class=\"code-comment\">// props</span>\n","              (normalizedProps = instance.propsOptions[<span class=\"code-number\">0</span>]) &amp;&amp;\n","                  hasOwn(normalizedProps, key)) {\n","                  accessCache[key] = <span class=\"code-number\">3</span> <span class=\"code-comment\">/* AccessTypes.PROPS */</span>;\n","                  <span class=\"code-keyword\">return</span> props[key];\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (ctx !== EMPTY_OBJ &amp;&amp; hasOwn(ctx, key)) {\n","                  accessCache[key] = <span class=\"code-number\">4</span> <span class=\"code-comment\">/* AccessTypes.CONTEXT */</span>;\n","                  <span class=\"code-keyword\">return</span> ctx[key];\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (shouldCacheAccess) {\n","                  accessCache[key] = <span class=\"code-number\">0</span> <span class=\"code-comment\">/* AccessTypes.OTHER */</span>;\n","              }\n","          }\n","          <span class=\"code-keyword\">const</span> publicGetter = publicPropertiesMap[key];\n","          <span class=\"code-keyword\">let</span> cssModule, globalProperties;\n","          <span class=\"code-comment\">// public $xxx properties</span>\n","          <span class=\"code-keyword\">if</span> (publicGetter) {\n","              <span class=\"code-keyword\">if</span> (key === <span class=\"code-string\">'$attrs'</span>) {\n","                  track(instance, <span class=\"code-string\">\"get\"</span> <span class=\"code-comment\">/* TrackOpTypes.GET */</span>, key);\n","                  markAttrsAccessed();\n","              }\n","              <span class=\"code-keyword\">return</span> publicGetter(instance);\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (\n","          <span class=\"code-comment\">// css module (injected by vue-loader)</span>\n","          (cssModule = type.__cssModules) &amp;&amp;\n","              (cssModule = cssModule[key])) {\n","              <span class=\"code-keyword\">return</span> cssModule;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (ctx !== EMPTY_OBJ &amp;&amp; hasOwn(ctx, key)) {\n","              <span class=\"code-comment\">// user may set custom properties to `this` that start with `$`</span>\n","              accessCache[key] = <span class=\"code-number\">4</span> <span class=\"code-comment\">/* AccessTypes.CONTEXT */</span>;\n","              <span class=\"code-keyword\">return</span> ctx[key];\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (\n","          <span class=\"code-comment\">// global properties</span>\n","          ((globalProperties = appContext.config.globalProperties),\n","              hasOwn(globalProperties, key))) {\n","              {\n","                  <span class=\"code-keyword\">return</span> globalProperties[key];\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (currentRenderingInstance &amp;&amp;\n","              (!isString(key) ||\n","                  <span class=\"code-comment\">// #1091 avoid internal isRef/isVNode checks on component instance leading</span>\n","                  <span class=\"code-comment\">// to infinite warning loop</span>\n","                  key.indexOf(<span class=\"code-string\">'__v'</span>) !== <span class=\"code-number\">0</span>)) {\n","              <span class=\"code-keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; isReservedPrefix(key[<span class=\"code-number\">0</span>]) &amp;&amp; hasOwn(data, key)) {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Property <span class=\"code-subst\">${<span class=\"code-built_in\">JSON</span>.stringify(key)}</span> must be accessed via $data because it starts with a reserved `</span> +\n","                      <span class=\"code-string\">`character (\"$\" or \"_\") and is not proxied on the render context.`</span>);\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (instance === currentRenderingInstance) {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Property <span class=\"code-subst\">${<span class=\"code-built_in\">JSON</span>.stringify(key)}</span> was accessed during render `</span> +\n","                      <span class=\"code-string\">`but is not defined on instance.`</span>);\n","              }\n","          }\n","      },\n","      <span class=\"code-keyword\">set</span>({ _: instance }, key, value) {\n","          <span class=\"code-keyword\">const</span> { data, setupState, ctx } = instance;\n","          <span class=\"code-keyword\">if</span> (hasSetupBinding(setupState, key)) {\n","              setupState[key] = value;\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (setupState.__isScriptSetup &amp;&amp;\n","              hasOwn(setupState, key)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Cannot mutate &lt;script setup&gt; binding \"<span class=\"code-subst\">${key}</span>\" from Options API.`</span>);\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) {\n","              data[key] = value;\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (hasOwn(instance.props, key)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Attempting to mutate prop \"<span class=\"code-subst\">${key}</span>\". Props are readonly.`</span>);\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          }\n","          <span class=\"code-keyword\">if</span> (key[<span class=\"code-number\">0</span>] === <span class=\"code-string\">'$'</span> &amp;&amp; key.slice(<span class=\"code-number\">1</span>) <span class=\"code-keyword\">in</span> instance) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Attempting to mutate public property \"<span class=\"code-subst\">${key}</span>\". `</span> +\n","                      <span class=\"code-string\">`Properties starting with $ are reserved and readonly.`</span>);\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-keyword\">if</span> (key <span class=\"code-keyword\">in</span> instance.appContext.config.globalProperties) {\n","                  <span class=\"code-built_in\">Object</span>.defineProperty(ctx, key, {\n","                      enumerable: <span class=\"code-literal\">true</span>,\n","                      configurable: <span class=\"code-literal\">true</span>,\n","                      value\n","                  });\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  ctx[key] = value;\n","              }\n","          }\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      },\n","      has({ <span class=\"code-attr\">_</span>: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {\n","          <span class=\"code-keyword\">let</span> normalizedProps;\n","          <span class=\"code-keyword\">return</span> (!!accessCache[key] ||\n","              (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) ||\n","              hasSetupBinding(setupState, key) ||\n","              ((normalizedProps = propsOptions[<span class=\"code-number\">0</span>]) &amp;&amp; hasOwn(normalizedProps, key)) ||\n","              hasOwn(ctx, key) ||\n","              hasOwn(publicPropertiesMap, key) ||\n","              hasOwn(appContext.config.globalProperties, key));\n","      },\n","      defineProperty(target, key, descriptor) {\n","          <span class=\"code-keyword\">if</span> (descriptor.get != <span class=\"code-literal\">null</span>) {\n","              <span class=\"code-comment\">// invalidate key cache of a getter based property #5417</span>\n","              target._.accessCache[key] = <span class=\"code-number\">0</span>;\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (hasOwn(descriptor, <span class=\"code-string\">'value'</span>)) {\n","              <span class=\"code-keyword\">this</span>.set(target, key, descriptor.value, <span class=\"code-literal\">null</span>);\n","          }\n","          <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">Reflect</span>.defineProperty(target, key, descriptor);\n","      }\n","  };\n","  {\n","      PublicInstanceProxyHandlers.ownKeys = <span class=\"code-function\">(<span class=\"code-params\">target</span>) =&gt;</span> {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Avoid app logic that relies on enumerating keys on a component instance. `</span> +\n","              <span class=\"code-string\">`The keys will be empty in production mode to avoid performance overhead.`</span>);\n","          <span class=\"code-keyword\">return</span> <span class=\"code-built_in\">Reflect</span>.ownKeys(target);\n","      };\n","  }\n","  <span class=\"code-keyword\">const</span> RuntimeCompiledPublicInstanceProxyHandlers = <span class=\"code-comment\">/*#__PURE__*/</span> extend({}, PublicInstanceProxyHandlers, {\n","      <span class=\"code-keyword\">get</span>(target, key) {\n","          <span class=\"code-comment\">// fast path for unscopables when using `with` block</span>\n","          <span class=\"code-keyword\">if</span> (key === <span class=\"code-built_in\">Symbol</span>.unscopables) {\n","              <span class=\"code-keyword\">return</span>;\n","          }\n","          <span class=\"code-keyword\">return</span> PublicInstanceProxyHandlers.get(target, key, target);\n","      },\n","      has(_, key) {\n","          <span class=\"code-keyword\">const</span> has = key[<span class=\"code-number\">0</span>] !== <span class=\"code-string\">'_'</span> &amp;&amp; !isGloballyWhitelisted(key);\n","          <span class=\"code-keyword\">if</span> (!has &amp;&amp; PublicInstanceProxyHandlers.has(_, key)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Property <span class=\"code-subst\">${<span class=\"code-built_in\">JSON</span>.stringify(key)}</span> should not start with _ which is a reserved prefix for Vue internals.`</span>);\n","          }\n","          <span class=\"code-keyword\">return</span> has;\n","      }\n","  });\n","  <span class=\"code-comment\">// dev only</span>\n","  <span class=\"code-comment\">// In dev mode, the proxy target exposes the same properties as seen on `this`</span>\n","  <span class=\"code-comment\">// for easier console inspection. In prod mode it will be an empty object so</span>\n","  <span class=\"code-comment\">// these properties definitions can be skipped.</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createDevRenderContext</span>(<span class=\"code-params\">instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> target = {};\n","      <span class=\"code-comment\">// expose internal instance for proxy handlers</span>\n","      <span class=\"code-built_in\">Object</span>.defineProperty(target, <span class=\"code-string\">`_`</span>, {\n","          configurable: <span class=\"code-literal\">true</span>,\n","          enumerable: <span class=\"code-literal\">false</span>,\n","          <span class=\"code-keyword\">get</span>: () =&gt; instance\n","      });\n","      // expose public properties\n","      Object.keys(publicPropertiesMap).forEach(key =&gt; {\n","          <span class=\"code-built_in\">Object</span>.defineProperty(target, key, {\n","              configurable: <span class=\"code-literal\">true</span>,\n","              enumerable: <span class=\"code-literal\">false</span>,\n","              <span class=\"code-keyword\">get</span>: () =&gt; publicPropertiesMap[key](instance),\n","              // intercepted by the proxy so no need for implementation,\n","              // but needed to prevent <span class=\"code-keyword\">set</span> errors\n","              <span class=\"code-keyword\">set</span>: NOOP\n","          });\n","      });\n","      return target;\n","  }\n","  // dev only\n","  function exposePropsOnRenderContext(instance) {\n","      <span class=\"code-keyword\">const</span> { ctx, <span class=\"code-attr\">propsOptions</span>: [propsOptions] } = instance;\n","      <span class=\"code-keyword\">if</span> (propsOptions) {\n","          <span class=\"code-built_in\">Object</span>.keys(propsOptions).forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> {\n","              <span class=\"code-built_in\">Object</span>.defineProperty(ctx, key, {\n","                  enumerable: <span class=\"code-literal\">true</span>,\n","                  configurable: <span class=\"code-literal\">true</span>,\n","                  <span class=\"code-keyword\">get</span>: () =&gt; instance.props[key],\n","                  <span class=\"code-keyword\">set</span>: NOOP\n","              });\n","          });\n","      }\n","  }\n","  // dev only\n","  function exposeSetupStateOnRenderContext(instance) {\n","      <span class=\"code-keyword\">const</span> { ctx, setupState } = instance;\n","      <span class=\"code-built_in\">Object</span>.keys(toRaw(setupState)).forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (!setupState.__isScriptSetup) {\n","              <span class=\"code-keyword\">if</span> (isReservedPrefix(key[<span class=\"code-number\">0</span>])) {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`setup() return property <span class=\"code-subst\">${<span class=\"code-built_in\">JSON</span>.stringify(key)}</span> should not start with \"$\" or \"_\" `</span> +\n","                      <span class=\"code-string\">`which are reserved prefixes for Vue internals.`</span>);\n","                  <span class=\"code-keyword\">return</span>;\n","              }\n","              <span class=\"code-built_in\">Object</span>.defineProperty(ctx, key, {\n","                  enumerable: <span class=\"code-literal\">true</span>,\n","                  configurable: <span class=\"code-literal\">true</span>,\n","                  <span class=\"code-keyword\">get</span>: () =&gt; setupState[key],\n","                  <span class=\"code-keyword\">set</span>: NOOP\n","              });\n","          }\n","      });\n","  }\n","\n","  function createDuplicateChecker() {\n","      <span class=\"code-keyword\">const</span> cache = <span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>);\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\">(<span class=\"code-params\">type, key</span>) =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (cache[key]) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`<span class=\"code-subst\">${type}</span> property \"<span class=\"code-subst\">${key}</span>\" is already defined in <span class=\"code-subst\">${cache[key]}</span>.`</span>);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              cache[key] = type;\n","          }\n","      };\n","  }\n","  <span class=\"code-keyword\">let</span> shouldCacheAccess = <span class=\"code-literal\">true</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">applyOptions</span>(<span class=\"code-params\">instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> options = resolveMergedOptions(instance);\n","      <span class=\"code-keyword\">const</span> publicThis = instance.proxy;\n","      <span class=\"code-keyword\">const</span> ctx = instance.ctx;\n","      <span class=\"code-comment\">// do not cache property access on public proxy during state initialization</span>\n","      shouldCacheAccess = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-comment\">// call beforeCreate first before accessing other options since</span>\n","      <span class=\"code-comment\">// the hook may mutate resolved options (#2791)</span>\n","      <span class=\"code-keyword\">if</span> (options.beforeCreate) {\n","          callHook(options.beforeCreate, instance, <span class=\"code-string\">\"bc\"</span> <span class=\"code-comment\">/* LifecycleHooks.BEFORE_CREATE */</span>);\n","      }\n","      <span class=\"code-keyword\">const</span> { \n","      <span class=\"code-comment\">// state</span>\n","      data: dataOptions, <span class=\"code-attr\">computed</span>: computedOptions, methods, <span class=\"code-attr\">watch</span>: watchOptions, <span class=\"code-attr\">provide</span>: provideOptions, <span class=\"code-attr\">inject</span>: injectOptions, \n","      <span class=\"code-comment\">// lifecycle</span>\n","      created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, serverPrefetch, \n","      <span class=\"code-comment\">// public API</span>\n","      expose, inheritAttrs, \n","      <span class=\"code-comment\">// assets</span>\n","      components, directives, filters } = options;\n","      <span class=\"code-keyword\">const</span> checkDuplicateProperties = createDuplicateChecker() ;\n","      {\n","          <span class=\"code-keyword\">const</span> [propsOptions] = instance.propsOptions;\n","          <span class=\"code-keyword\">if</span> (propsOptions) {\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> propsOptions) {\n","                  checkDuplicateProperties(<span class=\"code-string\">\"Props\"</span> <span class=\"code-comment\">/* OptionTypes.PROPS */</span>, key);\n","              }\n","          }\n","      }\n","      <span class=\"code-comment\">// options initialization order (to be consistent with Vue 2):</span>\n","      <span class=\"code-comment\">// - props (already done outside of this function)</span>\n","      <span class=\"code-comment\">// - inject</span>\n","      <span class=\"code-comment\">// - methods</span>\n","      <span class=\"code-comment\">// - data (deferred since it relies on `this` access)</span>\n","      <span class=\"code-comment\">// - computed</span>\n","      <span class=\"code-comment\">// - watch (deferred since it relies on `this` access)</span>\n","      <span class=\"code-keyword\">if</span> (injectOptions) {\n","          resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);\n","      }\n","      <span class=\"code-keyword\">if</span> (methods) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> methods) {\n","              <span class=\"code-keyword\">const</span> methodHandler = methods[key];\n","              <span class=\"code-keyword\">if</span> (isFunction(methodHandler)) {\n","                  <span class=\"code-comment\">// In dev mode, we use the `createRenderContext` function to define</span>\n","                  <span class=\"code-comment\">// methods to the proxy target, and those are read-only but</span>\n","                  <span class=\"code-comment\">// reconfigurable, so it needs to be redefined here</span>\n","                  {\n","                      <span class=\"code-built_in\">Object</span>.defineProperty(ctx, key, {\n","                          value: methodHandler.bind(publicThis),\n","                          configurable: <span class=\"code-literal\">true</span>,\n","                          enumerable: <span class=\"code-literal\">true</span>,\n","                          writable: <span class=\"code-literal\">true</span>\n","                      });\n","                  }\n","                  {\n","                      checkDuplicateProperties(<span class=\"code-string\">\"Methods\"</span> <span class=\"code-comment\">/* OptionTypes.METHODS */</span>, key);\n","                  }\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Method \"<span class=\"code-subst\">${key}</span>\" has type \"<span class=\"code-subst\">${<span class=\"code-keyword\">typeof</span> methodHandler}</span>\" in the component definition. `</span> +\n","                      <span class=\"code-string\">`Did you reference the function correctly?`</span>);\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">if</span> (dataOptions) {\n","          <span class=\"code-keyword\">if</span> (!isFunction(dataOptions)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`The data option must be a function. `</span> +\n","                  <span class=\"code-string\">`Plain object usage is no longer supported.`</span>);\n","          }\n","          <span class=\"code-keyword\">const</span> data = dataOptions.call(publicThis, publicThis);\n","          <span class=\"code-keyword\">if</span> (isPromise(data)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`data() returned a Promise - note data() cannot be async; If you `</span> +\n","                  <span class=\"code-string\">`intend to perform data fetching before component renders, use `</span> +\n","                  <span class=\"code-string\">`async setup() + &lt;Suspense&gt;.`</span>);\n","          }\n","          <span class=\"code-keyword\">if</span> (!isObject(data)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`data() should return an object.`</span>);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              instance.data = reactive(data);\n","              {\n","                  <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> data) {\n","                      checkDuplicateProperties(<span class=\"code-string\">\"Data\"</span> <span class=\"code-comment\">/* OptionTypes.DATA */</span>, key);\n","                      <span class=\"code-comment\">// expose data on ctx during dev</span>\n","                      <span class=\"code-keyword\">if</span> (!isReservedPrefix(key[<span class=\"code-number\">0</span>])) {\n","                          <span class=\"code-built_in\">Object</span>.defineProperty(ctx, key, {\n","                              configurable: <span class=\"code-literal\">true</span>,\n","                              enumerable: <span class=\"code-literal\">true</span>,\n","                              <span class=\"code-keyword\">get</span>: () =&gt; data[key],\n","                              <span class=\"code-keyword\">set</span>: NOOP\n","                          });\n","                      }\n","                  }\n","              }\n","          }\n","      }\n","      // state initialization complete at this point - start caching access\n","      shouldCacheAccess = true;\n","      if (computedOptions) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> computedOptions) {\n","              <span class=\"code-keyword\">const</span> opt = computedOptions[key];\n","              <span class=\"code-keyword\">const</span> <span class=\"code-keyword\">get</span> = isFunction(opt)\n","                  ? opt.bind(publicThis, publicThis)\n","                  : isFunction(opt.<span class=\"code-keyword\">get</span>)\n","                      ? opt.<span class=\"code-keyword\">get</span>.bind(publicThis, publicThis)\n","                      : NOOP;\n","              if (<span class=\"code-keyword\">get</span> === NOOP) {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Computed property \"<span class=\"code-subst\">${key}</span>\" has no getter.`</span>);\n","              }\n","              <span class=\"code-keyword\">const</span> <span class=\"code-keyword\">set</span> = !isFunction(opt) &amp;&amp; isFunction(opt.<span class=\"code-keyword\">set</span>)\n","                  ? opt.<span class=\"code-keyword\">set</span>.bind(publicThis)\n","                  : () =&gt; {\n","                          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Write operation failed: computed property \"<span class=\"code-subst\">${key}</span>\" is readonly.`</span>);\n","                      }\n","                      ;\n","              <span class=\"code-keyword\">const</span> c = computed$<span class=\"code-number\">1</span>({\n","                  <span class=\"code-keyword\">get</span>,\n","                  <span class=\"code-keyword\">set</span>\n","              });\n","              Object.defineProperty(ctx, key, {\n","                  enumerable: <span class=\"code-literal\">true</span>,\n","                  configurable: <span class=\"code-literal\">true</span>,\n","                  <span class=\"code-keyword\">get</span>: () =&gt; c.value,\n","                  <span class=\"code-keyword\">set</span>: v =&gt; (c.value = v)\n","              });\n","              {\n","                  checkDuplicateProperties(<span class=\"code-string\">\"Computed\"</span> <span class=\"code-comment\">/* OptionTypes.COMPUTED */</span>, key);\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">if</span> (watchOptions) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> watchOptions) {\n","              createWatcher(watchOptions[key], ctx, publicThis, key);\n","          }\n","      }\n","      <span class=\"code-keyword\">if</span> (provideOptions) {\n","          <span class=\"code-keyword\">const</span> provides = isFunction(provideOptions)\n","              ? provideOptions.call(publicThis)\n","              : provideOptions;\n","          <span class=\"code-built_in\">Reflect</span>.ownKeys(provides).forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> {\n","              provide(key, provides[key]);\n","          });\n","      }\n","      <span class=\"code-keyword\">if</span> (created) {\n","          callHook(created, instance, <span class=\"code-string\">\"c\"</span> <span class=\"code-comment\">/* LifecycleHooks.CREATED */</span>);\n","      }\n","      <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">registerLifecycleHook</span>(<span class=\"code-params\">register, hook</span>) </span>{\n","          <span class=\"code-keyword\">if</span> (isArray(hook)) {\n","              hook.forEach(<span class=\"code-function\"><span class=\"code-params\">_hook</span> =&gt;</span> register(_hook.bind(publicThis)));\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (hook) {\n","              register(hook.bind(publicThis));\n","          }\n","      }\n","      registerLifecycleHook(onBeforeMount, beforeMount);\n","      registerLifecycleHook(onMounted, mounted);\n","      registerLifecycleHook(onBeforeUpdate, beforeUpdate);\n","      registerLifecycleHook(onUpdated, updated);\n","      registerLifecycleHook(onActivated, activated);\n","      registerLifecycleHook(onDeactivated, deactivated);\n","      registerLifecycleHook(onErrorCaptured, errorCaptured);\n","      registerLifecycleHook(onRenderTracked, renderTracked);\n","      registerLifecycleHook(onRenderTriggered, renderTriggered);\n","      registerLifecycleHook(onBeforeUnmount, beforeUnmount);\n","      registerLifecycleHook(onUnmounted, unmounted);\n","      registerLifecycleHook(onServerPrefetch, serverPrefetch);\n","      <span class=\"code-keyword\">if</span> (isArray(expose)) {\n","          <span class=\"code-keyword\">if</span> (expose.length) {\n","              <span class=\"code-keyword\">const</span> exposed = instance.exposed || (instance.exposed = {});\n","              expose.forEach(<span class=\"code-function\"><span class=\"code-params\">key</span> =&gt;</span> {\n","                  <span class=\"code-built_in\">Object</span>.defineProperty(exposed, key, {\n","                      <span class=\"code-keyword\">get</span>: () =&gt; publicThis[key],\n","                      <span class=\"code-keyword\">set</span>: val =&gt; (publicThis[key] = val)\n","                  });\n","              });\n","          }\n","          else if (!instance.exposed) {\n","              instance.exposed = {};\n","          }\n","      }\n","      <span class=\"code-comment\">// options that are handled when creating the instance but also need to be</span>\n","      <span class=\"code-comment\">// applied from mixins</span>\n","      <span class=\"code-keyword\">if</span> (render &amp;&amp; instance.render === NOOP) {\n","          instance.render = render;\n","      }\n","      <span class=\"code-keyword\">if</span> (inheritAttrs != <span class=\"code-literal\">null</span>) {\n","          instance.inheritAttrs = inheritAttrs;\n","      }\n","      <span class=\"code-comment\">// asset options.</span>\n","      <span class=\"code-keyword\">if</span> (components)\n","          instance.components = components;\n","      <span class=\"code-keyword\">if</span> (directives)\n","          instance.directives = directives;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolveInjections</span>(<span class=\"code-params\">injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isArray(injectOptions)) {\n","          injectOptions = normalizeInject(injectOptions);\n","      }\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> injectOptions) {\n","          <span class=\"code-keyword\">const</span> opt = injectOptions[key];\n","          <span class=\"code-keyword\">let</span> injected;\n","          <span class=\"code-keyword\">if</span> (isObject(opt)) {\n","              <span class=\"code-keyword\">if</span> (<span class=\"code-string\">'default'</span> <span class=\"code-keyword\">in</span> opt) {\n","                  injected = inject(opt.from || key, opt.default, <span class=\"code-literal\">true</span> <span class=\"code-comment\">/* treat default function as factory */</span>);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  injected = inject(opt.from || key);\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              injected = inject(opt);\n","          }\n","          <span class=\"code-keyword\">if</span> (isRef(injected)) {\n","              <span class=\"code-comment\">// TODO remove the check in 3.3</span>\n","              <span class=\"code-keyword\">if</span> (unwrapRef) {\n","                  <span class=\"code-built_in\">Object</span>.defineProperty(ctx, key, {\n","                      enumerable: <span class=\"code-literal\">true</span>,\n","                      configurable: <span class=\"code-literal\">true</span>,\n","                      <span class=\"code-keyword\">get</span>: () =&gt; injected.value,\n","                      <span class=\"code-keyword\">set</span>: v =&gt; (injected.value = v)\n","                  });\n","              }\n","              else {\n","                  {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`injected property \"<span class=\"code-subst\">${key}</span>\" is a ref and will be auto-unwrapped `</span> +\n","                          <span class=\"code-string\">`and no longer needs \\`.value\\` in the next minor release. `</span> +\n","                          <span class=\"code-string\">`To opt-in to the new behavior now, `</span> +\n","                          <span class=\"code-string\">`set \\`app.config.unwrapInjectedRef = true\\` (this config is `</span> +\n","                          <span class=\"code-string\">`temporary and will not be needed in the future.)`</span>);\n","                  }\n","                  ctx[key] = injected;\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              ctx[key] = injected;\n","          }\n","          {\n","              checkDuplicateProperties(<span class=\"code-string\">\"Inject\"</span> <span class=\"code-comment\">/* OptionTypes.INJECT */</span>, key);\n","          }\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">callHook</span>(<span class=\"code-params\">hook, instance, type</span>) </span>{\n","      callWithAsyncErrorHandling(isArray(hook)\n","          ? hook.map(<span class=\"code-function\"><span class=\"code-params\">h</span> =&gt;</span> h.bind(instance.proxy))\n","          : hook.bind(instance.proxy), instance, type);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createWatcher</span>(<span class=\"code-params\">raw, ctx, publicThis, key</span>) </span>{\n","      <span class=\"code-keyword\">const</span> getter = key.includes(<span class=\"code-string\">'.'</span>)\n","          ? createPathGetter(publicThis, key)\n","          : <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> publicThis[key];\n","      <span class=\"code-keyword\">if</span> (isString(raw)) {\n","          <span class=\"code-keyword\">const</span> handler = ctx[raw];\n","          <span class=\"code-keyword\">if</span> (isFunction(handler)) {\n","              watch(getter, handler);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Invalid watch handler specified by key \"<span class=\"code-subst\">${raw}</span>\"`</span>, handler);\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isFunction(raw)) {\n","          watch(getter, raw.bind(publicThis));\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isObject(raw)) {\n","          <span class=\"code-keyword\">if</span> (isArray(raw)) {\n","              raw.forEach(<span class=\"code-function\"><span class=\"code-params\">r</span> =&gt;</span> createWatcher(r, ctx, publicThis, key));\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-keyword\">const</span> handler = isFunction(raw.handler)\n","                  ? raw.handler.bind(publicThis)\n","                  : ctx[raw.handler];\n","              <span class=\"code-keyword\">if</span> (isFunction(handler)) {\n","                  watch(getter, handler, raw);\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Invalid watch handler specified by key \"<span class=\"code-subst\">${raw.handler}</span>\"`</span>, handler);\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Invalid watch option: \"<span class=\"code-subst\">${key}</span>\"`</span>, raw);\n","      }\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * Resolve merged options and cache it on the component.\n</span>","<span class=\"code-comment\">   * This is done only once per-component since the merging does not involve\n</span>","<span class=\"code-comment\">   * instances.\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolveMergedOptions</span>(<span class=\"code-params\">instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> base = instance.type;\n","      <span class=\"code-keyword\">const</span> { mixins, <span class=\"code-attr\">extends</span>: extendsOptions } = base;\n","      <span class=\"code-keyword\">const</span> { <span class=\"code-attr\">mixins</span>: globalMixins, <span class=\"code-attr\">optionsCache</span>: cache, <span class=\"code-attr\">config</span>: { optionMergeStrategies } } = instance.appContext;\n","      <span class=\"code-keyword\">const</span> cached = cache.get(base);\n","      <span class=\"code-keyword\">let</span> resolved;\n","      <span class=\"code-keyword\">if</span> (cached) {\n","          resolved = cached;\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (!globalMixins.length &amp;&amp; !mixins &amp;&amp; !extendsOptions) {\n","          {\n","              resolved = base;\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          resolved = {};\n","          <span class=\"code-keyword\">if</span> (globalMixins.length) {\n","              globalMixins.forEach(<span class=\"code-function\"><span class=\"code-params\">m</span> =&gt;</span> mergeOptions(resolved, m, optionMergeStrategies, <span class=\"code-literal\">true</span>));\n","          }\n","          mergeOptions(resolved, base, optionMergeStrategies);\n","      }\n","      <span class=\"code-keyword\">if</span> (isObject(base)) {\n","          cache.set(base, resolved);\n","      }\n","      <span class=\"code-keyword\">return</span> resolved;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mergeOptions</span>(<span class=\"code-params\">to, from, strats, asMixin = false</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { mixins, <span class=\"code-attr\">extends</span>: extendsOptions } = <span class=\"code-keyword\">from</span>;\n","      <span class=\"code-keyword\">if</span> (extendsOptions) {\n","          mergeOptions(to, extendsOptions, strats, <span class=\"code-literal\">true</span>);\n","      }\n","      <span class=\"code-keyword\">if</span> (mixins) {\n","          mixins.forEach(<span class=\"code-function\">(<span class=\"code-params\">m</span>) =&gt;</span> mergeOptions(to, m, strats, <span class=\"code-literal\">true</span>));\n","      }\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> <span class=\"code-keyword\">from</span>) {\n","          <span class=\"code-keyword\">if</span> (asMixin &amp;&amp; key === <span class=\"code-string\">'expose'</span>) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`\"expose\" option is ignored when declared in mixins or extends. `</span> +\n","                      <span class=\"code-string\">`It should only be declared in the base component itself.`</span>);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-keyword\">const</span> strat = internalOptionMergeStrats[key] || (strats &amp;&amp; strats[key]);\n","              to[key] = strat ? strat(to[key], <span class=\"code-keyword\">from</span>[key]) : <span class=\"code-keyword\">from</span>[key];\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> to;\n","  }\n","  <span class=\"code-keyword\">const</span> internalOptionMergeStrats = {\n","      data: mergeDataFn,\n","      props: mergeObjectOptions,\n","      emits: mergeObjectOptions,\n","      <span class=\"code-comment\">// objects</span>\n","      methods: mergeObjectOptions,\n","      computed: mergeObjectOptions,\n","      <span class=\"code-comment\">// lifecycle</span>\n","      beforeCreate: mergeAsArray,\n","      created: mergeAsArray,\n","      beforeMount: mergeAsArray,\n","      mounted: mergeAsArray,\n","      beforeUpdate: mergeAsArray,\n","      updated: mergeAsArray,\n","      beforeDestroy: mergeAsArray,\n","      beforeUnmount: mergeAsArray,\n","      destroyed: mergeAsArray,\n","      unmounted: mergeAsArray,\n","      activated: mergeAsArray,\n","      deactivated: mergeAsArray,\n","      errorCaptured: mergeAsArray,\n","      serverPrefetch: mergeAsArray,\n","      <span class=\"code-comment\">// assets</span>\n","      components: mergeObjectOptions,\n","      directives: mergeObjectOptions,\n","      <span class=\"code-comment\">// watch</span>\n","      watch: mergeWatchOptions,\n","      <span class=\"code-comment\">// provide / inject</span>\n","      provide: mergeDataFn,\n","      inject: mergeInject\n","  };\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mergeDataFn</span>(<span class=\"code-params\">to, from</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!<span class=\"code-keyword\">from</span>) {\n","          <span class=\"code-keyword\">return</span> to;\n","      }\n","      <span class=\"code-keyword\">if</span> (!to) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">from</span>;\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mergedDataFn</span>(<span class=\"code-params\"></span>) </span>{\n","          <span class=\"code-keyword\">return</span> (extend)(isFunction(to) ? to.call(<span class=\"code-keyword\">this</span>, <span class=\"code-keyword\">this</span>) : to, isFunction(<span class=\"code-keyword\">from</span>) ? <span class=\"code-keyword\">from</span>.call(<span class=\"code-keyword\">this</span>, <span class=\"code-keyword\">this</span>) : <span class=\"code-keyword\">from</span>);\n","      };\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mergeInject</span>(<span class=\"code-params\">to, from</span>) </span>{\n","      <span class=\"code-keyword\">return</span> mergeObjectOptions(normalizeInject(to), normalizeInject(<span class=\"code-keyword\">from</span>));\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizeInject</span>(<span class=\"code-params\">raw</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isArray(raw)) {\n","          <span class=\"code-keyword\">const</span> res = {};\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; raw.length; i++) {\n","              res[raw[i]] = raw[i];\n","          }\n","          <span class=\"code-keyword\">return</span> res;\n","      }\n","      <span class=\"code-keyword\">return</span> raw;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mergeAsArray</span>(<span class=\"code-params\">to, from</span>) </span>{\n","      <span class=\"code-keyword\">return</span> to ? [...new <span class=\"code-built_in\">Set</span>([].concat(to, <span class=\"code-keyword\">from</span>))] : <span class=\"code-keyword\">from</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mergeObjectOptions</span>(<span class=\"code-params\">to, from</span>) </span>{\n","      <span class=\"code-keyword\">return</span> to ? extend(extend(<span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>), to), <span class=\"code-keyword\">from</span>) : <span class=\"code-keyword\">from</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">mergeWatchOptions</span>(<span class=\"code-params\">to, from</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (!to)\n","          <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">from</span>;\n","      <span class=\"code-keyword\">if</span> (!<span class=\"code-keyword\">from</span>)\n","          <span class=\"code-keyword\">return</span> to;\n","      <span class=\"code-keyword\">const</span> merged = extend(<span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>), to);\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> <span class=\"code-keyword\">from</span>) {\n","          merged[key] = mergeAsArray(to[key], <span class=\"code-keyword\">from</span>[key]);\n","      }\n","      <span class=\"code-keyword\">return</span> merged;\n","  }\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">initProps</span>(<span class=\"code-params\">instance, rawProps, isStateful, <span class=\"code-regexp\">//</span> result of bitwise flag comparison\n</span></span>","<span class=\"code-function\"><span class=\"code-params\">  isSSR = false</span>) </span>{\n","      <span class=\"code-keyword\">const</span> props = {};\n","      <span class=\"code-keyword\">const</span> attrs = {};\n","      def(attrs, InternalObjectKey, <span class=\"code-number\">1</span>);\n","      instance.propsDefaults = <span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>);\n","      setFullProps(instance, rawProps, props, attrs);\n","      <span class=\"code-comment\">// ensure all declared prop keys are present</span>\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> instance.propsOptions[<span class=\"code-number\">0</span>]) {\n","          <span class=\"code-keyword\">if</span> (!(key <span class=\"code-keyword\">in</span> props)) {\n","              props[key] = <span class=\"code-literal\">undefined</span>;\n","          }\n","      }\n","      <span class=\"code-comment\">// validation</span>\n","      {\n","          validateProps(rawProps || {}, props, instance);\n","      }\n","      <span class=\"code-keyword\">if</span> (isStateful) {\n","          <span class=\"code-comment\">// stateful</span>\n","          instance.props = isSSR ? props : shallowReactive(props);\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">if</span> (!instance.type.props) {\n","              <span class=\"code-comment\">// functional w/ optional props, props === attrs</span>\n","              instance.props = attrs;\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              <span class=\"code-comment\">// functional w/ declared props</span>\n","              instance.props = props;\n","          }\n","      }\n","      instance.attrs = attrs;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isInHmrContext</span>(<span class=\"code-params\">instance</span>) </span>{\n","      <span class=\"code-keyword\">while</span> (instance) {\n","          <span class=\"code-keyword\">if</span> (instance.type.__hmrId)\n","              <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","          instance = instance.parent;\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">updateProps</span>(<span class=\"code-params\">instance, rawProps, rawPrevProps, optimized</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { props, attrs, <span class=\"code-attr\">vnode</span>: { patchFlag } } = instance;\n","      <span class=\"code-keyword\">const</span> rawCurrentProps = toRaw(props);\n","      <span class=\"code-keyword\">const</span> [options] = instance.propsOptions;\n","      <span class=\"code-keyword\">let</span> hasAttrsChanged = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">if</span> (\n","      <span class=\"code-comment\">// always force full diff in dev</span>\n","      <span class=\"code-comment\">// - #1942 if hmr is enabled with sfc component</span>\n","      <span class=\"code-comment\">// - vite#872 non-sfc component used by sfc component</span>\n","      !(isInHmrContext(instance)) &amp;&amp;\n","          (optimized || patchFlag &gt; <span class=\"code-number\">0</span>) &amp;&amp;\n","          !(patchFlag &amp; <span class=\"code-number\">16</span> <span class=\"code-comment\">/* PatchFlags.FULL_PROPS */</span>)) {\n","          <span class=\"code-keyword\">if</span> (patchFlag &amp; <span class=\"code-number\">8</span> <span class=\"code-comment\">/* PatchFlags.PROPS */</span>) {\n","              <span class=\"code-comment\">// Compiler-generated props &amp; no keys change, just set the updated</span>\n","              <span class=\"code-comment\">// the props.</span>\n","              <span class=\"code-keyword\">const</span> propsToUpdate = instance.vnode.dynamicProps;\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; propsToUpdate.length; i++) {\n","                  <span class=\"code-keyword\">let</span> key = propsToUpdate[i];\n","                  <span class=\"code-comment\">// skip if the prop key is a declared emit event listener</span>\n","                  <span class=\"code-keyword\">if</span> (isEmitListener(instance.emitsOptions, key)) {\n","                      <span class=\"code-keyword\">continue</span>;\n","                  }\n","                  <span class=\"code-comment\">// PROPS flag guarantees rawProps to be non-null</span>\n","                  <span class=\"code-keyword\">const</span> value = rawProps[key];\n","                  <span class=\"code-keyword\">if</span> (options) {\n","                      <span class=\"code-comment\">// attr / props separation was done on init and will be consistent</span>\n","                      <span class=\"code-comment\">// in this code path, so just check if attrs have it.</span>\n","                      <span class=\"code-keyword\">if</span> (hasOwn(attrs, key)) {\n","                          <span class=\"code-keyword\">if</span> (value !== attrs[key]) {\n","                              attrs[key] = value;\n","                              hasAttrsChanged = <span class=\"code-literal\">true</span>;\n","                          }\n","                      }\n","                      <span class=\"code-keyword\">else</span> {\n","                          <span class=\"code-keyword\">const</span> camelizedKey = camelize(key);\n","                          props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, <span class=\"code-literal\">false</span> <span class=\"code-comment\">/* isAbsent */</span>);\n","                      }\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      <span class=\"code-keyword\">if</span> (value !== attrs[key]) {\n","                          attrs[key] = value;\n","                          hasAttrsChanged = <span class=\"code-literal\">true</span>;\n","                      }\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-comment\">// full props update.</span>\n","          <span class=\"code-keyword\">if</span> (setFullProps(instance, rawProps, props, attrs)) {\n","              hasAttrsChanged = <span class=\"code-literal\">true</span>;\n","          }\n","          <span class=\"code-comment\">// in case of dynamic props, check if we need to delete keys from</span>\n","          <span class=\"code-comment\">// the props object</span>\n","          <span class=\"code-keyword\">let</span> kebabKey;\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> rawCurrentProps) {\n","              <span class=\"code-keyword\">if</span> (!rawProps ||\n","                  <span class=\"code-comment\">// for camelCase</span>\n","                  (!hasOwn(rawProps, key) &amp;&amp;\n","                      <span class=\"code-comment\">// it's possible the original props was passed in as kebab-case</span>\n","                      <span class=\"code-comment\">// and converted to camelCase (#955)</span>\n","                      ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey)))) {\n","                  <span class=\"code-keyword\">if</span> (options) {\n","                      <span class=\"code-keyword\">if</span> (rawPrevProps &amp;&amp;\n","                          <span class=\"code-comment\">// for camelCase</span>\n","                          (rawPrevProps[key] !== <span class=\"code-literal\">undefined</span> ||\n","                              <span class=\"code-comment\">// for kebab-case</span>\n","                              rawPrevProps[kebabKey] !== <span class=\"code-literal\">undefined</span>)) {\n","                          props[key] = resolvePropValue(options, rawCurrentProps, key, <span class=\"code-literal\">undefined</span>, instance, <span class=\"code-literal\">true</span> <span class=\"code-comment\">/* isAbsent */</span>);\n","                      }\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      <span class=\"code-keyword\">delete</span> props[key];\n","                  }\n","              }\n","          }\n","          <span class=\"code-comment\">// in the case of functional component w/o props declaration, props and</span>\n","          <span class=\"code-comment\">// attrs point to the same object so it should already have been updated.</span>\n","          <span class=\"code-keyword\">if</span> (attrs !== rawCurrentProps) {\n","              <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> attrs) {\n","                  <span class=\"code-keyword\">if</span> (!rawProps ||\n","                      (!hasOwn(rawProps, key) &amp;&amp;\n","                          (!<span class=\"code-literal\">false</span> ))) {\n","                      <span class=\"code-keyword\">delete</span> attrs[key];\n","                      hasAttrsChanged = <span class=\"code-literal\">true</span>;\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-comment\">// trigger updates for $attrs in case it's used in component slots</span>\n","      <span class=\"code-keyword\">if</span> (hasAttrsChanged) {\n","          trigger(instance, <span class=\"code-string\">\"set\"</span> <span class=\"code-comment\">/* TriggerOpTypes.SET */</span>, <span class=\"code-string\">'$attrs'</span>);\n","      }\n","      {\n","          validateProps(rawProps || {}, props, instance);\n","      }\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">setFullProps</span>(<span class=\"code-params\">instance, rawProps, props, attrs</span>) </span>{\n","      <span class=\"code-keyword\">const</span> [options, needCastKeys] = instance.propsOptions;\n","      <span class=\"code-keyword\">let</span> hasAttrsChanged = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">let</span> rawCastValues;\n","      <span class=\"code-keyword\">if</span> (rawProps) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> key <span class=\"code-keyword\">in</span> rawProps) {\n","              <span class=\"code-comment\">// key, ref are reserved and never passed down</span>\n","              <span class=\"code-keyword\">if</span> (isReservedProp(key)) {\n","                  <span class=\"code-keyword\">continue</span>;\n","              }\n","              <span class=\"code-keyword\">const</span> value = rawProps[key];\n","              <span class=\"code-comment\">// prop option names are camelized during normalization, so to support</span>\n","              <span class=\"code-comment\">// kebab -&gt; camel conversion here we need to camelize the key.</span>\n","              <span class=\"code-keyword\">let</span> camelKey;\n","              <span class=\"code-keyword\">if</span> (options &amp;&amp; hasOwn(options, (camelKey = camelize(key)))) {\n","                  <span class=\"code-keyword\">if</span> (!needCastKeys || !needCastKeys.includes(camelKey)) {\n","                      props[camelKey] = value;\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      (rawCastValues || (rawCastValues = {}))[camelKey] = value;\n","                  }\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (!isEmitListener(instance.emitsOptions, key)) {\n","                  <span class=\"code-keyword\">if</span> (!(key <span class=\"code-keyword\">in</span> attrs) || value !== attrs[key]) {\n","                      attrs[key] = value;\n","                      hasAttrsChanged = <span class=\"code-literal\">true</span>;\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">if</span> (needCastKeys) {\n","          <span class=\"code-keyword\">const</span> rawCurrentProps = toRaw(props);\n","          <span class=\"code-keyword\">const</span> castValues = rawCastValues || EMPTY_OBJ;\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; needCastKeys.length; i++) {\n","              <span class=\"code-keyword\">const</span> key = needCastKeys[i];\n","              props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> hasAttrsChanged;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">resolvePropValue</span>(<span class=\"code-params\">options, props, key, value, instance, isAbsent</span>) </span>{\n","      <span class=\"code-keyword\">const</span> opt = options[key];\n","      <span class=\"code-keyword\">if</span> (opt != <span class=\"code-literal\">null</span>) {\n","          <span class=\"code-keyword\">const</span> hasDefault = hasOwn(opt, <span class=\"code-string\">'default'</span>);\n","          <span class=\"code-comment\">// default values</span>\n","          <span class=\"code-keyword\">if</span> (hasDefault &amp;&amp; value === <span class=\"code-literal\">undefined</span>) {\n","              <span class=\"code-keyword\">const</span> defaultValue = opt.default;\n","              <span class=\"code-keyword\">if</span> (opt.type !== <span class=\"code-built_in\">Function</span> &amp;&amp; isFunction(defaultValue)) {\n","                  <span class=\"code-keyword\">const</span> { propsDefaults } = instance;\n","                  <span class=\"code-keyword\">if</span> (key <span class=\"code-keyword\">in</span> propsDefaults) {\n","                      value = propsDefaults[key];\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      setCurrentInstance(instance);\n","                      value = propsDefaults[key] = defaultValue.call(<span class=\"code-literal\">null</span>, props);\n","                      unsetCurrentInstance();\n","                  }\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  value = defaultValue;\n","              }\n","          }\n","          <span class=\"code-comment\">// boolean casting</span>\n","          <span class=\"code-keyword\">if</span> (opt[<span class=\"code-number\">0</span> <span class=\"code-comment\">/* BooleanFlags.shouldCast */</span>]) {\n","              <span class=\"code-keyword\">if</span> (isAbsent &amp;&amp; !hasDefault) {\n","                  value = <span class=\"code-literal\">false</span>;\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (opt[<span class=\"code-number\">1</span> <span class=\"code-comment\">/* BooleanFlags.shouldCastTrue */</span>] &amp;&amp;\n","                  (value === <span class=\"code-string\">''</span> || value === hyphenate(key))) {\n","                  value = <span class=\"code-literal\">true</span>;\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">return</span> value;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">normalizePropsOptions</span>(<span class=\"code-params\">comp, appContext, asMixin = false</span>) </span>{\n","      <span class=\"code-keyword\">const</span> cache = appContext.propsCache;\n","      <span class=\"code-keyword\">const</span> cached = cache.get(comp);\n","      <span class=\"code-keyword\">if</span> (cached) {\n","          <span class=\"code-keyword\">return</span> cached;\n","      }\n","      <span class=\"code-keyword\">const</span> raw = comp.props;\n","      <span class=\"code-keyword\">const</span> normalized = {};\n","      <span class=\"code-keyword\">const</span> needCastKeys = [];\n","      <span class=\"code-comment\">// apply mixin/extends props</span>\n","      <span class=\"code-keyword\">let</span> hasExtends = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">if</span> (!isFunction(comp)) {\n","          <span class=\"code-keyword\">const</span> extendProps = <span class=\"code-function\">(<span class=\"code-params\">raw</span>) =&gt;</span> {\n","              hasExtends = <span class=\"code-literal\">true</span>;\n","              <span class=\"code-keyword\">const</span> [props, keys] = normalizePropsOptions(raw, appContext, <span class=\"code-literal\">true</span>);\n","              extend(normalized, props);\n","              <span class=\"code-keyword\">if</span> (keys)\n","                  needCastKeys.push(...keys);\n","          };\n","          <span class=\"code-keyword\">if</span> (!asMixin &amp;&amp; appContext.mixins.length) {\n","              appContext.mixins.forEach(extendProps);\n","          }\n","          <span class=\"code-keyword\">if</span> (comp.extends) {\n","              extendProps(comp.extends);\n","          }\n","          <span class=\"code-keyword\">if</span> (comp.mixins) {\n","              comp.mixins.forEach(extendProps);\n","          }\n","      }\n","      <span class=\"code-keyword\">if</span> (!raw &amp;&amp; !hasExtends) {\n","          <span class=\"code-keyword\">if</span> (isObject(comp)) {\n","              cache.set(comp, EMPTY_ARR);\n","          }\n","          <span class=\"code-keyword\">return</span> EMPTY_ARR;\n","      }\n","      <span class=\"code-keyword\">if</span> (isArray(raw)) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; raw.length; i++) {\n","              <span class=\"code-keyword\">if</span> (!isString(raw[i])) {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`props must be strings when using array syntax.`</span>, raw[i]);\n","              }\n","              <span class=\"code-keyword\">const</span> normalizedKey = camelize(raw[i]);\n","              <span class=\"code-keyword\">if</span> (validatePropName(normalizedKey)) {\n","                  normalized[normalizedKey] = EMPTY_OBJ;\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (raw) {\n","          <span class=\"code-keyword\">if</span> (!isObject(raw)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`invalid props options`</span>, raw);\n","          }\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> raw) {\n","              <span class=\"code-keyword\">const</span> normalizedKey = camelize(key);\n","              <span class=\"code-keyword\">if</span> (validatePropName(normalizedKey)) {\n","                  <span class=\"code-keyword\">const</span> opt = raw[key];\n","                  <span class=\"code-keyword\">const</span> prop = (normalized[normalizedKey] =\n","                      isArray(opt) || isFunction(opt) ? { <span class=\"code-attr\">type</span>: opt } : <span class=\"code-built_in\">Object</span>.assign({}, opt));\n","                  <span class=\"code-keyword\">if</span> (prop) {\n","                      <span class=\"code-keyword\">const</span> booleanIndex = getTypeIndex(<span class=\"code-built_in\">Boolean</span>, prop.type);\n","                      <span class=\"code-keyword\">const</span> stringIndex = getTypeIndex(<span class=\"code-built_in\">String</span>, prop.type);\n","                      prop[<span class=\"code-number\">0</span> <span class=\"code-comment\">/* BooleanFlags.shouldCast */</span>] = booleanIndex &gt; <span class=\"code-number\">-1</span>;\n","                      prop[<span class=\"code-number\">1</span> <span class=\"code-comment\">/* BooleanFlags.shouldCastTrue */</span>] =\n","                          stringIndex &lt; <span class=\"code-number\">0</span> || booleanIndex &lt; stringIndex;\n","                      <span class=\"code-comment\">// if the prop needs boolean casting or default value</span>\n","                      <span class=\"code-keyword\">if</span> (booleanIndex &gt; <span class=\"code-number\">-1</span> || hasOwn(prop, <span class=\"code-string\">'default'</span>)) {\n","                          needCastKeys.push(normalizedKey);\n","                      }\n","                  }\n","              }\n","          }\n","      }\n","      <span class=\"code-keyword\">const</span> res = [normalized, needCastKeys];\n","      <span class=\"code-keyword\">if</span> (isObject(comp)) {\n","          cache.set(comp, res);\n","      }\n","      <span class=\"code-keyword\">return</span> res;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">validatePropName</span>(<span class=\"code-params\">key</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (key[<span class=\"code-number\">0</span>] !== <span class=\"code-string\">'$'</span>) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-literal\">true</span>;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Invalid prop name: \"<span class=\"code-subst\">${key}</span>\" is a reserved property.`</span>);\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-literal\">false</span>;\n","  }\n","  <span class=\"code-comment\">// use function string name to check type constructors</span>\n","  <span class=\"code-comment\">// so that it works across vms / iframes.</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getType</span>(<span class=\"code-params\">ctor</span>) </span>{\n","      <span class=\"code-keyword\">const</span> match = ctor &amp;&amp; ctor.toString().match(<span class=\"code-regexp\">/^\\s*function (\\w+)/</span>);\n","      <span class=\"code-keyword\">return</span> match ? match[<span class=\"code-number\">1</span>] : ctor === <span class=\"code-literal\">null</span> ? <span class=\"code-string\">'null'</span> : <span class=\"code-string\">''</span>;\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isSameType</span>(<span class=\"code-params\">a, b</span>) </span>{\n","      <span class=\"code-keyword\">return</span> getType(a) === getType(b);\n","  }\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getTypeIndex</span>(<span class=\"code-params\">type, expectedTypes</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (isArray(expectedTypes)) {\n","          <span class=\"code-keyword\">return</span> expectedTypes.findIndex(<span class=\"code-function\"><span class=\"code-params\">t</span> =&gt;</span> isSameType(t, type));\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isFunction(expectedTypes)) {\n","          <span class=\"code-keyword\">return</span> isSameType(expectedTypes, type) ? <span class=\"code-number\">0</span> : <span class=\"code-number\">-1</span>;\n","      }\n","      <span class=\"code-keyword\">return</span> <span class=\"code-number\">-1</span>;\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">validateProps</span>(<span class=\"code-params\">rawProps, props, instance</span>) </span>{\n","      <span class=\"code-keyword\">const</span> resolvedValues = toRaw(props);\n","      <span class=\"code-keyword\">const</span> options = instance.propsOptions[<span class=\"code-number\">0</span>];\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> options) {\n","          <span class=\"code-keyword\">let</span> opt = options[key];\n","          <span class=\"code-keyword\">if</span> (opt == <span class=\"code-literal\">null</span>)\n","              <span class=\"code-keyword\">continue</span>;\n","          validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) &amp;&amp; !hasOwn(rawProps, hyphenate(key)));\n","      }\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">validateProp</span>(<span class=\"code-params\">name, value, prop, isAbsent</span>) </span>{\n","      <span class=\"code-keyword\">const</span> { type, required, validator } = prop;\n","      <span class=\"code-comment\">// required!</span>\n","      <span class=\"code-keyword\">if</span> (required &amp;&amp; isAbsent) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">'Missing required prop: \"'</span> + name + <span class=\"code-string\">'\"'</span>);\n","          <span class=\"code-keyword\">return</span>;\n","      }\n","      <span class=\"code-comment\">// missing but optional</span>\n","      <span class=\"code-keyword\">if</span> (value == <span class=\"code-literal\">null</span> &amp;&amp; !prop.required) {\n","          <span class=\"code-keyword\">return</span>;\n","      }\n","      <span class=\"code-comment\">// type check</span>\n","      <span class=\"code-keyword\">if</span> (type != <span class=\"code-literal\">null</span> &amp;&amp; type !== <span class=\"code-literal\">true</span>) {\n","          <span class=\"code-keyword\">let</span> isValid = <span class=\"code-literal\">false</span>;\n","          <span class=\"code-keyword\">const</span> types = isArray(type) ? type : [type];\n","          <span class=\"code-keyword\">const</span> expectedTypes = [];\n","          <span class=\"code-comment\">// value is valid as long as one of the specified types match</span>\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">let</span> i = <span class=\"code-number\">0</span>; i &lt; types.length &amp;&amp; !isValid; i++) {\n","              <span class=\"code-keyword\">const</span> { valid, expectedType } = assertType(value, types[i]);\n","              expectedTypes.push(expectedType || <span class=\"code-string\">''</span>);\n","              isValid = valid;\n","          }\n","          <span class=\"code-keyword\">if</span> (!isValid) {\n","              warn$<span class=\"code-number\">1</span>(getInvalidTypeMessage(name, value, expectedTypes));\n","              <span class=\"code-keyword\">return</span>;\n","          }\n","      }\n","      <span class=\"code-comment\">// custom validator</span>\n","      <span class=\"code-keyword\">if</span> (validator &amp;&amp; !validator(value)) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">'Invalid prop: custom validator check failed for prop \"'</span> + name + <span class=\"code-string\">'\".'</span>);\n","      }\n","  }\n","  <span class=\"code-keyword\">const</span> isSimpleType = <span class=\"code-comment\">/*#__PURE__*/</span> makeMap(<span class=\"code-string\">'String,Number,Boolean,Function,Symbol,BigInt'</span>);\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">assertType</span>(<span class=\"code-params\">value, type</span>) </span>{\n","      <span class=\"code-keyword\">let</span> valid;\n","      <span class=\"code-keyword\">const</span> expectedType = getType(type);\n","      <span class=\"code-keyword\">if</span> (isSimpleType(expectedType)) {\n","          <span class=\"code-keyword\">const</span> t = <span class=\"code-keyword\">typeof</span> value;\n","          valid = t === expectedType.toLowerCase();\n","          <span class=\"code-comment\">// for primitive wrapper objects</span>\n","          <span class=\"code-keyword\">if</span> (!valid &amp;&amp; t === <span class=\"code-string\">'object'</span>) {\n","              valid = value <span class=\"code-keyword\">instanceof</span> type;\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (expectedType === <span class=\"code-string\">'Object'</span>) {\n","          valid = isObject(value);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (expectedType === <span class=\"code-string\">'Array'</span>) {\n","          valid = isArray(value);\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (expectedType === <span class=\"code-string\">'null'</span>) {\n","          valid = value === <span class=\"code-literal\">null</span>;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          valid = value <span class=\"code-keyword\">instanceof</span> type;\n","      }\n","      <span class=\"code-keyword\">return</span> {\n","          valid,\n","          expectedType\n","      };\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">getInvalidTypeMessage</span>(<span class=\"code-params\">name, value, expectedTypes</span>) </span>{\n","      <span class=\"code-keyword\">let</span> message = <span class=\"code-string\">`Invalid prop: type check failed for prop \"<span class=\"code-subst\">${name}</span>\".`</span> +\n","          <span class=\"code-string\">` Expected <span class=\"code-subst\">${expectedTypes.map(capitalize).join(<span class=\"code-string\">' | '</span>)}</span>`</span>;\n","      <span class=\"code-keyword\">const</span> expectedType = expectedTypes[<span class=\"code-number\">0</span>];\n","      <span class=\"code-keyword\">const</span> receivedType = toRawType(value);\n","      <span class=\"code-keyword\">const</span> expectedValue = styleValue(value, expectedType);\n","      <span class=\"code-keyword\">const</span> receivedValue = styleValue(value, receivedType);\n","      <span class=\"code-comment\">// check if we need to specify expected value</span>\n","      <span class=\"code-keyword\">if</span> (expectedTypes.length === <span class=\"code-number\">1</span> &amp;&amp;\n","          isExplicable(expectedType) &amp;&amp;\n","          !isBoolean(expectedType, receivedType)) {\n","          message += <span class=\"code-string\">` with value <span class=\"code-subst\">${expectedValue}</span>`</span>;\n","      }\n","      message += <span class=\"code-string\">`, got <span class=\"code-subst\">${receivedType}</span> `</span>;\n","      <span class=\"code-comment\">// check if we need to specify received value</span>\n","      <span class=\"code-keyword\">if</span> (isExplicable(receivedType)) {\n","          message += <span class=\"code-string\">`with value <span class=\"code-subst\">${receivedValue}</span>.`</span>;\n","      }\n","      <span class=\"code-keyword\">return</span> message;\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">styleValue</span>(<span class=\"code-params\">value, type</span>) </span>{\n","      <span class=\"code-keyword\">if</span> (type === <span class=\"code-string\">'String'</span>) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-string\">`\"<span class=\"code-subst\">${value}</span>\"`</span>;\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (type === <span class=\"code-string\">'Number'</span>) {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-string\">`<span class=\"code-subst\">${<span class=\"code-built_in\">Number</span>(value)}</span>`</span>;\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          <span class=\"code-keyword\">return</span> <span class=\"code-string\">`<span class=\"code-subst\">${value}</span>`</span>;\n","      }\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isExplicable</span>(<span class=\"code-params\">type</span>) </span>{\n","      <span class=\"code-keyword\">const</span> explicitTypes = [<span class=\"code-string\">'string'</span>, <span class=\"code-string\">'number'</span>, <span class=\"code-string\">'boolean'</span>];\n","      <span class=\"code-keyword\">return</span> explicitTypes.some(<span class=\"code-function\"><span class=\"code-params\">elem</span> =&gt;</span> type.toLowerCase() === elem);\n","  }\n","  <span class=\"code-comment\">/**\n</span>","<span class=\"code-comment\">   * dev only\n</span>","<span class=\"code-comment\">   */</span>\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">isBoolean</span>(<span class=\"code-params\">...args</span>) </span>{\n","      <span class=\"code-keyword\">return</span> args.some(<span class=\"code-function\"><span class=\"code-params\">elem</span> =&gt;</span> elem.toLowerCase() === <span class=\"code-string\">'boolean'</span>);\n","  }\n","\n","  <span class=\"code-keyword\">const</span> isInternalKey = <span class=\"code-function\">(<span class=\"code-params\">key</span>) =&gt;</span> key[<span class=\"code-number\">0</span>] === <span class=\"code-string\">'_'</span> || key === <span class=\"code-string\">'$stable'</span>;\n","  <span class=\"code-keyword\">const</span> normalizeSlotValue = <span class=\"code-function\">(<span class=\"code-params\">value</span>) =&gt;</span> isArray(value)\n","      ? value.map(normalizeVNode)\n","      : [normalizeVNode(value)];\n","  <span class=\"code-keyword\">const</span> normalizeSlot = <span class=\"code-function\">(<span class=\"code-params\">key, rawSlot, ctx</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">if</span> (rawSlot._n) {\n","          <span class=\"code-comment\">// already normalized - #5353</span>\n","          <span class=\"code-keyword\">return</span> rawSlot;\n","      }\n","      <span class=\"code-keyword\">const</span> normalized = withCtx(<span class=\"code-function\">(<span class=\"code-params\">...args</span>) =&gt;</span> {\n","          <span class=\"code-keyword\">if</span> (<span class=\"code-literal\">true</span> &amp;&amp; currentInstance) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Slot \"<span class=\"code-subst\">${key}</span>\" invoked outside of the render function: `</span> +\n","                  <span class=\"code-string\">`this will not track dependencies used in the slot. `</span> +\n","                  <span class=\"code-string\">`Invoke the slot function inside the render function instead.`</span>);\n","          }\n","          <span class=\"code-keyword\">return</span> normalizeSlotValue(rawSlot(...args));\n","      }, ctx);\n","      normalized._c = <span class=\"code-literal\">false</span>;\n","      <span class=\"code-keyword\">return</span> normalized;\n","  };\n","  <span class=\"code-keyword\">const</span> normalizeObjectSlots = <span class=\"code-function\">(<span class=\"code-params\">rawSlots, slots, instance</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> ctx = rawSlots._ctx;\n","      <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> rawSlots) {\n","          <span class=\"code-keyword\">if</span> (isInternalKey(key))\n","              <span class=\"code-keyword\">continue</span>;\n","          <span class=\"code-keyword\">const</span> value = rawSlots[key];\n","          <span class=\"code-keyword\">if</span> (isFunction(value)) {\n","              slots[key] = normalizeSlot(key, value, ctx);\n","          }\n","          <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (value != <span class=\"code-literal\">null</span>) {\n","              {\n","                  warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Non-function value encountered for slot \"<span class=\"code-subst\">${key}</span>\". `</span> +\n","                      <span class=\"code-string\">`Prefer function slots for better performance.`</span>);\n","              }\n","              <span class=\"code-keyword\">const</span> normalized = normalizeSlotValue(value);\n","              slots[key] = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> normalized;\n","          }\n","      }\n","  };\n","  <span class=\"code-keyword\">const</span> normalizeVNodeSlots = <span class=\"code-function\">(<span class=\"code-params\">instance, children</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">if</span> (!isKeepAlive(instance.vnode) &amp;&amp;\n","          !(<span class=\"code-literal\">false</span> )) {\n","          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Non-function value encountered for default slot. `</span> +\n","              <span class=\"code-string\">`Prefer function slots for better performance.`</span>);\n","      }\n","      <span class=\"code-keyword\">const</span> normalized = normalizeSlotValue(children);\n","      instance.slots.default = <span class=\"code-function\"><span class=\"code-params\">()</span> =&gt;</span> normalized;\n","  };\n","  <span class=\"code-keyword\">const</span> initSlots = <span class=\"code-function\">(<span class=\"code-params\">instance, children</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">if</span> (instance.vnode.shapeFlag &amp; <span class=\"code-number\">32</span> <span class=\"code-comment\">/* ShapeFlags.SLOTS_CHILDREN */</span>) {\n","          <span class=\"code-keyword\">const</span> type = children._;\n","          <span class=\"code-keyword\">if</span> (type) {\n","              <span class=\"code-comment\">// users can get the shallow readonly version of the slots object through `this.$slots`,</span>\n","              <span class=\"code-comment\">// we should avoid the proxy object polluting the slots of the internal instance</span>\n","              instance.slots = toRaw(children);\n","              <span class=\"code-comment\">// make compiler marker non-enumerable</span>\n","              def(children, <span class=\"code-string\">'_'</span>, type);\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              normalizeObjectSlots(children, (instance.slots = {}));\n","          }\n","      }\n","      <span class=\"code-keyword\">else</span> {\n","          instance.slots = {};\n","          <span class=\"code-keyword\">if</span> (children) {\n","              normalizeVNodeSlots(instance, children);\n","          }\n","      }\n","      def(instance.slots, InternalObjectKey, <span class=\"code-number\">1</span>);\n","  };\n","  <span class=\"code-keyword\">const</span> updateSlots = <span class=\"code-function\">(<span class=\"code-params\">instance, children, optimized</span>) =&gt;</span> {\n","      <span class=\"code-keyword\">const</span> { vnode, slots } = instance;\n","      <span class=\"code-keyword\">let</span> needDeletionCheck = <span class=\"code-literal\">true</span>;\n","      <span class=\"code-keyword\">let</span> deletionComparisonTarget = EMPTY_OBJ;\n","      <span class=\"code-keyword\">if</span> (vnode.shapeFlag &amp; <span class=\"code-number\">32</span> <span class=\"code-comment\">/* ShapeFlags.SLOTS_CHILDREN */</span>) {\n","          <span class=\"code-keyword\">const</span> type = children._;\n","          <span class=\"code-keyword\">if</span> (type) {\n","              <span class=\"code-comment\">// compiled slots.</span>\n","              <span class=\"code-keyword\">if</span> (isHmrUpdating) {\n","                  <span class=\"code-comment\">// Parent was HMR updated so slot content may have changed.</span>\n","                  <span class=\"code-comment\">// force update slots and mark instance for hmr as well</span>\n","                  extend(slots, children);\n","              }\n","              <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (optimized &amp;&amp; type === <span class=\"code-number\">1</span> <span class=\"code-comment\">/* SlotFlags.STABLE */</span>) {\n","                  <span class=\"code-comment\">// compiled AND stable.</span>\n","                  <span class=\"code-comment\">// no need to update, and skip stale slots removal.</span>\n","                  needDeletionCheck = <span class=\"code-literal\">false</span>;\n","              }\n","              <span class=\"code-keyword\">else</span> {\n","                  <span class=\"code-comment\">// compiled but dynamic (v-if/v-for on slots) - update slots, but skip</span>\n","                  <span class=\"code-comment\">// normalization.</span>\n","                  extend(slots, children);\n","                  <span class=\"code-comment\">// #2893</span>\n","                  <span class=\"code-comment\">// when rendering the optimized slots by manually written render function,</span>\n","                  <span class=\"code-comment\">// we need to delete the `slots._` flag if necessary to make subsequent updates reliable,</span>\n","                  <span class=\"code-comment\">// i.e. let the `renderSlot` create the bailed Fragment</span>\n","                  <span class=\"code-keyword\">if</span> (!optimized &amp;&amp; type === <span class=\"code-number\">1</span> <span class=\"code-comment\">/* SlotFlags.STABLE */</span>) {\n","                      <span class=\"code-keyword\">delete</span> slots._;\n","                  }\n","              }\n","          }\n","          <span class=\"code-keyword\">else</span> {\n","              needDeletionCheck = !children.$stable;\n","              normalizeObjectSlots(children, slots);\n","          }\n","          deletionComparisonTarget = children;\n","      }\n","      <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (children) {\n","          <span class=\"code-comment\">// non slot object children (direct value) passed to a component</span>\n","          normalizeVNodeSlots(instance, children);\n","          deletionComparisonTarget = { <span class=\"code-attr\">default</span>: <span class=\"code-number\">1</span> };\n","      }\n","      <span class=\"code-comment\">// delete stale slots</span>\n","      <span class=\"code-keyword\">if</span> (needDeletionCheck) {\n","          <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">const</span> key <span class=\"code-keyword\">in</span> slots) {\n","              <span class=\"code-keyword\">if</span> (!isInternalKey(key) &amp;&amp; !(key <span class=\"code-keyword\">in</span> deletionComparisonTarget)) {\n","                  <span class=\"code-keyword\">delete</span> slots[key];\n","              }\n","          }\n","      }\n","  };\n","\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createAppContext</span>(<span class=\"code-params\"></span>) </span>{\n","      <span class=\"code-keyword\">return</span> {\n","          app: <span class=\"code-literal\">null</span>,\n","          config: {\n","              isNativeTag: NO,\n","              performance: <span class=\"code-literal\">false</span>,\n","              globalProperties: {},\n","              optionMergeStrategies: {},\n","              errorHandler: <span class=\"code-literal\">undefined</span>,\n","              warnHandler: <span class=\"code-literal\">undefined</span>,\n","              compilerOptions: {}\n","          },\n","          mixins: [],\n","          components: {},\n","          directives: {},\n","          provides: <span class=\"code-built_in\">Object</span>.create(<span class=\"code-literal\">null</span>),\n","          optionsCache: <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>(),\n","          propsCache: <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>(),\n","          emitsCache: <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">WeakMap</span>()\n","      };\n","  }\n","  <span class=\"code-keyword\">let</span> uid = <span class=\"code-number\">0</span>;\n","  <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createAppAPI</span>(<span class=\"code-params\">render, hydrate</span>) </span>{\n","      <span class=\"code-keyword\">return</span> <span class=\"code-function\"><span class=\"code-keyword\">function</span> <span class=\"code-title\">createApp</span>(<span class=\"code-params\">rootComponent, rootProps = null</span>) </span>{\n","          <span class=\"code-keyword\">if</span> (!isFunction(rootComponent)) {\n","              rootComponent = <span class=\"code-built_in\">Object</span>.assign({}, rootComponent);\n","          }\n","          <span class=\"code-keyword\">if</span> (rootProps != <span class=\"code-literal\">null</span> &amp;&amp; !isObject(rootProps)) {\n","              warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`root props passed to app.mount() must be an object.`</span>);\n","              rootProps = <span class=\"code-literal\">null</span>;\n","          }\n","          <span class=\"code-keyword\">const</span> context = createAppContext();\n","          <span class=\"code-keyword\">const</span> installedPlugins = <span class=\"code-keyword\">new</span> <span class=\"code-built_in\">Set</span>();\n","          <span class=\"code-keyword\">let</span> isMounted = <span class=\"code-literal\">false</span>;\n","          <span class=\"code-keyword\">const</span> app = (context.app = {\n","              _uid: uid++,\n","              _component: rootComponent,\n","              _props: rootProps,\n","              _container: <span class=\"code-literal\">null</span>,\n","              _context: context,\n","              _instance: <span class=\"code-literal\">null</span>,\n","              version,\n","              <span class=\"code-keyword\">get</span> config() {\n","                  <span class=\"code-keyword\">return</span> context.config;\n","              },\n","              <span class=\"code-keyword\">set</span> config(v) {\n","                  {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`app.config cannot be replaced. Modify individual options instead.`</span>);\n","                  }\n","              },\n","              use(plugin, ...options) {\n","                  <span class=\"code-keyword\">if</span> (installedPlugins.has(plugin)) {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Plugin has already been applied to target app.`</span>);\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (plugin &amp;&amp; isFunction(plugin.install)) {\n","                      installedPlugins.add(plugin);\n","                      plugin.install(app, ...options);\n","                  }\n","                  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (isFunction(plugin)) {\n","                      installedPlugins.add(plugin);\n","                      plugin(app, ...options);\n","                  }\n","                  <span class=\"code-keyword\">else</span> {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`A plugin must either be a function or an object with an \"install\" `</span> +\n","                          <span class=\"code-string\">`function.`</span>);\n","                  }\n","                  <span class=\"code-keyword\">return</span> app;\n","              },\n","              mixin(mixin) {\n","                  {\n","                      <span class=\"code-keyword\">if</span> (!context.mixins.includes(mixin)) {\n","                          context.mixins.push(mixin);\n","                      }\n","                      <span class=\"code-keyword\">else</span> {\n","                          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">'Mixin has already been applied to target app'</span> +\n","                              (mixin.name ? <span class=\"code-string\">`: <span class=\"code-subst\">${mixin.name}</span>`</span> : <span class=\"code-string\">''</span>));\n","                      }\n","                  }\n","                  <span class=\"code-keyword\">return</span> app;\n","              },\n","              component(name, component) {\n","                  {\n","                      validateComponentName(name, context.config);\n","                  }\n","                  <span class=\"code-keyword\">if</span> (!component) {\n","                      <span class=\"code-keyword\">return</span> context.components[name];\n","                  }\n","                  <span class=\"code-keyword\">if</span> (context.components[name]) {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Component \"<span class=\"code-subst\">${name}</span>\" has already been registered in target app.`</span>);\n","                  }\n","                  context.components[name] = component;\n","                  <span class=\"code-keyword\">return</span> app;\n","              },\n","              directive(name, directive) {\n","                  {\n","                      validateDirectiveName(name);\n","                  }\n","                  <span class=\"code-keyword\">if</span> (!directive) {\n","                      <span class=\"code-keyword\">return</span> context.directives[name];\n","                  }\n","                  <span class=\"code-keyword\">if</span> (context.directives[name]) {\n","                      warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`Directive \"<span class=\"code-subst\">${name}</span>\" has already been registered in target app.`</span>);\n","                  }\n","                  context.directives[name] = directive;\n","                  <span class=\"code-keyword\">return</span> app;\n","              },\n","              mount(rootContainer, isHydrate, isSVG) {\n","                  <span class=\"code-keyword\">if</span> (!isMounted) {\n","                      <span class=\"code-comment\">// #5571</span>\n","                      <span class=\"code-keyword\">if</span> (rootContainer.__vue_app__) {\n","                          warn$<span class=\"code-number\">1</span>(<span class=\"code-string\">`There is already an app instance mounted on the host container.\\n`</span> +\n","                              <span class=\"code-string\">` If you want to mount another app on the same host container,`</span> +\n","                              <span class=\"code-string\">` you need to unmount the previous app by calling \\`app.unmount()\\` first.`</span>);\n","                      }\n","                      <span class=\"code-keyword\">const</span> vnode = createVNode(rootComponent, rootProps);\n","                      <span class=\"code-comment